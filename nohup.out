Warning: importing 'simtk.openmm' is deprecated.  Import 'openmm' instead.
Processing residue A:CYS121
[start] output filename is: ligcovalent_single.pdb
CHAIN A
Writing output filename: ligcovalent_single.pdb
1---ligcovalent.pdb prepared...
1.5--done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= fixed  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  fixed
merged  0  nonpolar hydrogens
end of base class init
using std outputfilename  fixed.pdbqt
wrote  fixed  to  fixed.pdbqt
2---done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= ligcovalent  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  ligcovalent
merged  21  nonpolar hydrogens
end of base class init
using std outputfilename  ligcovalent.pdbqt
wrote  ligcovalent  to  ligcovalent.pdbqt
3---done
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> fixed:A:CYS121 with 6 MolKit.molecule.Atom]
calling setAutoFlexFields with  fixed:A:CYS121
in setAutoFlexFields with  fixed:A:CYS121
len(rotatables)= 1
returning res.torscount= 1
res.root= CA
ntors= 1
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= fixed_flex.pdbqt
res_total= 1
in writeResidue with  fixed:A:CYS121
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS121:CA, <Atom instance> fixed:A:CYS121:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS121:CA, <Atom instance> fixed:A:CYS121:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS121:N, <Atom instance> fixed:A:CYS121:CA)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3


writing and calling wL with nA= SG - 3
wBF2: wrote  SG
!!!2:calling wL


in writeLevel with  SG  outatom_counter= 4
len( SG ).bonds= 1
skipping b= CB - SG
returning queue= []
newQ= []
 currently queue=
CA : CB : queue= []
wrote flex file fixed_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: fixed_flex.pdbqt
wrote rigid file: fixed_rigid.pdbqt
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> ligcovalent:A:CYS121 with 28 MolKit.molecule.Atom]
calling setAutoFlexFields with  ligcovalent:A:CYS121
in setAutoFlexFields with  ligcovalent:A:CYS121
len(rotatables)= 8
returning res.torscount= 7
res.root= CA
ntors= 7
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= ligcovalent_flex.pdbqt
res_total= 7
in writeResidue with  ligcovalent:A:CYS121
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS121:CA, <Atom instance> ligcovalent:A:CYS121:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS121:CA, <Atom instance> ligcovalent:A:CYS121:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS121:N, <Atom instance> ligcovalent:A:CYS121:CA)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3
 currently queue= CB - SG ,
CA : CB : queue= [(<Atom instance> ligcovalent:A:CYS121:CB, <Atom instance> ligcovalent:A:CYS121:SG)]
 processing queue entry:  CB - SG
in wBF with fromAtom= CB + startAtom= SG startAtom.used= 0
wBF: wrote  SG
self.outatom_counter= 4
 currently queue= SG - CX ,
CB : SG : queue= [(<Atom instance> ligcovalent:A:CYS121:SG, <Atom instance> ligcovalent:A:CYS121:CX)]
 processing queue entry:  SG - CX
in wBF with fromAtom= SG + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 5
 currently queue= CX - CX ,
SG : CX : queue= [(<Atom instance> ligcovalent:A:CYS121:CX, <Atom instance> ligcovalent:A:CYS121:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 6
 currently queue= CX - CX , CX - CX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS121:CX, <Atom instance> ligcovalent:A:CYS121:CX), (<Atom instance> ligcovalent:A:CYS121:CX, <Atom instance> ligcovalent:A:CYS121:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 7


writing and calling wL with nA= CX - 7
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 8
len( CX ).bonds= 1
skipping b= CX - CX
returning queue= []
newQ= []
 currently queue=
CX : CX : queue= []
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 9


writing and calling wL with nA= NX - 9
wBF2: wrote  NX
!!!2:calling wL


in writeLevel with  NX  outatom_counter= 10
len( NX ).bonds= 3
processing b= CX - NX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
processing b= NX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= NX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 12
len( CX ).bonds= 3
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - NX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 14
len( CX ).bonds= 3
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 16
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 17
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= []
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 17
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 18
len( CX ).bonds= 3
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
processing b= OX - CX  activeTors= 1
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
CX wL: queue= [(<Atom instance> ligcovalent:A:CYS121:CX, <Atom instance> ligcovalent:A:CYS121:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 19
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS121:CX, <Atom instance> ligcovalent:A:CYS121:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS121:CX, <Atom instance> ligcovalent:A:CYS121:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS121:CX, <Atom instance> ligcovalent:A:CYS121:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS121:CX, <Atom instance> ligcovalent:A:CYS121:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS121:CX, <Atom instance> ligcovalent:A:CYS121:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS121:CX, <Atom instance> ligcovalent:A:CYS121:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 19
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS121:CX, <Atom instance> ligcovalent:A:CYS121:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS121:CX, <Atom instance> ligcovalent:A:CYS121:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 19
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= NX - CX
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS121:CX, <Atom instance> ligcovalent:A:CYS121:OX)]
newQ= [(<Atom instance> ligcovalent:A:CYS121:CX, <Atom instance> ligcovalent:A:CYS121:OX)]
@@@@len(newq)= 1
queue= [(<Atom instance> ligcovalent:A:CYS121:CX, <Atom instance> ligcovalent:A:CYS121:OX)]


writing and calling wL with nA= OX - 19
wBF2: wrote  OX
!!!2:calling wL


in writeLevel with  OX  outatom_counter= 20
len( OX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []
 currently queue= CX - OX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS121:CX, <Atom instance> ligcovalent:A:CYS121:OX)]
 processing queue entry:  CX - OX
in wBF with fromAtom= CX + startAtom= OX startAtom.used= 0
wBF: wrote  OX
self.outatom_counter= 21


writing and calling wL with nA= CX - 21
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 22
len( CX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []
 currently queue=
CX : OX : queue= []
wrote flex file ligcovalent_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: ligcovalent_flex.pdbqt
wrote rigid file: ligcovalent_rigid.pdbqt
4---done
setting PYTHONHOME environment
setting PYTHONHOME environment
!unable to use ligand.TORSDOF! torsdof always set to ligand.ndihe= 7
5---done
 concat 10 log files... done.
Job finished, good luck!
rm: 无法删除'chimera.com': 没有那个文件或目录
rm: 无法删除'tmp.mol2': 没有那个文件或目录
Done
Processing residue A:CYS208
[start] output filename is: ligcovalent_single.pdb
CHAIN A
Writing output filename: ligcovalent_single.pdb
1---ligcovalent.pdb prepared...
1.5--done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= fixed  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  fixed
merged  0  nonpolar hydrogens
end of base class init
using std outputfilename  fixed.pdbqt
wrote  fixed  to  fixed.pdbqt
2---done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= ligcovalent  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  ligcovalent
merged  21  nonpolar hydrogens
end of base class init
using std outputfilename  ligcovalent.pdbqt
wrote  ligcovalent  to  ligcovalent.pdbqt
3---done
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> fixed:A:CYS208 with 6 MolKit.molecule.Atom]
calling setAutoFlexFields with  fixed:A:CYS208
in setAutoFlexFields with  fixed:A:CYS208
len(rotatables)= 1
returning res.torscount= 1
res.root= CA
ntors= 1
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= fixed_flex.pdbqt
res_total= 1
in writeResidue with  fixed:A:CYS208
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS208:N, <Atom instance> fixed:A:CYS208:CA)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS208:CA, <Atom instance> fixed:A:CYS208:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS208:CA, <Atom instance> fixed:A:CYS208:CB)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3


writing and calling wL with nA= SG - 3
wBF2: wrote  SG
!!!2:calling wL


in writeLevel with  SG  outatom_counter= 4
len( SG ).bonds= 1
skipping b= CB - SG
returning queue= []
newQ= []
 currently queue=
CA : CB : queue= []
wrote flex file fixed_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: fixed_flex.pdbqt
wrote rigid file: fixed_rigid.pdbqt
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> ligcovalent:A:CYS208 with 28 MolKit.molecule.Atom]
calling setAutoFlexFields with  ligcovalent:A:CYS208
in setAutoFlexFields with  ligcovalent:A:CYS208
len(rotatables)= 8
returning res.torscount= 7
res.root= CA
ntors= 7
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= ligcovalent_flex.pdbqt
res_total= 7
in writeResidue with  ligcovalent:A:CYS208
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS208:N, <Atom instance> ligcovalent:A:CYS208:CA)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS208:CA, <Atom instance> ligcovalent:A:CYS208:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS208:CA, <Atom instance> ligcovalent:A:CYS208:CB)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3
 currently queue= CB - SG ,
CA : CB : queue= [(<Atom instance> ligcovalent:A:CYS208:CB, <Atom instance> ligcovalent:A:CYS208:SG)]
 processing queue entry:  CB - SG
in wBF with fromAtom= CB + startAtom= SG startAtom.used= 0
wBF: wrote  SG
self.outatom_counter= 4
 currently queue= SG - CX ,
CB : SG : queue= [(<Atom instance> ligcovalent:A:CYS208:SG, <Atom instance> ligcovalent:A:CYS208:CX)]
 processing queue entry:  SG - CX
in wBF with fromAtom= SG + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 5
 currently queue= CX - CX ,
SG : CX : queue= [(<Atom instance> ligcovalent:A:CYS208:CX, <Atom instance> ligcovalent:A:CYS208:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 6
 currently queue= CX - CX , CX - CX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS208:CX, <Atom instance> ligcovalent:A:CYS208:CX), (<Atom instance> ligcovalent:A:CYS208:CX, <Atom instance> ligcovalent:A:CYS208:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 7


writing and calling wL with nA= CX - 7
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 8
len( CX ).bonds= 1
skipping b= CX - CX
returning queue= []
newQ= []
 currently queue=
CX : CX : queue= []
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 9


writing and calling wL with nA= OX - 9
wBF2: wrote  OX
!!!2:calling wL


in writeLevel with  OX  outatom_counter= 10
len( OX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []


writing and calling wL with nA= NX - 10
wBF2: wrote  NX
!!!2:calling wL


in writeLevel with  NX  outatom_counter= 11
len( NX ).bonds= 3
skipping b= NX - CX
processing b= NX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
processing b= CX - NX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 13
len( CX ).bonds= 2
skipping b= NX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 14
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 15
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 16
len( CX ).bonds= 3
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 17
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 18
len( CX ).bonds= 3
processing b= OX - CX  activeTors= 1
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
CX wL: queue= [(<Atom instance> ligcovalent:A:CYS208:CX, <Atom instance> ligcovalent:A:CYS208:OX)]
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 19
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 20
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS208:CX, <Atom instance> ligcovalent:A:CYS208:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS208:CX, <Atom instance> ligcovalent:A:CYS208:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS208:CX, <Atom instance> ligcovalent:A:CYS208:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS208:CX, <Atom instance> ligcovalent:A:CYS208:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS208:CX, <Atom instance> ligcovalent:A:CYS208:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS208:CX, <Atom instance> ligcovalent:A:CYS208:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS208:CX, <Atom instance> ligcovalent:A:CYS208:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS208:CX, <Atom instance> ligcovalent:A:CYS208:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS208:CX, <Atom instance> ligcovalent:A:CYS208:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS208:CX, <Atom instance> ligcovalent:A:CYS208:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS208:CX, <Atom instance> ligcovalent:A:CYS208:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS208:CX, <Atom instance> ligcovalent:A:CYS208:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 20
len( CX ).bonds= 3
skipping b= CX - CX
skipping b= CX - NX
skipping b= CX - CX
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS208:CX, <Atom instance> ligcovalent:A:CYS208:OX)]
newQ= [(<Atom instance> ligcovalent:A:CYS208:CX, <Atom instance> ligcovalent:A:CYS208:OX)]
@@@@len(newq)= 1
queue= [(<Atom instance> ligcovalent:A:CYS208:CX, <Atom instance> ligcovalent:A:CYS208:OX)]
 currently queue= CX - OX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS208:CX, <Atom instance> ligcovalent:A:CYS208:OX)]
 processing queue entry:  CX - OX
in wBF with fromAtom= CX + startAtom= OX startAtom.used= 0
wBF: wrote  OX
self.outatom_counter= 21


writing and calling wL with nA= CX - 21
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 22
len( CX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []
 currently queue=
CX : OX : queue= []
wrote flex file ligcovalent_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: ligcovalent_flex.pdbqt
wrote rigid file: ligcovalent_rigid.pdbqt
4---done
setting PYTHONHOME environment
setting PYTHONHOME environment
!unable to use ligand.TORSDOF! torsdof always set to ligand.ndihe= 7
5---done
 concat 10 log files... done.
Job finished, good luck!
rm: 无法删除'chimera.com': 没有那个文件或目录
rm: 无法删除'tmp.mol2': 没有那个文件或目录
Done
Processing residue A:CYS202
[start] output filename is: ligcovalent_single.pdb
CHAIN A
Writing output filename: ligcovalent_single.pdb
1---ligcovalent.pdb prepared...
1.5--done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= fixed  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  fixed
merged  0  nonpolar hydrogens
end of base class init
using std outputfilename  fixed.pdbqt
wrote  fixed  to  fixed.pdbqt
2---done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= ligcovalent  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  ligcovalent
merged  21  nonpolar hydrogens
end of base class init
using std outputfilename  ligcovalent.pdbqt
wrote  ligcovalent  to  ligcovalent.pdbqt
3---done
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> fixed:A:CYS202 with 6 MolKit.molecule.Atom]
calling setAutoFlexFields with  fixed:A:CYS202
in setAutoFlexFields with  fixed:A:CYS202
len(rotatables)= 1
returning res.torscount= 1
res.root= CA
ntors= 1
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= fixed_flex.pdbqt
res_total= 1
in writeResidue with  fixed:A:CYS202
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS202:N, <Atom instance> fixed:A:CYS202:CA)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS202:CA, <Atom instance> fixed:A:CYS202:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS202:CA, <Atom instance> fixed:A:CYS202:C)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3


writing and calling wL with nA= SG - 3
wBF2: wrote  SG
!!!2:calling wL


in writeLevel with  SG  outatom_counter= 4
len( SG ).bonds= 1
skipping b= CB - SG
returning queue= []
newQ= []
 currently queue=
CA : CB : queue= []
wrote flex file fixed_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: fixed_flex.pdbqt
wrote rigid file: fixed_rigid.pdbqt
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> ligcovalent:A:CYS202 with 28 MolKit.molecule.Atom]
calling setAutoFlexFields with  ligcovalent:A:CYS202
in setAutoFlexFields with  ligcovalent:A:CYS202
len(rotatables)= 8
returning res.torscount= 7
res.root= CA
ntors= 7
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= ligcovalent_flex.pdbqt
res_total= 7
in writeResidue with  ligcovalent:A:CYS202
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS202:CA, <Atom instance> ligcovalent:A:CYS202:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS202:CA, <Atom instance> ligcovalent:A:CYS202:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS202:N, <Atom instance> ligcovalent:A:CYS202:CA)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3
 currently queue= CB - SG ,
CA : CB : queue= [(<Atom instance> ligcovalent:A:CYS202:CB, <Atom instance> ligcovalent:A:CYS202:SG)]
 processing queue entry:  CB - SG
in wBF with fromAtom= CB + startAtom= SG startAtom.used= 0
wBF: wrote  SG
self.outatom_counter= 4
 currently queue= SG - CX ,
CB : SG : queue= [(<Atom instance> ligcovalent:A:CYS202:SG, <Atom instance> ligcovalent:A:CYS202:CX)]
 processing queue entry:  SG - CX
in wBF with fromAtom= SG + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 5
 currently queue= CX - CX ,
SG : CX : queue= [(<Atom instance> ligcovalent:A:CYS202:CX, <Atom instance> ligcovalent:A:CYS202:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 6
 currently queue= CX - CX , CX - CX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS202:CX, <Atom instance> ligcovalent:A:CYS202:CX), (<Atom instance> ligcovalent:A:CYS202:CX, <Atom instance> ligcovalent:A:CYS202:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 7


writing and calling wL with nA= NX - 7
wBF2: wrote  NX
!!!2:calling wL


in writeLevel with  NX  outatom_counter= 8
len( NX ).bonds= 3
processing b= CX - NX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
processing b= NX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= NX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 10
len( CX ).bonds= 3
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - NX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 12
len( CX ).bonds= 3
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 14
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 15
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= []
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 15
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 16
len( CX ).bonds= 3
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
processing b= OX - CX  activeTors= 1
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
CX wL: queue= [(<Atom instance> ligcovalent:A:CYS202:CX, <Atom instance> ligcovalent:A:CYS202:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 17
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS202:CX, <Atom instance> ligcovalent:A:CYS202:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS202:CX, <Atom instance> ligcovalent:A:CYS202:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS202:CX, <Atom instance> ligcovalent:A:CYS202:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS202:CX, <Atom instance> ligcovalent:A:CYS202:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS202:CX, <Atom instance> ligcovalent:A:CYS202:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS202:CX, <Atom instance> ligcovalent:A:CYS202:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 17
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS202:CX, <Atom instance> ligcovalent:A:CYS202:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS202:CX, <Atom instance> ligcovalent:A:CYS202:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 17
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= NX - CX
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS202:CX, <Atom instance> ligcovalent:A:CYS202:OX)]
newQ= [(<Atom instance> ligcovalent:A:CYS202:CX, <Atom instance> ligcovalent:A:CYS202:OX)]
@@@@len(newq)= 1
queue= [(<Atom instance> ligcovalent:A:CYS202:CX, <Atom instance> ligcovalent:A:CYS202:OX)]


writing and calling wL with nA= OX - 17
wBF2: wrote  OX
!!!2:calling wL


in writeLevel with  OX  outatom_counter= 18
len( OX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []
 currently queue= CX - OX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS202:CX, <Atom instance> ligcovalent:A:CYS202:OX)]
 processing queue entry:  CX - OX
in wBF with fromAtom= CX + startAtom= OX startAtom.used= 0
wBF: wrote  OX
self.outatom_counter= 19


writing and calling wL with nA= CX - 19
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 20
len( CX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []
 currently queue=
CX : OX : queue= []
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 21


writing and calling wL with nA= CX - 21
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 22
len( CX ).bonds= 1
skipping b= CX - CX
returning queue= []
newQ= []
 currently queue=
CX : CX : queue= []
wrote flex file ligcovalent_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: ligcovalent_flex.pdbqt
wrote rigid file: ligcovalent_rigid.pdbqt
4---done
setting PYTHONHOME environment
setting PYTHONHOME environment
!unable to use ligand.TORSDOF! torsdof always set to ligand.ndihe= 7
5---done
 concat 10 log files... done.
Job finished, good luck!
rm: 无法删除'chimera.com': 没有那个文件或目录
rm: 无法删除'tmp.mol2': 没有那个文件或目录
Done
Processing residue A:CYS255
[start] output filename is: ligcovalent_single.pdb
CHAIN A
Writing output filename: ligcovalent_single.pdb
1---ligcovalent.pdb prepared...
1.5--done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= fixed  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  fixed
merged  0  nonpolar hydrogens
end of base class init
using std outputfilename  fixed.pdbqt
wrote  fixed  to  fixed.pdbqt
2---done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= ligcovalent  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  ligcovalent
merged  21  nonpolar hydrogens
end of base class init
using std outputfilename  ligcovalent.pdbqt
wrote  ligcovalent  to  ligcovalent.pdbqt
3---done
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> fixed:A:CYS255 with 6 MolKit.molecule.Atom]
calling setAutoFlexFields with  fixed:A:CYS255
in setAutoFlexFields with  fixed:A:CYS255
len(rotatables)= 1
returning res.torscount= 1
res.root= CA
ntors= 1
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= fixed_flex.pdbqt
res_total= 1
in writeResidue with  fixed:A:CYS255
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS255:N, <Atom instance> fixed:A:CYS255:CA)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS255:CA, <Atom instance> fixed:A:CYS255:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS255:CA, <Atom instance> fixed:A:CYS255:C)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3


writing and calling wL with nA= SG - 3
wBF2: wrote  SG
!!!2:calling wL


in writeLevel with  SG  outatom_counter= 4
len( SG ).bonds= 1
skipping b= CB - SG
returning queue= []
newQ= []
 currently queue=
CA : CB : queue= []
wrote flex file fixed_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: fixed_flex.pdbqt
wrote rigid file: fixed_rigid.pdbqt
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> ligcovalent:A:CYS255 with 28 MolKit.molecule.Atom]
calling setAutoFlexFields with  ligcovalent:A:CYS255
in setAutoFlexFields with  ligcovalent:A:CYS255
len(rotatables)= 8
returning res.torscount= 7
res.root= CA
ntors= 7
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= ligcovalent_flex.pdbqt
res_total= 7
in writeResidue with  ligcovalent:A:CYS255
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS255:CA, <Atom instance> ligcovalent:A:CYS255:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS255:CA, <Atom instance> ligcovalent:A:CYS255:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS255:N, <Atom instance> ligcovalent:A:CYS255:CA)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3
 currently queue= CB - SG ,
CA : CB : queue= [(<Atom instance> ligcovalent:A:CYS255:CB, <Atom instance> ligcovalent:A:CYS255:SG)]
 processing queue entry:  CB - SG
in wBF with fromAtom= CB + startAtom= SG startAtom.used= 0
wBF: wrote  SG
self.outatom_counter= 4
 currently queue= SG - CX ,
CB : SG : queue= [(<Atom instance> ligcovalent:A:CYS255:SG, <Atom instance> ligcovalent:A:CYS255:CX)]
 processing queue entry:  SG - CX
in wBF with fromAtom= SG + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 5
 currently queue= CX - CX ,
SG : CX : queue= [(<Atom instance> ligcovalent:A:CYS255:CX, <Atom instance> ligcovalent:A:CYS255:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 6
 currently queue= CX - CX , CX - CX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS255:CX, <Atom instance> ligcovalent:A:CYS255:CX), (<Atom instance> ligcovalent:A:CYS255:CX, <Atom instance> ligcovalent:A:CYS255:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 7


writing and calling wL with nA= CX - 7
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 8
len( CX ).bonds= 1
skipping b= CX - CX
returning queue= []
newQ= []
 currently queue=
CX : CX : queue= []
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 9


writing and calling wL with nA= NX - 9
wBF2: wrote  NX
!!!2:calling wL


in writeLevel with  NX  outatom_counter= 10
len( NX ).bonds= 3
processing b= CX - NX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
processing b= NX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= NX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 12
len( CX ).bonds= 3
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - NX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 14
len( CX ).bonds= 3
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 16
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 17
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= []
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 17
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 18
len( CX ).bonds= 3
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
processing b= OX - CX  activeTors= 1
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
CX wL: queue= [(<Atom instance> ligcovalent:A:CYS255:CX, <Atom instance> ligcovalent:A:CYS255:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 19
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS255:CX, <Atom instance> ligcovalent:A:CYS255:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS255:CX, <Atom instance> ligcovalent:A:CYS255:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS255:CX, <Atom instance> ligcovalent:A:CYS255:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS255:CX, <Atom instance> ligcovalent:A:CYS255:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS255:CX, <Atom instance> ligcovalent:A:CYS255:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS255:CX, <Atom instance> ligcovalent:A:CYS255:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 19
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS255:CX, <Atom instance> ligcovalent:A:CYS255:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS255:CX, <Atom instance> ligcovalent:A:CYS255:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 19
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= NX - CX
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS255:CX, <Atom instance> ligcovalent:A:CYS255:OX)]
newQ= [(<Atom instance> ligcovalent:A:CYS255:CX, <Atom instance> ligcovalent:A:CYS255:OX)]
@@@@len(newq)= 1
queue= [(<Atom instance> ligcovalent:A:CYS255:CX, <Atom instance> ligcovalent:A:CYS255:OX)]


writing and calling wL with nA= OX - 19
wBF2: wrote  OX
!!!2:calling wL


in writeLevel with  OX  outatom_counter= 20
len( OX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []
 currently queue= CX - OX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS255:CX, <Atom instance> ligcovalent:A:CYS255:OX)]
 processing queue entry:  CX - OX
in wBF with fromAtom= CX + startAtom= OX startAtom.used= 0
wBF: wrote  OX
self.outatom_counter= 21


writing and calling wL with nA= CX - 21
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 22
len( CX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []
 currently queue=
CX : OX : queue= []
wrote flex file ligcovalent_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: ligcovalent_flex.pdbqt
wrote rigid file: ligcovalent_rigid.pdbqt
4---done
setting PYTHONHOME environment
setting PYTHONHOME environment
!unable to use ligand.TORSDOF! torsdof always set to ligand.ndihe= 7
5---done
 concat 10 log files... done.
Job finished, good luck!
rm: 无法删除'chimera.com': 没有那个文件或目录
rm: 无法删除'tmp.mol2': 没有那个文件或目录
Done
Processing residue A:CYS41
[start] output filename is: ligcovalent_single.pdb
CHAIN A
Writing output filename: ligcovalent_single.pdb
1---ligcovalent.pdb prepared...
1.5--done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= fixed  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  fixed
merged  0  nonpolar hydrogens
end of base class init
using std outputfilename  fixed.pdbqt
wrote  fixed  to  fixed.pdbqt
2---done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= ligcovalent  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  ligcovalent
merged  21  nonpolar hydrogens
end of base class init
using std outputfilename  ligcovalent.pdbqt
wrote  ligcovalent  to  ligcovalent.pdbqt
3---done
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> fixed:A:CYS41 with 6 MolKit.molecule.Atom]
calling setAutoFlexFields with  fixed:A:CYS41
in setAutoFlexFields with  fixed:A:CYS41
len(rotatables)= 1
returning res.torscount= 1
res.root= CA
ntors= 1
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= fixed_flex.pdbqt
res_total= 1
in writeResidue with  fixed:A:CYS41
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS41:CA, <Atom instance> fixed:A:CYS41:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS41:CA, <Atom instance> fixed:A:CYS41:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS41:N, <Atom instance> fixed:A:CYS41:CA)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3


writing and calling wL with nA= SG - 3
wBF2: wrote  SG
!!!2:calling wL


in writeLevel with  SG  outatom_counter= 4
len( SG ).bonds= 1
skipping b= CB - SG
returning queue= []
newQ= []
 currently queue=
CA : CB : queue= []
wrote flex file fixed_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: fixed_flex.pdbqt
wrote rigid file: fixed_rigid.pdbqt
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> ligcovalent:A:CYS41 with 28 MolKit.molecule.Atom]
calling setAutoFlexFields with  ligcovalent:A:CYS41
in setAutoFlexFields with  ligcovalent:A:CYS41
len(rotatables)= 8
returning res.torscount= 7
res.root= CA
ntors= 7
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= ligcovalent_flex.pdbqt
res_total= 7
in writeResidue with  ligcovalent:A:CYS41
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS41:N, <Atom instance> ligcovalent:A:CYS41:CA)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS41:CA, <Atom instance> ligcovalent:A:CYS41:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS41:CA, <Atom instance> ligcovalent:A:CYS41:CB)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3
 currently queue= CB - SG ,
CA : CB : queue= [(<Atom instance> ligcovalent:A:CYS41:CB, <Atom instance> ligcovalent:A:CYS41:SG)]
 processing queue entry:  CB - SG
in wBF with fromAtom= CB + startAtom= SG startAtom.used= 0
wBF: wrote  SG
self.outatom_counter= 4
 currently queue= SG - CX ,
CB : SG : queue= [(<Atom instance> ligcovalent:A:CYS41:SG, <Atom instance> ligcovalent:A:CYS41:CX)]
 processing queue entry:  SG - CX
in wBF with fromAtom= SG + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 5
 currently queue= CX - CX ,
SG : CX : queue= [(<Atom instance> ligcovalent:A:CYS41:CX, <Atom instance> ligcovalent:A:CYS41:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 6
 currently queue= CX - CX , CX - CX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS41:CX, <Atom instance> ligcovalent:A:CYS41:CX), (<Atom instance> ligcovalent:A:CYS41:CX, <Atom instance> ligcovalent:A:CYS41:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 7


writing and calling wL with nA= OX - 7
wBF2: wrote  OX
!!!2:calling wL


in writeLevel with  OX  outatom_counter= 8
len( OX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []


writing and calling wL with nA= NX - 8
wBF2: wrote  NX
!!!2:calling wL


in writeLevel with  NX  outatom_counter= 9
len( NX ).bonds= 3
skipping b= NX - CX
processing b= NX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
processing b= CX - NX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 11
len( CX ).bonds= 2
skipping b= NX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 12
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 13
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 14
len( CX ).bonds= 3
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 15
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 16
len( CX ).bonds= 3
processing b= OX - CX  activeTors= 1
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
CX wL: queue= [(<Atom instance> ligcovalent:A:CYS41:CX, <Atom instance> ligcovalent:A:CYS41:OX)]
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 17
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 18
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS41:CX, <Atom instance> ligcovalent:A:CYS41:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS41:CX, <Atom instance> ligcovalent:A:CYS41:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS41:CX, <Atom instance> ligcovalent:A:CYS41:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS41:CX, <Atom instance> ligcovalent:A:CYS41:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS41:CX, <Atom instance> ligcovalent:A:CYS41:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS41:CX, <Atom instance> ligcovalent:A:CYS41:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS41:CX, <Atom instance> ligcovalent:A:CYS41:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS41:CX, <Atom instance> ligcovalent:A:CYS41:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS41:CX, <Atom instance> ligcovalent:A:CYS41:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS41:CX, <Atom instance> ligcovalent:A:CYS41:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS41:CX, <Atom instance> ligcovalent:A:CYS41:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS41:CX, <Atom instance> ligcovalent:A:CYS41:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 18
len( CX ).bonds= 3
skipping b= CX - CX
skipping b= CX - NX
skipping b= CX - CX
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS41:CX, <Atom instance> ligcovalent:A:CYS41:OX)]
newQ= [(<Atom instance> ligcovalent:A:CYS41:CX, <Atom instance> ligcovalent:A:CYS41:OX)]
@@@@len(newq)= 1
queue= [(<Atom instance> ligcovalent:A:CYS41:CX, <Atom instance> ligcovalent:A:CYS41:OX)]
 currently queue= CX - OX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS41:CX, <Atom instance> ligcovalent:A:CYS41:OX)]
 processing queue entry:  CX - OX
in wBF with fromAtom= CX + startAtom= OX startAtom.used= 0
wBF: wrote  OX
self.outatom_counter= 19


writing and calling wL with nA= CX - 19
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 20
len( CX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []
 currently queue=
CX : OX : queue= []
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 21


writing and calling wL with nA= CX - 21
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 22
len( CX ).bonds= 1
skipping b= CX - CX
returning queue= []
newQ= []
 currently queue=
CX : CX : queue= []
wrote flex file ligcovalent_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: ligcovalent_flex.pdbqt
wrote rigid file: ligcovalent_rigid.pdbqt
4---done
setting PYTHONHOME environment
setting PYTHONHOME environment
!unable to use ligand.TORSDOF! torsdof always set to ligand.ndihe= 7
5---done
 concat 10 log files... done.
Job finished, good luck!
rm: 无法删除'chimera.com': 没有那个文件或目录
rm: 无法删除'tmp.mol2': 没有那个文件或目录
Done
Processing residue A:CYS78
[start] output filename is: ligcovalent_single.pdb
CHAIN A
Writing output filename: ligcovalent_single.pdb
1---ligcovalent.pdb prepared...
1.5--done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= fixed  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  fixed
merged  0  nonpolar hydrogens
end of base class init
using std outputfilename  fixed.pdbqt
wrote  fixed  to  fixed.pdbqt
2---done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= ligcovalent  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  ligcovalent
merged  21  nonpolar hydrogens
end of base class init
using std outputfilename  ligcovalent.pdbqt
wrote  ligcovalent  to  ligcovalent.pdbqt
3---done
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> fixed:A:CYS78 with 6 MolKit.molecule.Atom]
calling setAutoFlexFields with  fixed:A:CYS78
in setAutoFlexFields with  fixed:A:CYS78
len(rotatables)= 1
returning res.torscount= 1
res.root= CA
ntors= 1
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= fixed_flex.pdbqt
res_total= 1
in writeResidue with  fixed:A:CYS78
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS78:N, <Atom instance> fixed:A:CYS78:CA)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS78:CA, <Atom instance> fixed:A:CYS78:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS78:CA, <Atom instance> fixed:A:CYS78:CB)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3


writing and calling wL with nA= SG - 3
wBF2: wrote  SG
!!!2:calling wL


in writeLevel with  SG  outatom_counter= 4
len( SG ).bonds= 1
skipping b= CB - SG
returning queue= []
newQ= []
 currently queue=
CA : CB : queue= []
wrote flex file fixed_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: fixed_flex.pdbqt
wrote rigid file: fixed_rigid.pdbqt
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> ligcovalent:A:CYS78 with 28 MolKit.molecule.Atom]
calling setAutoFlexFields with  ligcovalent:A:CYS78
in setAutoFlexFields with  ligcovalent:A:CYS78
len(rotatables)= 8
returning res.torscount= 7
res.root= CA
ntors= 7
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= ligcovalent_flex.pdbqt
res_total= 7
in writeResidue with  ligcovalent:A:CYS78
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS78:N, <Atom instance> ligcovalent:A:CYS78:CA)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS78:CA, <Atom instance> ligcovalent:A:CYS78:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS78:CA, <Atom instance> ligcovalent:A:CYS78:C)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3
 currently queue= CB - SG ,
CA : CB : queue= [(<Atom instance> ligcovalent:A:CYS78:CB, <Atom instance> ligcovalent:A:CYS78:SG)]
 processing queue entry:  CB - SG
in wBF with fromAtom= CB + startAtom= SG startAtom.used= 0
wBF: wrote  SG
self.outatom_counter= 4
 currently queue= SG - CX ,
CB : SG : queue= [(<Atom instance> ligcovalent:A:CYS78:SG, <Atom instance> ligcovalent:A:CYS78:CX)]
 processing queue entry:  SG - CX
in wBF with fromAtom= SG + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 5
 currently queue= CX - CX ,
SG : CX : queue= [(<Atom instance> ligcovalent:A:CYS78:CX, <Atom instance> ligcovalent:A:CYS78:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 6
 currently queue= CX - CX , CX - CX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS78:CX, <Atom instance> ligcovalent:A:CYS78:CX), (<Atom instance> ligcovalent:A:CYS78:CX, <Atom instance> ligcovalent:A:CYS78:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 7


writing and calling wL with nA= NX - 7
wBF2: wrote  NX
!!!2:calling wL


in writeLevel with  NX  outatom_counter= 8
len( NX ).bonds= 3
processing b= CX - NX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
processing b= NX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= NX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 10
len( CX ).bonds= 3
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - NX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 12
len( CX ).bonds= 3
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 14
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 15
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= []
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 15
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 16
len( CX ).bonds= 3
processing b= OX - CX  activeTors= 1
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
CX wL: queue= [(<Atom instance> ligcovalent:A:CYS78:CX, <Atom instance> ligcovalent:A:CYS78:OX)]
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 17
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS78:CX, <Atom instance> ligcovalent:A:CYS78:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS78:CX, <Atom instance> ligcovalent:A:CYS78:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS78:CX, <Atom instance> ligcovalent:A:CYS78:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS78:CX, <Atom instance> ligcovalent:A:CYS78:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS78:CX, <Atom instance> ligcovalent:A:CYS78:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS78:CX, <Atom instance> ligcovalent:A:CYS78:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 17
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS78:CX, <Atom instance> ligcovalent:A:CYS78:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS78:CX, <Atom instance> ligcovalent:A:CYS78:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 17
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= NX - CX
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS78:CX, <Atom instance> ligcovalent:A:CYS78:OX)]
newQ= [(<Atom instance> ligcovalent:A:CYS78:CX, <Atom instance> ligcovalent:A:CYS78:OX)]
@@@@len(newq)= 1
queue= [(<Atom instance> ligcovalent:A:CYS78:CX, <Atom instance> ligcovalent:A:CYS78:OX)]


writing and calling wL with nA= OX - 17
wBF2: wrote  OX
!!!2:calling wL


in writeLevel with  OX  outatom_counter= 18
len( OX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []
 currently queue= CX - OX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS78:CX, <Atom instance> ligcovalent:A:CYS78:OX)]
 processing queue entry:  CX - OX
in wBF with fromAtom= CX + startAtom= OX startAtom.used= 0
wBF: wrote  OX
self.outatom_counter= 19


writing and calling wL with nA= CX - 19
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 20
len( CX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []
 currently queue=
CX : OX : queue= []
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 21


writing and calling wL with nA= CX - 21
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 22
len( CX ).bonds= 1
skipping b= CX - CX
returning queue= []
newQ= []
 currently queue=
CX : CX : queue= []
wrote flex file ligcovalent_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: ligcovalent_flex.pdbqt
wrote rigid file: ligcovalent_rigid.pdbqt
4---done
setting PYTHONHOME environment
setting PYTHONHOME environment
!unable to use ligand.TORSDOF! torsdof always set to ligand.ndihe= 7
5---done
 concat 10 log files... done.
Job finished, good luck!
rm: 无法删除'chimera.com': 没有那个文件或目录
rm: 无法删除'tmp.mol2': 没有那个文件或目录
Done
Processing residue A:CYS223
[start] output filename is: ligcovalent_single.pdb
CHAIN A
Writing output filename: ligcovalent_single.pdb
1---ligcovalent.pdb prepared...
1.5--done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= fixed  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  fixed
merged  0  nonpolar hydrogens
end of base class init
using std outputfilename  fixed.pdbqt
wrote  fixed  to  fixed.pdbqt
2---done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= ligcovalent  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  ligcovalent
merged  21  nonpolar hydrogens
end of base class init
using std outputfilename  ligcovalent.pdbqt
wrote  ligcovalent  to  ligcovalent.pdbqt
3---done
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> fixed:A:CYS223 with 6 MolKit.molecule.Atom]
calling setAutoFlexFields with  fixed:A:CYS223
in setAutoFlexFields with  fixed:A:CYS223
len(rotatables)= 1
returning res.torscount= 1
res.root= CA
ntors= 1
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= fixed_flex.pdbqt
res_total= 1
in writeResidue with  fixed:A:CYS223
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS223:CA, <Atom instance> fixed:A:CYS223:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS223:CA, <Atom instance> fixed:A:CYS223:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS223:N, <Atom instance> fixed:A:CYS223:CA)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3


writing and calling wL with nA= SG - 3
wBF2: wrote  SG
!!!2:calling wL


in writeLevel with  SG  outatom_counter= 4
len( SG ).bonds= 1
skipping b= CB - SG
returning queue= []
newQ= []
 currently queue=
CA : CB : queue= []
wrote flex file fixed_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: fixed_flex.pdbqt
wrote rigid file: fixed_rigid.pdbqt
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> ligcovalent:A:CYS223 with 28 MolKit.molecule.Atom]
calling setAutoFlexFields with  ligcovalent:A:CYS223
in setAutoFlexFields with  ligcovalent:A:CYS223
len(rotatables)= 8
returning res.torscount= 7
res.root= CA
ntors= 7
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= ligcovalent_flex.pdbqt
res_total= 7
in writeResidue with  ligcovalent:A:CYS223
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS223:CA, <Atom instance> ligcovalent:A:CYS223:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS223:CA, <Atom instance> ligcovalent:A:CYS223:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS223:N, <Atom instance> ligcovalent:A:CYS223:CA)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3
 currently queue= CB - SG ,
CA : CB : queue= [(<Atom instance> ligcovalent:A:CYS223:CB, <Atom instance> ligcovalent:A:CYS223:SG)]
 processing queue entry:  CB - SG
in wBF with fromAtom= CB + startAtom= SG startAtom.used= 0
wBF: wrote  SG
self.outatom_counter= 4
 currently queue= SG - CX ,
CB : SG : queue= [(<Atom instance> ligcovalent:A:CYS223:SG, <Atom instance> ligcovalent:A:CYS223:CX)]
 processing queue entry:  SG - CX
in wBF with fromAtom= SG + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 5
 currently queue= CX - CX ,
SG : CX : queue= [(<Atom instance> ligcovalent:A:CYS223:CX, <Atom instance> ligcovalent:A:CYS223:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 6
 currently queue= CX - CX , CX - CX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS223:CX, <Atom instance> ligcovalent:A:CYS223:CX), (<Atom instance> ligcovalent:A:CYS223:CX, <Atom instance> ligcovalent:A:CYS223:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 7


writing and calling wL with nA= CX - 7
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 8
len( CX ).bonds= 1
skipping b= CX - CX
returning queue= []
newQ= []
 currently queue=
CX : CX : queue= []
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 9


writing and calling wL with nA= NX - 9
wBF2: wrote  NX
!!!2:calling wL


in writeLevel with  NX  outatom_counter= 10
len( NX ).bonds= 3
processing b= NX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= NX - CX
processing b= CX - NX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 12
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= NX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 13
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 14
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 15
len( CX ).bonds= 3
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 16
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 17
len( CX ).bonds= 3
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
processing b= OX - CX  activeTors= 1
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
CX wL: queue= [(<Atom instance> ligcovalent:A:CYS223:CX, <Atom instance> ligcovalent:A:CYS223:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 18
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 19
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS223:CX, <Atom instance> ligcovalent:A:CYS223:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS223:CX, <Atom instance> ligcovalent:A:CYS223:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS223:CX, <Atom instance> ligcovalent:A:CYS223:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS223:CX, <Atom instance> ligcovalent:A:CYS223:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS223:CX, <Atom instance> ligcovalent:A:CYS223:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS223:CX, <Atom instance> ligcovalent:A:CYS223:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS223:CX, <Atom instance> ligcovalent:A:CYS223:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS223:CX, <Atom instance> ligcovalent:A:CYS223:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS223:CX, <Atom instance> ligcovalent:A:CYS223:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS223:CX, <Atom instance> ligcovalent:A:CYS223:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS223:CX, <Atom instance> ligcovalent:A:CYS223:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS223:CX, <Atom instance> ligcovalent:A:CYS223:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 19
len( CX ).bonds= 3
skipping b= CX - CX
skipping b= CX - NX
skipping b= CX - CX
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS223:CX, <Atom instance> ligcovalent:A:CYS223:OX)]
newQ= [(<Atom instance> ligcovalent:A:CYS223:CX, <Atom instance> ligcovalent:A:CYS223:OX)]
@@@@len(newq)= 1
queue= [(<Atom instance> ligcovalent:A:CYS223:CX, <Atom instance> ligcovalent:A:CYS223:OX)]


writing and calling wL with nA= OX - 19
wBF2: wrote  OX
!!!2:calling wL


in writeLevel with  OX  outatom_counter= 20
len( OX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []
 currently queue= CX - OX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS223:CX, <Atom instance> ligcovalent:A:CYS223:OX)]
 processing queue entry:  CX - OX
in wBF with fromAtom= CX + startAtom= OX startAtom.used= 0
wBF: wrote  OX
self.outatom_counter= 21


writing and calling wL with nA= CX - 21
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 22
len( CX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []
 currently queue=
CX : OX : queue= []
wrote flex file ligcovalent_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: ligcovalent_flex.pdbqt
wrote rigid file: ligcovalent_rigid.pdbqt
4---done
setting PYTHONHOME environment
setting PYTHONHOME environment
!unable to use ligand.TORSDOF! torsdof always set to ligand.ndihe= 7
5---done
 concat 10 log files... done.
Job finished, good luck!
rm: 无法删除'chimera.com': 没有那个文件或目录
rm: 无法删除'tmp.mol2': 没有那个文件或目录
Done
Processing residue A:CYS178
[start] output filename is: ligcovalent_single.pdb
CHAIN A
Writing output filename: ligcovalent_single.pdb
1---ligcovalent.pdb prepared...
1.5--done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= fixed  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  fixed
merged  0  nonpolar hydrogens
end of base class init
using std outputfilename  fixed.pdbqt
wrote  fixed  to  fixed.pdbqt
2---done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= ligcovalent  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  ligcovalent
merged  21  nonpolar hydrogens
end of base class init
using std outputfilename  ligcovalent.pdbqt
wrote  ligcovalent  to  ligcovalent.pdbqt
3---done
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> fixed:A:CYS178 with 6 MolKit.molecule.Atom]
calling setAutoFlexFields with  fixed:A:CYS178
in setAutoFlexFields with  fixed:A:CYS178
len(rotatables)= 1
returning res.torscount= 1
res.root= CA
ntors= 1
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= fixed_flex.pdbqt
res_total= 1
in writeResidue with  fixed:A:CYS178
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS178:N, <Atom instance> fixed:A:CYS178:CA)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS178:CA, <Atom instance> fixed:A:CYS178:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS178:CA, <Atom instance> fixed:A:CYS178:C)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3


writing and calling wL with nA= SG - 3
wBF2: wrote  SG
!!!2:calling wL


in writeLevel with  SG  outatom_counter= 4
len( SG ).bonds= 1
skipping b= CB - SG
returning queue= []
newQ= []
 currently queue=
CA : CB : queue= []
wrote flex file fixed_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: fixed_flex.pdbqt
wrote rigid file: fixed_rigid.pdbqt
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> ligcovalent:A:CYS178 with 28 MolKit.molecule.Atom]
calling setAutoFlexFields with  ligcovalent:A:CYS178
in setAutoFlexFields with  ligcovalent:A:CYS178
len(rotatables)= 8
returning res.torscount= 7
res.root= CA
ntors= 7
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= ligcovalent_flex.pdbqt
res_total= 7
in writeResidue with  ligcovalent:A:CYS178
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS178:N, <Atom instance> ligcovalent:A:CYS178:CA)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS178:CA, <Atom instance> ligcovalent:A:CYS178:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS178:CA, <Atom instance> ligcovalent:A:CYS178:CB)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3
 currently queue= CB - SG ,
CA : CB : queue= [(<Atom instance> ligcovalent:A:CYS178:CB, <Atom instance> ligcovalent:A:CYS178:SG)]
 processing queue entry:  CB - SG
in wBF with fromAtom= CB + startAtom= SG startAtom.used= 0
wBF: wrote  SG
self.outatom_counter= 4
 currently queue= SG - CX ,
CB : SG : queue= [(<Atom instance> ligcovalent:A:CYS178:SG, <Atom instance> ligcovalent:A:CYS178:CX)]
 processing queue entry:  SG - CX
in wBF with fromAtom= SG + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 5
 currently queue= CX - CX ,
SG : CX : queue= [(<Atom instance> ligcovalent:A:CYS178:CX, <Atom instance> ligcovalent:A:CYS178:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 6
 currently queue= CX - CX , CX - CX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS178:CX, <Atom instance> ligcovalent:A:CYS178:CX), (<Atom instance> ligcovalent:A:CYS178:CX, <Atom instance> ligcovalent:A:CYS178:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 7


writing and calling wL with nA= CX - 7
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 8
len( CX ).bonds= 1
skipping b= CX - CX
returning queue= []
newQ= []
 currently queue=
CX : CX : queue= []
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 9


writing and calling wL with nA= OX - 9
wBF2: wrote  OX
!!!2:calling wL


in writeLevel with  OX  outatom_counter= 10
len( OX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []


writing and calling wL with nA= NX - 10
wBF2: wrote  NX
!!!2:calling wL


in writeLevel with  NX  outatom_counter= 11
len( NX ).bonds= 3
processing b= NX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= NX - CX
processing b= CX - NX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 13
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= NX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 14
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 15
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 16
len( CX ).bonds= 3
skipping b= CX - CX
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 17
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 18
len( CX ).bonds= 3
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
processing b= OX - CX  activeTors= 1
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
CX wL: queue= [(<Atom instance> ligcovalent:A:CYS178:CX, <Atom instance> ligcovalent:A:CYS178:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 19
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 20
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS178:CX, <Atom instance> ligcovalent:A:CYS178:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS178:CX, <Atom instance> ligcovalent:A:CYS178:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS178:CX, <Atom instance> ligcovalent:A:CYS178:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS178:CX, <Atom instance> ligcovalent:A:CYS178:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS178:CX, <Atom instance> ligcovalent:A:CYS178:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS178:CX, <Atom instance> ligcovalent:A:CYS178:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS178:CX, <Atom instance> ligcovalent:A:CYS178:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS178:CX, <Atom instance> ligcovalent:A:CYS178:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS178:CX, <Atom instance> ligcovalent:A:CYS178:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS178:CX, <Atom instance> ligcovalent:A:CYS178:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS178:CX, <Atom instance> ligcovalent:A:CYS178:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS178:CX, <Atom instance> ligcovalent:A:CYS178:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 20
len( CX ).bonds= 3
skipping b= CX - NX
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS178:CX, <Atom instance> ligcovalent:A:CYS178:OX)]
newQ= [(<Atom instance> ligcovalent:A:CYS178:CX, <Atom instance> ligcovalent:A:CYS178:OX)]
@@@@len(newq)= 1
queue= [(<Atom instance> ligcovalent:A:CYS178:CX, <Atom instance> ligcovalent:A:CYS178:OX)]
 currently queue= CX - OX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS178:CX, <Atom instance> ligcovalent:A:CYS178:OX)]
 processing queue entry:  CX - OX
in wBF with fromAtom= CX + startAtom= OX startAtom.used= 0
wBF: wrote  OX
self.outatom_counter= 21


writing and calling wL with nA= CX - 21
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 22
len( CX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []
 currently queue=
CX : OX : queue= []
wrote flex file ligcovalent_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: ligcovalent_flex.pdbqt
wrote rigid file: ligcovalent_rigid.pdbqt
4---done
setting PYTHONHOME environment
setting PYTHONHOME environment
!unable to use ligand.TORSDOF! torsdof always set to ligand.ndihe= 7
5---done
 concat 10 log files... done.
Job finished, good luck!
rm: 无法删除'chimera.com': 没有那个文件或目录
rm: 无法删除'tmp.mol2': 没有那个文件或目录
Done
Processing residue A:CYS24
[start] output filename is: ligcovalent_single.pdb
CHAIN A
Writing output filename: ligcovalent_single.pdb
1---ligcovalent.pdb prepared...
1.5--done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= fixed  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  fixed
merged  0  nonpolar hydrogens
end of base class init
using std outputfilename  fixed.pdbqt
wrote  fixed  to  fixed.pdbqt
2---done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= ligcovalent  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  ligcovalent
merged  21  nonpolar hydrogens
end of base class init
using std outputfilename  ligcovalent.pdbqt
wrote  ligcovalent  to  ligcovalent.pdbqt
3---done
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> fixed:A:CYS24 with 6 MolKit.molecule.Atom]
calling setAutoFlexFields with  fixed:A:CYS24
in setAutoFlexFields with  fixed:A:CYS24
len(rotatables)= 1
returning res.torscount= 1
res.root= CA
ntors= 1
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= fixed_flex.pdbqt
res_total= 1
in writeResidue with  fixed:A:CYS24
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS24:CA, <Atom instance> fixed:A:CYS24:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS24:CA, <Atom instance> fixed:A:CYS24:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS24:N, <Atom instance> fixed:A:CYS24:CA)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3


writing and calling wL with nA= SG - 3
wBF2: wrote  SG
!!!2:calling wL


in writeLevel with  SG  outatom_counter= 4
len( SG ).bonds= 1
skipping b= CB - SG
returning queue= []
newQ= []
 currently queue=
CA : CB : queue= []
wrote flex file fixed_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: fixed_flex.pdbqt
wrote rigid file: fixed_rigid.pdbqt
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> ligcovalent:A:CYS24 with 28 MolKit.molecule.Atom]
calling setAutoFlexFields with  ligcovalent:A:CYS24
in setAutoFlexFields with  ligcovalent:A:CYS24
len(rotatables)= 8
returning res.torscount= 7
res.root= CA
ntors= 7
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= ligcovalent_flex.pdbqt
res_total= 7
in writeResidue with  ligcovalent:A:CYS24
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS24:CA, <Atom instance> ligcovalent:A:CYS24:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS24:CA, <Atom instance> ligcovalent:A:CYS24:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS24:N, <Atom instance> ligcovalent:A:CYS24:CA)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3
 currently queue= CB - SG ,
CA : CB : queue= [(<Atom instance> ligcovalent:A:CYS24:CB, <Atom instance> ligcovalent:A:CYS24:SG)]
 processing queue entry:  CB - SG
in wBF with fromAtom= CB + startAtom= SG startAtom.used= 0
wBF: wrote  SG
self.outatom_counter= 4
 currently queue= SG - CX ,
CB : SG : queue= [(<Atom instance> ligcovalent:A:CYS24:SG, <Atom instance> ligcovalent:A:CYS24:CX)]
 processing queue entry:  SG - CX
in wBF with fromAtom= SG + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 5
 currently queue= CX - CX ,
SG : CX : queue= [(<Atom instance> ligcovalent:A:CYS24:CX, <Atom instance> ligcovalent:A:CYS24:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 6
 currently queue= CX - CX , CX - CX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS24:CX, <Atom instance> ligcovalent:A:CYS24:CX), (<Atom instance> ligcovalent:A:CYS24:CX, <Atom instance> ligcovalent:A:CYS24:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 7


writing and calling wL with nA= NX - 7
wBF2: wrote  NX
!!!2:calling wL


in writeLevel with  NX  outatom_counter= 8
len( NX ).bonds= 3
processing b= NX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= NX - CX
processing b= CX - NX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 10
len( CX ).bonds= 2
skipping b= NX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 11
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 12
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 13
len( CX ).bonds= 3
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 14
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 15
len( CX ).bonds= 3
processing b= OX - CX  activeTors= 1
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
CX wL: queue= [(<Atom instance> ligcovalent:A:CYS24:CX, <Atom instance> ligcovalent:A:CYS24:OX)]
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 16
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 17
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS24:CX, <Atom instance> ligcovalent:A:CYS24:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS24:CX, <Atom instance> ligcovalent:A:CYS24:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS24:CX, <Atom instance> ligcovalent:A:CYS24:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS24:CX, <Atom instance> ligcovalent:A:CYS24:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS24:CX, <Atom instance> ligcovalent:A:CYS24:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS24:CX, <Atom instance> ligcovalent:A:CYS24:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS24:CX, <Atom instance> ligcovalent:A:CYS24:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS24:CX, <Atom instance> ligcovalent:A:CYS24:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS24:CX, <Atom instance> ligcovalent:A:CYS24:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS24:CX, <Atom instance> ligcovalent:A:CYS24:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS24:CX, <Atom instance> ligcovalent:A:CYS24:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS24:CX, <Atom instance> ligcovalent:A:CYS24:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 17
len( CX ).bonds= 3
skipping b= CX - CX
skipping b= CX - CX
skipping b= CX - NX
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS24:CX, <Atom instance> ligcovalent:A:CYS24:OX)]
newQ= [(<Atom instance> ligcovalent:A:CYS24:CX, <Atom instance> ligcovalent:A:CYS24:OX)]
@@@@len(newq)= 1
queue= [(<Atom instance> ligcovalent:A:CYS24:CX, <Atom instance> ligcovalent:A:CYS24:OX)]


writing and calling wL with nA= OX - 17
wBF2: wrote  OX
!!!2:calling wL


in writeLevel with  OX  outatom_counter= 18
len( OX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []
 currently queue= CX - OX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS24:CX, <Atom instance> ligcovalent:A:CYS24:OX)]
 processing queue entry:  CX - OX
in wBF with fromAtom= CX + startAtom= OX startAtom.used= 0
wBF: wrote  OX
self.outatom_counter= 19


writing and calling wL with nA= CX - 19
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 20
len( CX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []
 currently queue=
CX : OX : queue= []
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 21


writing and calling wL with nA= CX - 21
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 22
len( CX ).bonds= 1
skipping b= CX - CX
returning queue= []
newQ= []
 currently queue=
CX : CX : queue= []
wrote flex file ligcovalent_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: ligcovalent_flex.pdbqt
wrote rigid file: ligcovalent_rigid.pdbqt
4---done
setting PYTHONHOME environment
setting PYTHONHOME environment
!unable to use ligand.TORSDOF! torsdof always set to ligand.ndihe= 7
5---done
 concat 10 log files... done.
Job finished, good luck!
rm: 无法删除'chimera.com': 没有那个文件或目录
rm: 无法删除'tmp.mol2': 没有那个文件或目录
Done
Processing residue A:CYS59
[start] output filename is: ligcovalent_single.pdb
CHAIN A
Writing output filename: ligcovalent_single.pdb
1---ligcovalent.pdb prepared...
1.5--done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= fixed  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  fixed
merged  0  nonpolar hydrogens
end of base class init
using std outputfilename  fixed.pdbqt
wrote  fixed  to  fixed.pdbqt
2---done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= ligcovalent  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  ligcovalent
merged  21  nonpolar hydrogens
end of base class init
using std outputfilename  ligcovalent.pdbqt
wrote  ligcovalent  to  ligcovalent.pdbqt
3---done
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> fixed:A:CYS59 with 6 MolKit.molecule.Atom]
calling setAutoFlexFields with  fixed:A:CYS59
in setAutoFlexFields with  fixed:A:CYS59
len(rotatables)= 1
returning res.torscount= 1
res.root= CA
ntors= 1
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= fixed_flex.pdbqt
res_total= 1
in writeResidue with  fixed:A:CYS59
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS59:CA, <Atom instance> fixed:A:CYS59:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS59:CA, <Atom instance> fixed:A:CYS59:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS59:N, <Atom instance> fixed:A:CYS59:CA)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3


writing and calling wL with nA= SG - 3
wBF2: wrote  SG
!!!2:calling wL


in writeLevel with  SG  outatom_counter= 4
len( SG ).bonds= 1
skipping b= CB - SG
returning queue= []
newQ= []
 currently queue=
CA : CB : queue= []
wrote flex file fixed_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: fixed_flex.pdbqt
wrote rigid file: fixed_rigid.pdbqt
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> ligcovalent:A:CYS59 with 28 MolKit.molecule.Atom]
calling setAutoFlexFields with  ligcovalent:A:CYS59
in setAutoFlexFields with  ligcovalent:A:CYS59
len(rotatables)= 8
returning res.torscount= 7
res.root= CA
ntors= 7
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= ligcovalent_flex.pdbqt
res_total= 7
in writeResidue with  ligcovalent:A:CYS59
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS59:CA, <Atom instance> ligcovalent:A:CYS59:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS59:CA, <Atom instance> ligcovalent:A:CYS59:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS59:N, <Atom instance> ligcovalent:A:CYS59:CA)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3
 currently queue= CB - SG ,
CA : CB : queue= [(<Atom instance> ligcovalent:A:CYS59:CB, <Atom instance> ligcovalent:A:CYS59:SG)]
 processing queue entry:  CB - SG
in wBF with fromAtom= CB + startAtom= SG startAtom.used= 0
wBF: wrote  SG
self.outatom_counter= 4
 currently queue= SG - CX ,
CB : SG : queue= [(<Atom instance> ligcovalent:A:CYS59:SG, <Atom instance> ligcovalent:A:CYS59:CX)]
 processing queue entry:  SG - CX
in wBF with fromAtom= SG + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 5
 currently queue= CX - CX ,
SG : CX : queue= [(<Atom instance> ligcovalent:A:CYS59:CX, <Atom instance> ligcovalent:A:CYS59:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 6
 currently queue= CX - CX , CX - CX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS59:CX, <Atom instance> ligcovalent:A:CYS59:CX), (<Atom instance> ligcovalent:A:CYS59:CX, <Atom instance> ligcovalent:A:CYS59:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 7


writing and calling wL with nA= NX - 7
wBF2: wrote  NX
!!!2:calling wL


in writeLevel with  NX  outatom_counter= 8
len( NX ).bonds= 3
processing b= CX - NX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
processing b= NX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= NX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 10
len( CX ).bonds= 3
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - NX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 12
len( CX ).bonds= 3
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 14
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 15
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= []
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 15
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 16
len( CX ).bonds= 3
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
processing b= OX - CX  activeTors= 1
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
CX wL: queue= [(<Atom instance> ligcovalent:A:CYS59:CX, <Atom instance> ligcovalent:A:CYS59:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 17
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS59:CX, <Atom instance> ligcovalent:A:CYS59:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS59:CX, <Atom instance> ligcovalent:A:CYS59:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS59:CX, <Atom instance> ligcovalent:A:CYS59:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS59:CX, <Atom instance> ligcovalent:A:CYS59:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS59:CX, <Atom instance> ligcovalent:A:CYS59:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS59:CX, <Atom instance> ligcovalent:A:CYS59:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 17
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS59:CX, <Atom instance> ligcovalent:A:CYS59:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS59:CX, <Atom instance> ligcovalent:A:CYS59:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 17
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= NX - CX
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS59:CX, <Atom instance> ligcovalent:A:CYS59:OX)]
newQ= [(<Atom instance> ligcovalent:A:CYS59:CX, <Atom instance> ligcovalent:A:CYS59:OX)]
@@@@len(newq)= 1
queue= [(<Atom instance> ligcovalent:A:CYS59:CX, <Atom instance> ligcovalent:A:CYS59:OX)]


writing and calling wL with nA= OX - 17
wBF2: wrote  OX
!!!2:calling wL


in writeLevel with  OX  outatom_counter= 18
len( OX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []
 currently queue= CX - OX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS59:CX, <Atom instance> ligcovalent:A:CYS59:OX)]
 processing queue entry:  CX - OX
in wBF with fromAtom= CX + startAtom= OX startAtom.used= 0
wBF: wrote  OX
self.outatom_counter= 19


writing and calling wL with nA= CX - 19
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 20
len( CX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []
 currently queue=
CX : OX : queue= []
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 21


writing and calling wL with nA= CX - 21
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 22
len( CX ).bonds= 1
skipping b= CX - CX
returning queue= []
newQ= []
 currently queue=
CX : CX : queue= []
wrote flex file ligcovalent_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: ligcovalent_flex.pdbqt
wrote rigid file: ligcovalent_rigid.pdbqt
4---done
setting PYTHONHOME environment
setting PYTHONHOME environment
!unable to use ligand.TORSDOF! torsdof always set to ligand.ndihe= 7
5---done
 concat 10 log files... done.
Job finished, good luck!
rm: 无法删除'chimera.com': 没有那个文件或目录
rm: 无法删除'tmp.mol2': 没有那个文件或目录
Done
Processing residue A:CYS191
[start] output filename is: ligcovalent_single.pdb
CHAIN A
Writing output filename: ligcovalent_single.pdb
1---ligcovalent.pdb prepared...
1.5--done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= fixed  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  fixed
merged  0  nonpolar hydrogens
end of base class init
using std outputfilename  fixed.pdbqt
wrote  fixed  to  fixed.pdbqt
2---done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= ligcovalent  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  ligcovalent
merged  21  nonpolar hydrogens
end of base class init
using std outputfilename  ligcovalent.pdbqt
wrote  ligcovalent  to  ligcovalent.pdbqt
3---done
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> fixed:A:CYS191 with 6 MolKit.molecule.Atom]
calling setAutoFlexFields with  fixed:A:CYS191
in setAutoFlexFields with  fixed:A:CYS191
len(rotatables)= 1
returning res.torscount= 1
res.root= CA
ntors= 1
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= fixed_flex.pdbqt
res_total= 1
in writeResidue with  fixed:A:CYS191
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS191:CA, <Atom instance> fixed:A:CYS191:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS191:CA, <Atom instance> fixed:A:CYS191:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS191:N, <Atom instance> fixed:A:CYS191:CA)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3


writing and calling wL with nA= SG - 3
wBF2: wrote  SG
!!!2:calling wL


in writeLevel with  SG  outatom_counter= 4
len( SG ).bonds= 1
skipping b= CB - SG
returning queue= []
newQ= []
 currently queue=
CA : CB : queue= []
wrote flex file fixed_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: fixed_flex.pdbqt
wrote rigid file: fixed_rigid.pdbqt
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> ligcovalent:A:CYS191 with 28 MolKit.molecule.Atom]
calling setAutoFlexFields with  ligcovalent:A:CYS191
in setAutoFlexFields with  ligcovalent:A:CYS191
len(rotatables)= 8
returning res.torscount= 7
res.root= CA
ntors= 7
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= ligcovalent_flex.pdbqt
res_total= 7
in writeResidue with  ligcovalent:A:CYS191
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS191:N, <Atom instance> ligcovalent:A:CYS191:CA)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS191:CA, <Atom instance> ligcovalent:A:CYS191:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS191:CA, <Atom instance> ligcovalent:A:CYS191:C)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3
 currently queue= CB - SG ,
CA : CB : queue= [(<Atom instance> ligcovalent:A:CYS191:CB, <Atom instance> ligcovalent:A:CYS191:SG)]
 processing queue entry:  CB - SG
in wBF with fromAtom= CB + startAtom= SG startAtom.used= 0
wBF: wrote  SG
self.outatom_counter= 4
 currently queue= SG - CX ,
CB : SG : queue= [(<Atom instance> ligcovalent:A:CYS191:SG, <Atom instance> ligcovalent:A:CYS191:CX)]
 processing queue entry:  SG - CX
in wBF with fromAtom= SG + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 5
 currently queue= CX - CX ,
SG : CX : queue= [(<Atom instance> ligcovalent:A:CYS191:CX, <Atom instance> ligcovalent:A:CYS191:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 6
 currently queue= CX - CX , CX - CX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS191:CX, <Atom instance> ligcovalent:A:CYS191:CX), (<Atom instance> ligcovalent:A:CYS191:CX, <Atom instance> ligcovalent:A:CYS191:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 7


writing and calling wL with nA= OX - 7
wBF2: wrote  OX
!!!2:calling wL


in writeLevel with  OX  outatom_counter= 8
len( OX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []


writing and calling wL with nA= NX - 8
wBF2: wrote  NX
!!!2:calling wL


in writeLevel with  NX  outatom_counter= 9
len( NX ).bonds= 3
processing b= CX - NX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= NX - CX
processing b= NX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 11
len( CX ).bonds= 3
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - NX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 13
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 14
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 15
len( CX ).bonds= 3
processing b= OX - CX  activeTors= 1
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
CX wL: queue= [(<Atom instance> ligcovalent:A:CYS191:CX, <Atom instance> ligcovalent:A:CYS191:OX)]
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 16
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS191:CX, <Atom instance> ligcovalent:A:CYS191:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS191:CX, <Atom instance> ligcovalent:A:CYS191:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS191:CX, <Atom instance> ligcovalent:A:CYS191:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS191:CX, <Atom instance> ligcovalent:A:CYS191:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS191:CX, <Atom instance> ligcovalent:A:CYS191:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS191:CX, <Atom instance> ligcovalent:A:CYS191:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 16
len( CX ).bonds= 3
skipping b= CX - CX
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 17
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 18
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= []
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS191:CX, <Atom instance> ligcovalent:A:CYS191:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS191:CX, <Atom instance> ligcovalent:A:CYS191:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 18
len( CX ).bonds= 2
skipping b= NX - CX
skipping b= CX - CX
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS191:CX, <Atom instance> ligcovalent:A:CYS191:OX)]
newQ= [(<Atom instance> ligcovalent:A:CYS191:CX, <Atom instance> ligcovalent:A:CYS191:OX)]
@@@@len(newq)= 1
queue= [(<Atom instance> ligcovalent:A:CYS191:CX, <Atom instance> ligcovalent:A:CYS191:OX)]
 currently queue= CX - OX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS191:CX, <Atom instance> ligcovalent:A:CYS191:OX)]
 processing queue entry:  CX - OX
in wBF with fromAtom= CX + startAtom= OX startAtom.used= 0
wBF: wrote  OX
self.outatom_counter= 19


writing and calling wL with nA= CX - 19
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 20
len( CX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []
 currently queue=
CX : OX : queue= []
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 21


writing and calling wL with nA= CX - 21
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 22
len( CX ).bonds= 1
skipping b= CX - CX
returning queue= []
newQ= []
 currently queue=
CX : CX : queue= []
wrote flex file ligcovalent_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: ligcovalent_flex.pdbqt
wrote rigid file: ligcovalent_rigid.pdbqt
4---done
setting PYTHONHOME environment
setting PYTHONHOME environment
!unable to use ligand.TORSDOF! torsdof always set to ligand.ndihe= 7
5---done
 concat 10 log files... done.
Job finished, good luck!
rm: 无法删除'chimera.com': 没有那个文件或目录
rm: 无法删除'tmp.mol2': 没有那个文件或目录
Done
Processing residue A:CYS256
[start] output filename is: ligcovalent_single.pdb
CHAIN A
Writing output filename: ligcovalent_single.pdb
1---ligcovalent.pdb prepared...
1.5--done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= fixed  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  fixed
merged  0  nonpolar hydrogens
end of base class init
using std outputfilename  fixed.pdbqt
wrote  fixed  to  fixed.pdbqt
2---done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= ligcovalent  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  ligcovalent
merged  21  nonpolar hydrogens
end of base class init
using std outputfilename  ligcovalent.pdbqt
wrote  ligcovalent  to  ligcovalent.pdbqt
3---done
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> fixed:A:CYS256 with 6 MolKit.molecule.Atom]
calling setAutoFlexFields with  fixed:A:CYS256
in setAutoFlexFields with  fixed:A:CYS256
len(rotatables)= 1
returning res.torscount= 1
res.root= CA
ntors= 1
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= fixed_flex.pdbqt
res_total= 1
in writeResidue with  fixed:A:CYS256
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS256:N, <Atom instance> fixed:A:CYS256:CA)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS256:CA, <Atom instance> fixed:A:CYS256:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS256:CA, <Atom instance> fixed:A:CYS256:C)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3


writing and calling wL with nA= SG - 3
wBF2: wrote  SG
!!!2:calling wL


in writeLevel with  SG  outatom_counter= 4
len( SG ).bonds= 1
skipping b= CB - SG
returning queue= []
newQ= []
 currently queue=
CA : CB : queue= []
wrote flex file fixed_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: fixed_flex.pdbqt
wrote rigid file: fixed_rigid.pdbqt
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> ligcovalent:A:CYS256 with 28 MolKit.molecule.Atom]
calling setAutoFlexFields with  ligcovalent:A:CYS256
in setAutoFlexFields with  ligcovalent:A:CYS256
len(rotatables)= 8
returning res.torscount= 7
res.root= CA
ntors= 7
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= ligcovalent_flex.pdbqt
res_total= 7
in writeResidue with  ligcovalent:A:CYS256
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS256:N, <Atom instance> ligcovalent:A:CYS256:CA)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS256:CA, <Atom instance> ligcovalent:A:CYS256:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS256:CA, <Atom instance> ligcovalent:A:CYS256:CB)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3
 currently queue= CB - SG ,
CA : CB : queue= [(<Atom instance> ligcovalent:A:CYS256:CB, <Atom instance> ligcovalent:A:CYS256:SG)]
 processing queue entry:  CB - SG
in wBF with fromAtom= CB + startAtom= SG startAtom.used= 0
wBF: wrote  SG
self.outatom_counter= 4
 currently queue= SG - CX ,
CB : SG : queue= [(<Atom instance> ligcovalent:A:CYS256:SG, <Atom instance> ligcovalent:A:CYS256:CX)]
 processing queue entry:  SG - CX
in wBF with fromAtom= SG + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 5
 currently queue= CX - CX ,
SG : CX : queue= [(<Atom instance> ligcovalent:A:CYS256:CX, <Atom instance> ligcovalent:A:CYS256:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 6
 currently queue= CX - CX , CX - CX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS256:CX, <Atom instance> ligcovalent:A:CYS256:CX), (<Atom instance> ligcovalent:A:CYS256:CX, <Atom instance> ligcovalent:A:CYS256:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 7


writing and calling wL with nA= NX - 7
wBF2: wrote  NX
!!!2:calling wL


in writeLevel with  NX  outatom_counter= 8
len( NX ).bonds= 3
processing b= NX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= NX - CX
processing b= CX - NX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 10
len( CX ).bonds= 2
skipping b= NX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 11
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 12
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 13
len( CX ).bonds= 3
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 14
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 15
len( CX ).bonds= 3
processing b= OX - CX  activeTors= 1
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
CX wL: queue= [(<Atom instance> ligcovalent:A:CYS256:CX, <Atom instance> ligcovalent:A:CYS256:OX)]
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 16
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 17
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS256:CX, <Atom instance> ligcovalent:A:CYS256:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS256:CX, <Atom instance> ligcovalent:A:CYS256:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS256:CX, <Atom instance> ligcovalent:A:CYS256:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS256:CX, <Atom instance> ligcovalent:A:CYS256:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS256:CX, <Atom instance> ligcovalent:A:CYS256:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS256:CX, <Atom instance> ligcovalent:A:CYS256:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS256:CX, <Atom instance> ligcovalent:A:CYS256:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS256:CX, <Atom instance> ligcovalent:A:CYS256:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS256:CX, <Atom instance> ligcovalent:A:CYS256:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS256:CX, <Atom instance> ligcovalent:A:CYS256:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS256:CX, <Atom instance> ligcovalent:A:CYS256:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS256:CX, <Atom instance> ligcovalent:A:CYS256:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 17
len( CX ).bonds= 3
skipping b= CX - CX
skipping b= CX - CX
skipping b= CX - NX
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS256:CX, <Atom instance> ligcovalent:A:CYS256:OX)]
newQ= [(<Atom instance> ligcovalent:A:CYS256:CX, <Atom instance> ligcovalent:A:CYS256:OX)]
@@@@len(newq)= 1
queue= [(<Atom instance> ligcovalent:A:CYS256:CX, <Atom instance> ligcovalent:A:CYS256:OX)]


writing and calling wL with nA= OX - 17
wBF2: wrote  OX
!!!2:calling wL


in writeLevel with  OX  outatom_counter= 18
len( OX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []
 currently queue= CX - OX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS256:CX, <Atom instance> ligcovalent:A:CYS256:OX)]
 processing queue entry:  CX - OX
in wBF with fromAtom= CX + startAtom= OX startAtom.used= 0
wBF: wrote  OX
self.outatom_counter= 19


writing and calling wL with nA= CX - 19
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 20
len( CX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []
 currently queue=
CX : OX : queue= []
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 21


writing and calling wL with nA= CX - 21
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 22
len( CX ).bonds= 1
skipping b= CX - CX
returning queue= []
newQ= []
 currently queue=
CX : CX : queue= []
wrote flex file ligcovalent_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: ligcovalent_flex.pdbqt
wrote rigid file: ligcovalent_rigid.pdbqt
4---done
setting PYTHONHOME environment
setting PYTHONHOME environment
!unable to use ligand.TORSDOF! torsdof always set to ligand.ndihe= 7
5---done
 concat 10 log files... done.
Job finished, good luck!
rm: 无法删除'chimera.com': 没有那个文件或目录
rm: 无法删除'tmp.mol2': 没有那个文件或目录
Done
Processing residue A:CYS972
[start] output filename is: ligcovalent_single.pdb
CHAIN A
Writing output filename: ligcovalent_single.pdb
1---ligcovalent.pdb prepared...
1.5--done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= fixed  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  fixed
merged  0  nonpolar hydrogens
end of base class init
using std outputfilename  fixed.pdbqt
wrote  fixed  to  fixed.pdbqt
2---done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= ligcovalent  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  ligcovalent
merged  21  nonpolar hydrogens
end of base class init
using std outputfilename  ligcovalent.pdbqt
wrote  ligcovalent  to  ligcovalent.pdbqt
3---done
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> fixed:A:CYS972 with 6 MolKit.molecule.Atom]
calling setAutoFlexFields with  fixed:A:CYS972
in setAutoFlexFields with  fixed:A:CYS972
len(rotatables)= 1
returning res.torscount= 1
res.root= CA
ntors= 1
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= fixed_flex.pdbqt
res_total= 1
in writeResidue with  fixed:A:CYS972
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS972:CA, <Atom instance> fixed:A:CYS972:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS972:CA, <Atom instance> fixed:A:CYS972:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS972:N, <Atom instance> fixed:A:CYS972:CA)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3


writing and calling wL with nA= SG - 3
wBF2: wrote  SG
!!!2:calling wL


in writeLevel with  SG  outatom_counter= 4
len( SG ).bonds= 1
skipping b= CB - SG
returning queue= []
newQ= []
 currently queue=
CA : CB : queue= []
wrote flex file fixed_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: fixed_flex.pdbqt
wrote rigid file: fixed_rigid.pdbqt
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> ligcovalent:A:CYS972 with 28 MolKit.molecule.Atom]
calling setAutoFlexFields with  ligcovalent:A:CYS972
in setAutoFlexFields with  ligcovalent:A:CYS972
len(rotatables)= 8
returning res.torscount= 7
res.root= CA
ntors= 7
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= ligcovalent_flex.pdbqt
res_total= 7
in writeResidue with  ligcovalent:A:CYS972
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS972:N, <Atom instance> ligcovalent:A:CYS972:CA)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS972:CA, <Atom instance> ligcovalent:A:CYS972:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS972:CA, <Atom instance> ligcovalent:A:CYS972:CB)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3
 currently queue= CB - SG ,
CA : CB : queue= [(<Atom instance> ligcovalent:A:CYS972:CB, <Atom instance> ligcovalent:A:CYS972:SG)]
 processing queue entry:  CB - SG
in wBF with fromAtom= CB + startAtom= SG startAtom.used= 0
wBF: wrote  SG
self.outatom_counter= 4
 currently queue= SG - CX ,
CB : SG : queue= [(<Atom instance> ligcovalent:A:CYS972:SG, <Atom instance> ligcovalent:A:CYS972:CX)]
 processing queue entry:  SG - CX
in wBF with fromAtom= SG + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 5
 currently queue= CX - CX ,
SG : CX : queue= [(<Atom instance> ligcovalent:A:CYS972:CX, <Atom instance> ligcovalent:A:CYS972:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 6
 currently queue= CX - CX , CX - CX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS972:CX, <Atom instance> ligcovalent:A:CYS972:CX), (<Atom instance> ligcovalent:A:CYS972:CX, <Atom instance> ligcovalent:A:CYS972:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 7


writing and calling wL with nA= OX - 7
wBF2: wrote  OX
!!!2:calling wL


in writeLevel with  OX  outatom_counter= 8
len( OX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []


writing and calling wL with nA= NX - 8
wBF2: wrote  NX
!!!2:calling wL


in writeLevel with  NX  outatom_counter= 9
len( NX ).bonds= 3
skipping b= NX - CX
processing b= NX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
processing b= CX - NX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 11
len( CX ).bonds= 2
skipping b= NX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 12
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 13
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 14
len( CX ).bonds= 3
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 15
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 16
len( CX ).bonds= 3
processing b= OX - CX  activeTors= 1
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
CX wL: queue= [(<Atom instance> ligcovalent:A:CYS972:CX, <Atom instance> ligcovalent:A:CYS972:OX)]
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 17
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 18
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS972:CX, <Atom instance> ligcovalent:A:CYS972:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS972:CX, <Atom instance> ligcovalent:A:CYS972:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS972:CX, <Atom instance> ligcovalent:A:CYS972:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS972:CX, <Atom instance> ligcovalent:A:CYS972:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS972:CX, <Atom instance> ligcovalent:A:CYS972:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS972:CX, <Atom instance> ligcovalent:A:CYS972:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS972:CX, <Atom instance> ligcovalent:A:CYS972:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS972:CX, <Atom instance> ligcovalent:A:CYS972:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS972:CX, <Atom instance> ligcovalent:A:CYS972:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS972:CX, <Atom instance> ligcovalent:A:CYS972:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS972:CX, <Atom instance> ligcovalent:A:CYS972:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS972:CX, <Atom instance> ligcovalent:A:CYS972:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 18
len( CX ).bonds= 3
skipping b= CX - NX
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS972:CX, <Atom instance> ligcovalent:A:CYS972:OX)]
newQ= [(<Atom instance> ligcovalent:A:CYS972:CX, <Atom instance> ligcovalent:A:CYS972:OX)]
@@@@len(newq)= 1
queue= [(<Atom instance> ligcovalent:A:CYS972:CX, <Atom instance> ligcovalent:A:CYS972:OX)]
 currently queue= CX - OX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS972:CX, <Atom instance> ligcovalent:A:CYS972:OX)]
 processing queue entry:  CX - OX
in wBF with fromAtom= CX + startAtom= OX startAtom.used= 0
wBF: wrote  OX
self.outatom_counter= 19


writing and calling wL with nA= CX - 19
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 20
len( CX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []
 currently queue=
CX : OX : queue= []
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 21


writing and calling wL with nA= CX - 21
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 22
len( CX ).bonds= 1
skipping b= CX - CX
returning queue= []
newQ= []
 currently queue=
CX : CX : queue= []
wrote flex file ligcovalent_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: ligcovalent_flex.pdbqt
wrote rigid file: ligcovalent_rigid.pdbqt
4---done
setting PYTHONHOME environment
setting PYTHONHOME environment
!unable to use ligand.TORSDOF! torsdof always set to ligand.ndihe= 7
5---done
 concat 10 log files... done.
Job finished, good luck!
rm: 无法删除'chimera.com': 没有那个文件或目录
rm: 无法删除'tmp.mol2': 没有那个文件或目录
Done
Processing residue A:CYS229
[start] output filename is: ligcovalent_single.pdb
CHAIN A
Writing output filename: ligcovalent_single.pdb
1---ligcovalent.pdb prepared...
1.5--done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= fixed  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  fixed
merged  0  nonpolar hydrogens
end of base class init
using std outputfilename  fixed.pdbqt
wrote  fixed  to  fixed.pdbqt
2---done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= ligcovalent  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  ligcovalent
merged  21  nonpolar hydrogens
end of base class init
using std outputfilename  ligcovalent.pdbqt
wrote  ligcovalent  to  ligcovalent.pdbqt
3---done
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> fixed:A:CYS229 with 6 MolKit.molecule.Atom]
calling setAutoFlexFields with  fixed:A:CYS229
in setAutoFlexFields with  fixed:A:CYS229
len(rotatables)= 1
returning res.torscount= 1
res.root= CA
ntors= 1
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= fixed_flex.pdbqt
res_total= 1
in writeResidue with  fixed:A:CYS229
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS229:N, <Atom instance> fixed:A:CYS229:CA)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS229:CA, <Atom instance> fixed:A:CYS229:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS229:CA, <Atom instance> fixed:A:CYS229:C)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3


writing and calling wL with nA= SG - 3
wBF2: wrote  SG
!!!2:calling wL


in writeLevel with  SG  outatom_counter= 4
len( SG ).bonds= 1
skipping b= CB - SG
returning queue= []
newQ= []
 currently queue=
CA : CB : queue= []
wrote flex file fixed_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: fixed_flex.pdbqt
wrote rigid file: fixed_rigid.pdbqt
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> ligcovalent:A:CYS229 with 28 MolKit.molecule.Atom]
calling setAutoFlexFields with  ligcovalent:A:CYS229
in setAutoFlexFields with  ligcovalent:A:CYS229
len(rotatables)= 8
returning res.torscount= 7
res.root= CA
ntors= 7
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= ligcovalent_flex.pdbqt
res_total= 7
in writeResidue with  ligcovalent:A:CYS229
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS229:CA, <Atom instance> ligcovalent:A:CYS229:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS229:CA, <Atom instance> ligcovalent:A:CYS229:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS229:N, <Atom instance> ligcovalent:A:CYS229:CA)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3
 currently queue= CB - SG ,
CA : CB : queue= [(<Atom instance> ligcovalent:A:CYS229:CB, <Atom instance> ligcovalent:A:CYS229:SG)]
 processing queue entry:  CB - SG
in wBF with fromAtom= CB + startAtom= SG startAtom.used= 0
wBF: wrote  SG
self.outatom_counter= 4
 currently queue= SG - CX ,
CB : SG : queue= [(<Atom instance> ligcovalent:A:CYS229:SG, <Atom instance> ligcovalent:A:CYS229:CX)]
 processing queue entry:  SG - CX
in wBF with fromAtom= SG + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 5
 currently queue= CX - CX ,
SG : CX : queue= [(<Atom instance> ligcovalent:A:CYS229:CX, <Atom instance> ligcovalent:A:CYS229:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 6
 currently queue= CX - CX , CX - CX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS229:CX, <Atom instance> ligcovalent:A:CYS229:CX), (<Atom instance> ligcovalent:A:CYS229:CX, <Atom instance> ligcovalent:A:CYS229:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 7


writing and calling wL with nA= OX - 7
wBF2: wrote  OX
!!!2:calling wL


in writeLevel with  OX  outatom_counter= 8
len( OX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []


writing and calling wL with nA= NX - 8
wBF2: wrote  NX
!!!2:calling wL


in writeLevel with  NX  outatom_counter= 9
len( NX ).bonds= 3
skipping b= NX - CX
processing b= NX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
processing b= CX - NX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 11
len( CX ).bonds= 2
skipping b= NX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 12
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 13
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 14
len( CX ).bonds= 3
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 15
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 16
len( CX ).bonds= 3
processing b= OX - CX  activeTors= 1
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
CX wL: queue= [(<Atom instance> ligcovalent:A:CYS229:CX, <Atom instance> ligcovalent:A:CYS229:OX)]
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 17
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 18
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS229:CX, <Atom instance> ligcovalent:A:CYS229:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS229:CX, <Atom instance> ligcovalent:A:CYS229:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS229:CX, <Atom instance> ligcovalent:A:CYS229:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS229:CX, <Atom instance> ligcovalent:A:CYS229:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS229:CX, <Atom instance> ligcovalent:A:CYS229:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS229:CX, <Atom instance> ligcovalent:A:CYS229:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS229:CX, <Atom instance> ligcovalent:A:CYS229:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS229:CX, <Atom instance> ligcovalent:A:CYS229:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS229:CX, <Atom instance> ligcovalent:A:CYS229:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS229:CX, <Atom instance> ligcovalent:A:CYS229:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS229:CX, <Atom instance> ligcovalent:A:CYS229:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS229:CX, <Atom instance> ligcovalent:A:CYS229:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 18
len( CX ).bonds= 3
skipping b= CX - CX
skipping b= CX - NX
skipping b= CX - CX
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS229:CX, <Atom instance> ligcovalent:A:CYS229:OX)]
newQ= [(<Atom instance> ligcovalent:A:CYS229:CX, <Atom instance> ligcovalent:A:CYS229:OX)]
@@@@len(newq)= 1
queue= [(<Atom instance> ligcovalent:A:CYS229:CX, <Atom instance> ligcovalent:A:CYS229:OX)]
 currently queue= CX - OX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS229:CX, <Atom instance> ligcovalent:A:CYS229:OX)]
 processing queue entry:  CX - OX
in wBF with fromAtom= CX + startAtom= OX startAtom.used= 0
wBF: wrote  OX
self.outatom_counter= 19


writing and calling wL with nA= CX - 19
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 20
len( CX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []
 currently queue=
CX : OX : queue= []
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 21


writing and calling wL with nA= CX - 21
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 22
len( CX ).bonds= 1
skipping b= CX - CX
returning queue= []
newQ= []
 currently queue=
CX : CX : queue= []
wrote flex file ligcovalent_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: ligcovalent_flex.pdbqt
wrote rigid file: ligcovalent_rigid.pdbqt
4---done
setting PYTHONHOME environment
setting PYTHONHOME environment
!unable to use ligand.TORSDOF! torsdof always set to ligand.ndihe= 7
5---done
 concat 10 log files... done.
Job finished, good luck!
rm: 无法删除'chimera.com': 没有那个文件或目录
rm: 无法删除'tmp.mol2': 没有那个文件或目录
Done
Processing residue A:CYS266
[start] output filename is: ligcovalent_single.pdb
CHAIN A
Writing output filename: ligcovalent_single.pdb
1---ligcovalent.pdb prepared...
1.5--done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= fixed  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  fixed
merged  0  nonpolar hydrogens
end of base class init
using std outputfilename  fixed.pdbqt
wrote  fixed  to  fixed.pdbqt
2---done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= ligcovalent  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  ligcovalent
merged  21  nonpolar hydrogens
end of base class init
using std outputfilename  ligcovalent.pdbqt
wrote  ligcovalent  to  ligcovalent.pdbqt
3---done
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> fixed:A:CYS266 with 6 MolKit.molecule.Atom]
calling setAutoFlexFields with  fixed:A:CYS266
in setAutoFlexFields with  fixed:A:CYS266
len(rotatables)= 1
returning res.torscount= 1
res.root= CA
ntors= 1
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= fixed_flex.pdbqt
res_total= 1
in writeResidue with  fixed:A:CYS266
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS266:CA, <Atom instance> fixed:A:CYS266:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS266:CA, <Atom instance> fixed:A:CYS266:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS266:N, <Atom instance> fixed:A:CYS266:CA)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3


writing and calling wL with nA= SG - 3
wBF2: wrote  SG
!!!2:calling wL


in writeLevel with  SG  outatom_counter= 4
len( SG ).bonds= 1
skipping b= CB - SG
returning queue= []
newQ= []
 currently queue=
CA : CB : queue= []
wrote flex file fixed_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: fixed_flex.pdbqt
wrote rigid file: fixed_rigid.pdbqt
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> ligcovalent:A:CYS266 with 28 MolKit.molecule.Atom]
calling setAutoFlexFields with  ligcovalent:A:CYS266
in setAutoFlexFields with  ligcovalent:A:CYS266
len(rotatables)= 8
returning res.torscount= 7
res.root= CA
ntors= 7
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= ligcovalent_flex.pdbqt
res_total= 7
in writeResidue with  ligcovalent:A:CYS266
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS266:CA, <Atom instance> ligcovalent:A:CYS266:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS266:CA, <Atom instance> ligcovalent:A:CYS266:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS266:N, <Atom instance> ligcovalent:A:CYS266:CA)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3
 currently queue= CB - SG ,
CA : CB : queue= [(<Atom instance> ligcovalent:A:CYS266:CB, <Atom instance> ligcovalent:A:CYS266:SG)]
 processing queue entry:  CB - SG
in wBF with fromAtom= CB + startAtom= SG startAtom.used= 0
wBF: wrote  SG
self.outatom_counter= 4
 currently queue= SG - CX ,
CB : SG : queue= [(<Atom instance> ligcovalent:A:CYS266:SG, <Atom instance> ligcovalent:A:CYS266:CX)]
 processing queue entry:  SG - CX
in wBF with fromAtom= SG + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 5
 currently queue= CX - CX ,
SG : CX : queue= [(<Atom instance> ligcovalent:A:CYS266:CX, <Atom instance> ligcovalent:A:CYS266:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 6
 currently queue= CX - CX , CX - CX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS266:CX, <Atom instance> ligcovalent:A:CYS266:CX), (<Atom instance> ligcovalent:A:CYS266:CX, <Atom instance> ligcovalent:A:CYS266:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 7


writing and calling wL with nA= CX - 7
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 8
len( CX ).bonds= 1
skipping b= CX - CX
returning queue= []
newQ= []
 currently queue=
CX : CX : queue= []
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 9


writing and calling wL with nA= NX - 9
wBF2: wrote  NX
!!!2:calling wL


in writeLevel with  NX  outatom_counter= 10
len( NX ).bonds= 3
processing b= CX - NX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
processing b= NX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= NX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 12
len( CX ).bonds= 3
skipping b= CX - NX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 14
len( CX ).bonds= 3
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 16
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 17
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= []
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 17
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 18
len( CX ).bonds= 3
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
processing b= OX - CX  activeTors= 1
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
CX wL: queue= [(<Atom instance> ligcovalent:A:CYS266:CX, <Atom instance> ligcovalent:A:CYS266:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 19
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS266:CX, <Atom instance> ligcovalent:A:CYS266:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS266:CX, <Atom instance> ligcovalent:A:CYS266:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS266:CX, <Atom instance> ligcovalent:A:CYS266:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS266:CX, <Atom instance> ligcovalent:A:CYS266:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS266:CX, <Atom instance> ligcovalent:A:CYS266:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS266:CX, <Atom instance> ligcovalent:A:CYS266:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 19
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS266:CX, <Atom instance> ligcovalent:A:CYS266:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS266:CX, <Atom instance> ligcovalent:A:CYS266:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 19
len( CX ).bonds= 2
skipping b= NX - CX
skipping b= CX - CX
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS266:CX, <Atom instance> ligcovalent:A:CYS266:OX)]
newQ= [(<Atom instance> ligcovalent:A:CYS266:CX, <Atom instance> ligcovalent:A:CYS266:OX)]
@@@@len(newq)= 1
queue= [(<Atom instance> ligcovalent:A:CYS266:CX, <Atom instance> ligcovalent:A:CYS266:OX)]


writing and calling wL with nA= OX - 19
wBF2: wrote  OX
!!!2:calling wL


in writeLevel with  OX  outatom_counter= 20
len( OX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []
 currently queue= CX - OX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS266:CX, <Atom instance> ligcovalent:A:CYS266:OX)]
 processing queue entry:  CX - OX
in wBF with fromAtom= CX + startAtom= OX startAtom.used= 0
wBF: wrote  OX
self.outatom_counter= 21


writing and calling wL with nA= CX - 21
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 22
len( CX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []
 currently queue=
CX : OX : queue= []
wrote flex file ligcovalent_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: ligcovalent_flex.pdbqt
wrote rigid file: ligcovalent_rigid.pdbqt
4---done
setting PYTHONHOME environment
setting PYTHONHOME environment
!unable to use ligand.TORSDOF! torsdof always set to ligand.ndihe= 7
5---done
 concat 10 log files... done.
Job finished, good luck!
rm: 无法删除'chimera.com': 没有那个文件或目录
rm: 无法删除'tmp.mol2': 没有那个文件或目录
Done
Processing residue A:CYS915
[start] output filename is: ligcovalent_single.pdb
CHAIN A
Writing output filename: ligcovalent_single.pdb
1---ligcovalent.pdb prepared...
1.5--done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= fixed  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  fixed
merged  0  nonpolar hydrogens
end of base class init
using std outputfilename  fixed.pdbqt
wrote  fixed  to  fixed.pdbqt
2---done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= ligcovalent  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  ligcovalent
merged  21  nonpolar hydrogens
end of base class init
using std outputfilename  ligcovalent.pdbqt
wrote  ligcovalent  to  ligcovalent.pdbqt
3---done
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> fixed:A:CYS915 with 6 MolKit.molecule.Atom]
calling setAutoFlexFields with  fixed:A:CYS915
in setAutoFlexFields with  fixed:A:CYS915
len(rotatables)= 1
returning res.torscount= 1
res.root= CA
ntors= 1
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= fixed_flex.pdbqt
res_total= 1
in writeResidue with  fixed:A:CYS915
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS915:N, <Atom instance> fixed:A:CYS915:CA)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS915:CA, <Atom instance> fixed:A:CYS915:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS915:CA, <Atom instance> fixed:A:CYS915:C)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3


writing and calling wL with nA= SG - 3
wBF2: wrote  SG
!!!2:calling wL


in writeLevel with  SG  outatom_counter= 4
len( SG ).bonds= 1
skipping b= CB - SG
returning queue= []
newQ= []
 currently queue=
CA : CB : queue= []
wrote flex file fixed_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: fixed_flex.pdbqt
wrote rigid file: fixed_rigid.pdbqt
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> ligcovalent:A:CYS915 with 28 MolKit.molecule.Atom]
calling setAutoFlexFields with  ligcovalent:A:CYS915
in setAutoFlexFields with  ligcovalent:A:CYS915
len(rotatables)= 8
returning res.torscount= 7
res.root= CA
ntors= 7
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= ligcovalent_flex.pdbqt
res_total= 7
in writeResidue with  ligcovalent:A:CYS915
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS915:N, <Atom instance> ligcovalent:A:CYS915:CA)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS915:CA, <Atom instance> ligcovalent:A:CYS915:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS915:CA, <Atom instance> ligcovalent:A:CYS915:CB)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3
 currently queue= CB - SG ,
CA : CB : queue= [(<Atom instance> ligcovalent:A:CYS915:CB, <Atom instance> ligcovalent:A:CYS915:SG)]
 processing queue entry:  CB - SG
in wBF with fromAtom= CB + startAtom= SG startAtom.used= 0
wBF: wrote  SG
self.outatom_counter= 4
 currently queue= SG - CX ,
CB : SG : queue= [(<Atom instance> ligcovalent:A:CYS915:SG, <Atom instance> ligcovalent:A:CYS915:CX)]
 processing queue entry:  SG - CX
in wBF with fromAtom= SG + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 5
 currently queue= CX - CX ,
SG : CX : queue= [(<Atom instance> ligcovalent:A:CYS915:CX, <Atom instance> ligcovalent:A:CYS915:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 6
 currently queue= CX - CX , CX - CX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS915:CX, <Atom instance> ligcovalent:A:CYS915:CX), (<Atom instance> ligcovalent:A:CYS915:CX, <Atom instance> ligcovalent:A:CYS915:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 7


writing and calling wL with nA= OX - 7
wBF2: wrote  OX
!!!2:calling wL


in writeLevel with  OX  outatom_counter= 8
len( OX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []


writing and calling wL with nA= NX - 8
wBF2: wrote  NX
!!!2:calling wL


in writeLevel with  NX  outatom_counter= 9
len( NX ).bonds= 3
skipping b= NX - CX
processing b= NX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
processing b= CX - NX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 11
len( CX ).bonds= 2
skipping b= NX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 12
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 13
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 14
len( CX ).bonds= 3
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 15
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 16
len( CX ).bonds= 3
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
processing b= OX - CX  activeTors= 1
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
CX wL: queue= [(<Atom instance> ligcovalent:A:CYS915:CX, <Atom instance> ligcovalent:A:CYS915:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 17
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 18
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS915:CX, <Atom instance> ligcovalent:A:CYS915:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS915:CX, <Atom instance> ligcovalent:A:CYS915:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS915:CX, <Atom instance> ligcovalent:A:CYS915:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS915:CX, <Atom instance> ligcovalent:A:CYS915:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS915:CX, <Atom instance> ligcovalent:A:CYS915:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS915:CX, <Atom instance> ligcovalent:A:CYS915:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS915:CX, <Atom instance> ligcovalent:A:CYS915:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS915:CX, <Atom instance> ligcovalent:A:CYS915:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS915:CX, <Atom instance> ligcovalent:A:CYS915:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS915:CX, <Atom instance> ligcovalent:A:CYS915:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS915:CX, <Atom instance> ligcovalent:A:CYS915:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS915:CX, <Atom instance> ligcovalent:A:CYS915:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 18
len( CX ).bonds= 3
skipping b= CX - CX
skipping b= CX - NX
skipping b= CX - CX
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS915:CX, <Atom instance> ligcovalent:A:CYS915:OX)]
newQ= [(<Atom instance> ligcovalent:A:CYS915:CX, <Atom instance> ligcovalent:A:CYS915:OX)]
@@@@len(newq)= 1
queue= [(<Atom instance> ligcovalent:A:CYS915:CX, <Atom instance> ligcovalent:A:CYS915:OX)]
 currently queue= CX - OX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS915:CX, <Atom instance> ligcovalent:A:CYS915:OX)]
 processing queue entry:  CX - OX
in wBF with fromAtom= CX + startAtom= OX startAtom.used= 0
wBF: wrote  OX
self.outatom_counter= 19


writing and calling wL with nA= CX - 19
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 20
len( CX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []
 currently queue=
CX : OX : queue= []
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 21


writing and calling wL with nA= CX - 21
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 22
len( CX ).bonds= 1
skipping b= CX - CX
returning queue= []
newQ= []
 currently queue=
CX : CX : queue= []
wrote flex file ligcovalent_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: ligcovalent_flex.pdbqt
wrote rigid file: ligcovalent_rigid.pdbqt
4---done
setting PYTHONHOME environment
setting PYTHONHOME environment
!unable to use ligand.TORSDOF! torsdof always set to ligand.ndihe= 7
5---done
 concat 10 log files... done.
Job finished, good luck!
rm: 无法删除'chimera.com': 没有那个文件或目录
rm: 无法删除'tmp.mol2': 没有那个文件或目录
Done
Processing residue A:CYS1078
[start] output filename is: ligcovalent_single.pdb
CHAIN A
Writing output filename: ligcovalent_single.pdb
1---ligcovalent.pdb prepared...
1.5--done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= fixed  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  fixed
merged  0  nonpolar hydrogens
end of base class init
using std outputfilename  fixed.pdbqt
wrote  fixed  to  fixed.pdbqt
2---done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= ligcovalent  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  ligcovalent
merged  21  nonpolar hydrogens
end of base class init
using std outputfilename  ligcovalent.pdbqt
wrote  ligcovalent  to  ligcovalent.pdbqt
3---done
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> fixed:A:CYS1078 with 6 MolKit.molecule.Atom]
calling setAutoFlexFields with  fixed:A:CYS1078
in setAutoFlexFields with  fixed:A:CYS1078
len(rotatables)= 1
returning res.torscount= 1
res.root= CA
ntors= 1
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= fixed_flex.pdbqt
res_total= 1
in writeResidue with  fixed:A:CYS1078
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS1078:CA, <Atom instance> fixed:A:CYS1078:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS1078:CA, <Atom instance> fixed:A:CYS1078:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS1078:N, <Atom instance> fixed:A:CYS1078:CA)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3


writing and calling wL with nA= SG - 3
wBF2: wrote  SG
!!!2:calling wL


in writeLevel with  SG  outatom_counter= 4
len( SG ).bonds= 1
skipping b= CB - SG
returning queue= []
newQ= []
 currently queue=
CA : CB : queue= []
wrote flex file fixed_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: fixed_flex.pdbqt
wrote rigid file: fixed_rigid.pdbqt
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> ligcovalent:A:CYS1078 with 28 MolKit.molecule.Atom]
calling setAutoFlexFields with  ligcovalent:A:CYS1078
in setAutoFlexFields with  ligcovalent:A:CYS1078
len(rotatables)= 8
returning res.torscount= 7
res.root= CA
ntors= 7
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= ligcovalent_flex.pdbqt
res_total= 7
in writeResidue with  ligcovalent:A:CYS1078
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS1078:CA, <Atom instance> ligcovalent:A:CYS1078:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS1078:CA, <Atom instance> ligcovalent:A:CYS1078:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS1078:N, <Atom instance> ligcovalent:A:CYS1078:CA)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3
 currently queue= CB - SG ,
CA : CB : queue= [(<Atom instance> ligcovalent:A:CYS1078:CB, <Atom instance> ligcovalent:A:CYS1078:SG)]
 processing queue entry:  CB - SG
in wBF with fromAtom= CB + startAtom= SG startAtom.used= 0
wBF: wrote  SG
self.outatom_counter= 4
 currently queue= SG - CX ,
CB : SG : queue= [(<Atom instance> ligcovalent:A:CYS1078:SG, <Atom instance> ligcovalent:A:CYS1078:CX)]
 processing queue entry:  SG - CX
in wBF with fromAtom= SG + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 5
 currently queue= CX - CX ,
SG : CX : queue= [(<Atom instance> ligcovalent:A:CYS1078:CX, <Atom instance> ligcovalent:A:CYS1078:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 6
 currently queue= CX - CX , CX - CX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS1078:CX, <Atom instance> ligcovalent:A:CYS1078:CX), (<Atom instance> ligcovalent:A:CYS1078:CX, <Atom instance> ligcovalent:A:CYS1078:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 7


writing and calling wL with nA= OX - 7
wBF2: wrote  OX
!!!2:calling wL


in writeLevel with  OX  outatom_counter= 8
len( OX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []


writing and calling wL with nA= NX - 8
wBF2: wrote  NX
!!!2:calling wL


in writeLevel with  NX  outatom_counter= 9
len( NX ).bonds= 3
skipping b= NX - CX
processing b= NX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
processing b= CX - NX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 11
len( CX ).bonds= 2
skipping b= NX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 12
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 13
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 14
len( CX ).bonds= 3
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 15
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 16
len( CX ).bonds= 3
processing b= OX - CX  activeTors= 1
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
CX wL: queue= [(<Atom instance> ligcovalent:A:CYS1078:CX, <Atom instance> ligcovalent:A:CYS1078:OX)]
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 17
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 18
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS1078:CX, <Atom instance> ligcovalent:A:CYS1078:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS1078:CX, <Atom instance> ligcovalent:A:CYS1078:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS1078:CX, <Atom instance> ligcovalent:A:CYS1078:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS1078:CX, <Atom instance> ligcovalent:A:CYS1078:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS1078:CX, <Atom instance> ligcovalent:A:CYS1078:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS1078:CX, <Atom instance> ligcovalent:A:CYS1078:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS1078:CX, <Atom instance> ligcovalent:A:CYS1078:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS1078:CX, <Atom instance> ligcovalent:A:CYS1078:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS1078:CX, <Atom instance> ligcovalent:A:CYS1078:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS1078:CX, <Atom instance> ligcovalent:A:CYS1078:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS1078:CX, <Atom instance> ligcovalent:A:CYS1078:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS1078:CX, <Atom instance> ligcovalent:A:CYS1078:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 18
len( CX ).bonds= 3
skipping b= CX - CX
skipping b= CX - CX
skipping b= CX - NX
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS1078:CX, <Atom instance> ligcovalent:A:CYS1078:OX)]
newQ= [(<Atom instance> ligcovalent:A:CYS1078:CX, <Atom instance> ligcovalent:A:CYS1078:OX)]
@@@@len(newq)= 1
queue= [(<Atom instance> ligcovalent:A:CYS1078:CX, <Atom instance> ligcovalent:A:CYS1078:OX)]
 currently queue= CX - OX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS1078:CX, <Atom instance> ligcovalent:A:CYS1078:OX)]
 processing queue entry:  CX - OX
in wBF with fromAtom= CX + startAtom= OX startAtom.used= 0
wBF: wrote  OX
self.outatom_counter= 19


writing and calling wL with nA= CX - 19
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 20
len( CX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []
 currently queue=
CX : OX : queue= []
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 21


writing and calling wL with nA= CX - 21
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 22
len( CX ).bonds= 1
skipping b= CX - CX
returning queue= []
newQ= []
 currently queue=
CX : CX : queue= []
wrote flex file ligcovalent_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: ligcovalent_flex.pdbqt
wrote rigid file: ligcovalent_rigid.pdbqt
4---done
setting PYTHONHOME environment
setting PYTHONHOME environment
!unable to use ligand.TORSDOF! torsdof always set to ligand.ndihe= 7
5---done
 concat 10 log files... done.
Job finished, good luck!
rm: 无法删除'chimera.com': 没有那个文件或目录
rm: 无法删除'tmp.mol2': 没有那个文件或目录
Done
Processing residue A:CYS682
[start] output filename is: ligcovalent_single.pdb
CHAIN A
Writing output filename: ligcovalent_single.pdb
1---ligcovalent.pdb prepared...
1.5--done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= fixed  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  fixed
merged  0  nonpolar hydrogens
end of base class init
using std outputfilename  fixed.pdbqt
wrote  fixed  to  fixed.pdbqt
2---done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= ligcovalent  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  ligcovalent
merged  21  nonpolar hydrogens
end of base class init
using std outputfilename  ligcovalent.pdbqt
wrote  ligcovalent  to  ligcovalent.pdbqt
3---done
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> fixed:A:CYS682 with 6 MolKit.molecule.Atom]
calling setAutoFlexFields with  fixed:A:CYS682
in setAutoFlexFields with  fixed:A:CYS682
len(rotatables)= 1
returning res.torscount= 1
res.root= CA
ntors= 1
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= fixed_flex.pdbqt
res_total= 1
in writeResidue with  fixed:A:CYS682
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS682:CA, <Atom instance> fixed:A:CYS682:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS682:CA, <Atom instance> fixed:A:CYS682:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS682:N, <Atom instance> fixed:A:CYS682:CA)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3


writing and calling wL with nA= SG - 3
wBF2: wrote  SG
!!!2:calling wL


in writeLevel with  SG  outatom_counter= 4
len( SG ).bonds= 1
skipping b= CB - SG
returning queue= []
newQ= []
 currently queue=
CA : CB : queue= []
wrote flex file fixed_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: fixed_flex.pdbqt
wrote rigid file: fixed_rigid.pdbqt
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> ligcovalent:A:CYS682 with 28 MolKit.molecule.Atom]
calling setAutoFlexFields with  ligcovalent:A:CYS682
in setAutoFlexFields with  ligcovalent:A:CYS682
len(rotatables)= 8
returning res.torscount= 7
res.root= CA
ntors= 7
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= ligcovalent_flex.pdbqt
res_total= 7
in writeResidue with  ligcovalent:A:CYS682
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS682:CA, <Atom instance> ligcovalent:A:CYS682:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS682:CA, <Atom instance> ligcovalent:A:CYS682:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS682:N, <Atom instance> ligcovalent:A:CYS682:CA)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3
 currently queue= CB - SG ,
CA : CB : queue= [(<Atom instance> ligcovalent:A:CYS682:CB, <Atom instance> ligcovalent:A:CYS682:SG)]
 processing queue entry:  CB - SG
in wBF with fromAtom= CB + startAtom= SG startAtom.used= 0
wBF: wrote  SG
self.outatom_counter= 4
 currently queue= SG - CX ,
CB : SG : queue= [(<Atom instance> ligcovalent:A:CYS682:SG, <Atom instance> ligcovalent:A:CYS682:CX)]
 processing queue entry:  SG - CX
in wBF with fromAtom= SG + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 5
 currently queue= CX - CX ,
SG : CX : queue= [(<Atom instance> ligcovalent:A:CYS682:CX, <Atom instance> ligcovalent:A:CYS682:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 6
 currently queue= CX - CX , CX - CX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS682:CX, <Atom instance> ligcovalent:A:CYS682:CX), (<Atom instance> ligcovalent:A:CYS682:CX, <Atom instance> ligcovalent:A:CYS682:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 7


writing and calling wL with nA= NX - 7
wBF2: wrote  NX
!!!2:calling wL


in writeLevel with  NX  outatom_counter= 8
len( NX ).bonds= 3
skipping b= NX - CX
processing b= NX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
processing b= CX - NX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 10
len( CX ).bonds= 2
skipping b= NX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 11
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 12
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 13
len( CX ).bonds= 3
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 14
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 15
len( CX ).bonds= 3
processing b= OX - CX  activeTors= 1
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
CX wL: queue= [(<Atom instance> ligcovalent:A:CYS682:CX, <Atom instance> ligcovalent:A:CYS682:OX)]
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 16
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 17
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS682:CX, <Atom instance> ligcovalent:A:CYS682:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS682:CX, <Atom instance> ligcovalent:A:CYS682:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS682:CX, <Atom instance> ligcovalent:A:CYS682:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS682:CX, <Atom instance> ligcovalent:A:CYS682:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS682:CX, <Atom instance> ligcovalent:A:CYS682:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS682:CX, <Atom instance> ligcovalent:A:CYS682:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS682:CX, <Atom instance> ligcovalent:A:CYS682:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS682:CX, <Atom instance> ligcovalent:A:CYS682:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS682:CX, <Atom instance> ligcovalent:A:CYS682:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS682:CX, <Atom instance> ligcovalent:A:CYS682:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS682:CX, <Atom instance> ligcovalent:A:CYS682:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS682:CX, <Atom instance> ligcovalent:A:CYS682:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 17
len( CX ).bonds= 3
skipping b= CX - CX
skipping b= CX - NX
skipping b= CX - CX
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS682:CX, <Atom instance> ligcovalent:A:CYS682:OX)]
newQ= [(<Atom instance> ligcovalent:A:CYS682:CX, <Atom instance> ligcovalent:A:CYS682:OX)]
@@@@len(newq)= 1
queue= [(<Atom instance> ligcovalent:A:CYS682:CX, <Atom instance> ligcovalent:A:CYS682:OX)]


writing and calling wL with nA= OX - 17
wBF2: wrote  OX
!!!2:calling wL


in writeLevel with  OX  outatom_counter= 18
len( OX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []
 currently queue= CX - OX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS682:CX, <Atom instance> ligcovalent:A:CYS682:OX)]
 processing queue entry:  CX - OX
in wBF with fromAtom= CX + startAtom= OX startAtom.used= 0
wBF: wrote  OX
self.outatom_counter= 19


writing and calling wL with nA= CX - 19
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 20
len( CX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []
 currently queue=
CX : OX : queue= []
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 21


writing and calling wL with nA= CX - 21
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 22
len( CX ).bonds= 1
skipping b= CX - CX
returning queue= []
newQ= []
 currently queue=
CX : CX : queue= []
wrote flex file ligcovalent_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: ligcovalent_flex.pdbqt
wrote rigid file: ligcovalent_rigid.pdbqt
4---done
setting PYTHONHOME environment
setting PYTHONHOME environment
!unable to use ligand.TORSDOF! torsdof always set to ligand.ndihe= 7
5---done
 concat 10 log files... done.
Job finished, good luck!
rm: 无法删除'chimera.com': 没有那个文件或目录
rm: 无法删除'tmp.mol2': 没有那个文件或目录
Done
Processing residue A:CYS560
[start] output filename is: ligcovalent_single.pdb
CHAIN A
Writing output filename: ligcovalent_single.pdb
1---ligcovalent.pdb prepared...
1.5--done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= fixed  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  fixed
merged  0  nonpolar hydrogens
end of base class init
using std outputfilename  fixed.pdbqt
wrote  fixed  to  fixed.pdbqt
2---done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= ligcovalent  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  ligcovalent
merged  21  nonpolar hydrogens
end of base class init
using std outputfilename  ligcovalent.pdbqt
wrote  ligcovalent  to  ligcovalent.pdbqt
3---done
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> fixed:A:CYS560 with 6 MolKit.molecule.Atom]
calling setAutoFlexFields with  fixed:A:CYS560
in setAutoFlexFields with  fixed:A:CYS560
len(rotatables)= 1
returning res.torscount= 1
res.root= CA
ntors= 1
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= fixed_flex.pdbqt
res_total= 1
in writeResidue with  fixed:A:CYS560
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS560:N, <Atom instance> fixed:A:CYS560:CA)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS560:CA, <Atom instance> fixed:A:CYS560:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS560:CA, <Atom instance> fixed:A:CYS560:CB)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3


writing and calling wL with nA= SG - 3
wBF2: wrote  SG
!!!2:calling wL


in writeLevel with  SG  outatom_counter= 4
len( SG ).bonds= 1
skipping b= CB - SG
returning queue= []
newQ= []
 currently queue=
CA : CB : queue= []
wrote flex file fixed_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: fixed_flex.pdbqt
wrote rigid file: fixed_rigid.pdbqt
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> ligcovalent:A:CYS560 with 28 MolKit.molecule.Atom]
calling setAutoFlexFields with  ligcovalent:A:CYS560
in setAutoFlexFields with  ligcovalent:A:CYS560
len(rotatables)= 8
returning res.torscount= 7
res.root= CA
ntors= 7
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= ligcovalent_flex.pdbqt
res_total= 7
in writeResidue with  ligcovalent:A:CYS560
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS560:N, <Atom instance> ligcovalent:A:CYS560:CA)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS560:CA, <Atom instance> ligcovalent:A:CYS560:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS560:CA, <Atom instance> ligcovalent:A:CYS560:C)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3
 currently queue= CB - SG ,
CA : CB : queue= [(<Atom instance> ligcovalent:A:CYS560:CB, <Atom instance> ligcovalent:A:CYS560:SG)]
 processing queue entry:  CB - SG
in wBF with fromAtom= CB + startAtom= SG startAtom.used= 0
wBF: wrote  SG
self.outatom_counter= 4
 currently queue= SG - CX ,
CB : SG : queue= [(<Atom instance> ligcovalent:A:CYS560:SG, <Atom instance> ligcovalent:A:CYS560:CX)]
 processing queue entry:  SG - CX
in wBF with fromAtom= SG + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 5
 currently queue= CX - CX ,
SG : CX : queue= [(<Atom instance> ligcovalent:A:CYS560:CX, <Atom instance> ligcovalent:A:CYS560:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 6
 currently queue= CX - CX , CX - CX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS560:CX, <Atom instance> ligcovalent:A:CYS560:CX), (<Atom instance> ligcovalent:A:CYS560:CX, <Atom instance> ligcovalent:A:CYS560:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 7


writing and calling wL with nA= OX - 7
wBF2: wrote  OX
!!!2:calling wL


in writeLevel with  OX  outatom_counter= 8
len( OX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []


writing and calling wL with nA= NX - 8
wBF2: wrote  NX
!!!2:calling wL


in writeLevel with  NX  outatom_counter= 9
len( NX ).bonds= 3
skipping b= NX - CX
processing b= NX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
processing b= CX - NX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 11
len( CX ).bonds= 2
skipping b= NX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 12
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 13
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 14
len( CX ).bonds= 3
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 15
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 16
len( CX ).bonds= 3
processing b= OX - CX  activeTors= 1
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
CX wL: queue= [(<Atom instance> ligcovalent:A:CYS560:CX, <Atom instance> ligcovalent:A:CYS560:OX)]
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 17
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 18
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS560:CX, <Atom instance> ligcovalent:A:CYS560:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS560:CX, <Atom instance> ligcovalent:A:CYS560:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS560:CX, <Atom instance> ligcovalent:A:CYS560:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS560:CX, <Atom instance> ligcovalent:A:CYS560:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS560:CX, <Atom instance> ligcovalent:A:CYS560:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS560:CX, <Atom instance> ligcovalent:A:CYS560:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS560:CX, <Atom instance> ligcovalent:A:CYS560:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS560:CX, <Atom instance> ligcovalent:A:CYS560:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS560:CX, <Atom instance> ligcovalent:A:CYS560:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS560:CX, <Atom instance> ligcovalent:A:CYS560:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS560:CX, <Atom instance> ligcovalent:A:CYS560:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS560:CX, <Atom instance> ligcovalent:A:CYS560:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 18
len( CX ).bonds= 3
skipping b= CX - CX
skipping b= CX - CX
skipping b= CX - NX
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS560:CX, <Atom instance> ligcovalent:A:CYS560:OX)]
newQ= [(<Atom instance> ligcovalent:A:CYS560:CX, <Atom instance> ligcovalent:A:CYS560:OX)]
@@@@len(newq)= 1
queue= [(<Atom instance> ligcovalent:A:CYS560:CX, <Atom instance> ligcovalent:A:CYS560:OX)]
 currently queue= CX - OX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS560:CX, <Atom instance> ligcovalent:A:CYS560:OX)]
 processing queue entry:  CX - OX
in wBF with fromAtom= CX + startAtom= OX startAtom.used= 0
wBF: wrote  OX
self.outatom_counter= 19


writing and calling wL with nA= CX - 19
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 20
len( CX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []
 currently queue=
CX : OX : queue= []
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 21


writing and calling wL with nA= CX - 21
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 22
len( CX ).bonds= 1
skipping b= CX - CX
returning queue= []
newQ= []
 currently queue=
CX : CX : queue= []
wrote flex file ligcovalent_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: ligcovalent_flex.pdbqt
wrote rigid file: ligcovalent_rigid.pdbqt
4---done
setting PYTHONHOME environment
setting PYTHONHOME environment
!unable to use ligand.TORSDOF! torsdof always set to ligand.ndihe= 7
5---done
 concat 10 log files... done.
Job finished, good luck!
rm: 无法删除'chimera.com': 没有那个文件或目录
rm: 无法删除'tmp.mol2': 没有那个文件或目录
Done
Processing residue A:CYS733
[start] output filename is: ligcovalent_single.pdb
CHAIN A
Writing output filename: ligcovalent_single.pdb
1---ligcovalent.pdb prepared...
1.5--done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= fixed  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  fixed
merged  0  nonpolar hydrogens
end of base class init
using std outputfilename  fixed.pdbqt
wrote  fixed  to  fixed.pdbqt
2---done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= ligcovalent  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  ligcovalent
merged  21  nonpolar hydrogens
end of base class init
using std outputfilename  ligcovalent.pdbqt
wrote  ligcovalent  to  ligcovalent.pdbqt
3---done
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> fixed:A:CYS733 with 6 MolKit.molecule.Atom]
calling setAutoFlexFields with  fixed:A:CYS733
in setAutoFlexFields with  fixed:A:CYS733
len(rotatables)= 1
returning res.torscount= 1
res.root= CA
ntors= 1
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= fixed_flex.pdbqt
res_total= 1
in writeResidue with  fixed:A:CYS733
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS733:CA, <Atom instance> fixed:A:CYS733:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS733:CA, <Atom instance> fixed:A:CYS733:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS733:N, <Atom instance> fixed:A:CYS733:CA)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3


writing and calling wL with nA= SG - 3
wBF2: wrote  SG
!!!2:calling wL


in writeLevel with  SG  outatom_counter= 4
len( SG ).bonds= 1
skipping b= CB - SG
returning queue= []
newQ= []
 currently queue=
CA : CB : queue= []
wrote flex file fixed_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: fixed_flex.pdbqt
wrote rigid file: fixed_rigid.pdbqt
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> ligcovalent:A:CYS733 with 28 MolKit.molecule.Atom]
calling setAutoFlexFields with  ligcovalent:A:CYS733
in setAutoFlexFields with  ligcovalent:A:CYS733
len(rotatables)= 8
returning res.torscount= 7
res.root= CA
ntors= 7
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= ligcovalent_flex.pdbqt
res_total= 7
in writeResidue with  ligcovalent:A:CYS733
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS733:N, <Atom instance> ligcovalent:A:CYS733:CA)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS733:CA, <Atom instance> ligcovalent:A:CYS733:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS733:CA, <Atom instance> ligcovalent:A:CYS733:CB)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3
 currently queue= CB - SG ,
CA : CB : queue= [(<Atom instance> ligcovalent:A:CYS733:CB, <Atom instance> ligcovalent:A:CYS733:SG)]
 processing queue entry:  CB - SG
in wBF with fromAtom= CB + startAtom= SG startAtom.used= 0
wBF: wrote  SG
self.outatom_counter= 4
 currently queue= SG - CX ,
CB : SG : queue= [(<Atom instance> ligcovalent:A:CYS733:SG, <Atom instance> ligcovalent:A:CYS733:CX)]
 processing queue entry:  SG - CX
in wBF with fromAtom= SG + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 5
 currently queue= CX - CX ,
SG : CX : queue= [(<Atom instance> ligcovalent:A:CYS733:CX, <Atom instance> ligcovalent:A:CYS733:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 6
 currently queue= CX - CX , CX - CX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS733:CX, <Atom instance> ligcovalent:A:CYS733:CX), (<Atom instance> ligcovalent:A:CYS733:CX, <Atom instance> ligcovalent:A:CYS733:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 7


writing and calling wL with nA= NX - 7
wBF2: wrote  NX
!!!2:calling wL


in writeLevel with  NX  outatom_counter= 8
len( NX ).bonds= 3
skipping b= NX - CX
processing b= NX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
processing b= CX - NX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 10
len( CX ).bonds= 2
skipping b= NX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 11
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 12
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 13
len( CX ).bonds= 3
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 14
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 15
len( CX ).bonds= 3
processing b= OX - CX  activeTors= 1
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
CX wL: queue= [(<Atom instance> ligcovalent:A:CYS733:CX, <Atom instance> ligcovalent:A:CYS733:OX)]
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 16
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 17
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS733:CX, <Atom instance> ligcovalent:A:CYS733:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS733:CX, <Atom instance> ligcovalent:A:CYS733:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS733:CX, <Atom instance> ligcovalent:A:CYS733:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS733:CX, <Atom instance> ligcovalent:A:CYS733:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS733:CX, <Atom instance> ligcovalent:A:CYS733:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS733:CX, <Atom instance> ligcovalent:A:CYS733:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS733:CX, <Atom instance> ligcovalent:A:CYS733:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS733:CX, <Atom instance> ligcovalent:A:CYS733:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS733:CX, <Atom instance> ligcovalent:A:CYS733:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS733:CX, <Atom instance> ligcovalent:A:CYS733:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS733:CX, <Atom instance> ligcovalent:A:CYS733:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS733:CX, <Atom instance> ligcovalent:A:CYS733:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 17
len( CX ).bonds= 3
skipping b= CX - CX
skipping b= CX - CX
skipping b= CX - NX
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS733:CX, <Atom instance> ligcovalent:A:CYS733:OX)]
newQ= [(<Atom instance> ligcovalent:A:CYS733:CX, <Atom instance> ligcovalent:A:CYS733:OX)]
@@@@len(newq)= 1
queue= [(<Atom instance> ligcovalent:A:CYS733:CX, <Atom instance> ligcovalent:A:CYS733:OX)]


writing and calling wL with nA= OX - 17
wBF2: wrote  OX
!!!2:calling wL


in writeLevel with  OX  outatom_counter= 18
len( OX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []
 currently queue= CX - OX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS733:CX, <Atom instance> ligcovalent:A:CYS733:OX)]
 processing queue entry:  CX - OX
in wBF with fromAtom= CX + startAtom= OX startAtom.used= 0
wBF: wrote  OX
self.outatom_counter= 19


writing and calling wL with nA= CX - 19
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 20
len( CX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []
 currently queue=
CX : OX : queue= []
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 21


writing and calling wL with nA= CX - 21
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 22
len( CX ).bonds= 1
skipping b= CX - CX
returning queue= []
newQ= []
 currently queue=
CX : CX : queue= []
wrote flex file ligcovalent_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: ligcovalent_flex.pdbqt
wrote rigid file: ligcovalent_rigid.pdbqt
4---done
setting PYTHONHOME environment
setting PYTHONHOME environment
!unable to use ligand.TORSDOF! torsdof always set to ligand.ndihe= 7
5---done
 concat 10 log files... done.
Job finished, good luck!
rm: 无法删除'chimera.com': 没有那个文件或目录
rm: 无法删除'tmp.mol2': 没有那个文件或目录
Done
Processing residue A:CYS110
[start] output filename is: ligcovalent_single.pdb
CHAIN A
Writing output filename: ligcovalent_single.pdb
1---ligcovalent.pdb prepared...
1.5--done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= fixed  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  fixed
merged  0  nonpolar hydrogens
end of base class init
using std outputfilename  fixed.pdbqt
wrote  fixed  to  fixed.pdbqt
2---done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= ligcovalent  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  ligcovalent
merged  21  nonpolar hydrogens
end of base class init
using std outputfilename  ligcovalent.pdbqt
wrote  ligcovalent  to  ligcovalent.pdbqt
3---done
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> fixed:A:CYS110 with 6 MolKit.molecule.Atom]
calling setAutoFlexFields with  fixed:A:CYS110
in setAutoFlexFields with  fixed:A:CYS110
len(rotatables)= 1
returning res.torscount= 1
res.root= CA
ntors= 1
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= fixed_flex.pdbqt
res_total= 1
in writeResidue with  fixed:A:CYS110
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS110:N, <Atom instance> fixed:A:CYS110:CA)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS110:CA, <Atom instance> fixed:A:CYS110:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS110:CA, <Atom instance> fixed:A:CYS110:CB)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3


writing and calling wL with nA= SG - 3
wBF2: wrote  SG
!!!2:calling wL


in writeLevel with  SG  outatom_counter= 4
len( SG ).bonds= 1
skipping b= CB - SG
returning queue= []
newQ= []
 currently queue=
CA : CB : queue= []
wrote flex file fixed_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: fixed_flex.pdbqt
wrote rigid file: fixed_rigid.pdbqt
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> ligcovalent:A:CYS110 with 28 MolKit.molecule.Atom]
calling setAutoFlexFields with  ligcovalent:A:CYS110
in setAutoFlexFields with  ligcovalent:A:CYS110
len(rotatables)= 8
returning res.torscount= 7
res.root= CA
ntors= 7
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= ligcovalent_flex.pdbqt
res_total= 7
in writeResidue with  ligcovalent:A:CYS110
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS110:N, <Atom instance> ligcovalent:A:CYS110:CA)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS110:CA, <Atom instance> ligcovalent:A:CYS110:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS110:CA, <Atom instance> ligcovalent:A:CYS110:CB)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3
 currently queue= CB - SG ,
CA : CB : queue= [(<Atom instance> ligcovalent:A:CYS110:CB, <Atom instance> ligcovalent:A:CYS110:SG)]
 processing queue entry:  CB - SG
in wBF with fromAtom= CB + startAtom= SG startAtom.used= 0
wBF: wrote  SG
self.outatom_counter= 4
 currently queue= SG - CX ,
CB : SG : queue= [(<Atom instance> ligcovalent:A:CYS110:SG, <Atom instance> ligcovalent:A:CYS110:CX)]
 processing queue entry:  SG - CX
in wBF with fromAtom= SG + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 5
 currently queue= CX - CX ,
SG : CX : queue= [(<Atom instance> ligcovalent:A:CYS110:CX, <Atom instance> ligcovalent:A:CYS110:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 6
 currently queue= CX - CX , CX - CX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS110:CX, <Atom instance> ligcovalent:A:CYS110:CX), (<Atom instance> ligcovalent:A:CYS110:CX, <Atom instance> ligcovalent:A:CYS110:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 7


writing and calling wL with nA= OX - 7
wBF2: wrote  OX
!!!2:calling wL


in writeLevel with  OX  outatom_counter= 8
len( OX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []


writing and calling wL with nA= NX - 8
wBF2: wrote  NX
!!!2:calling wL


in writeLevel with  NX  outatom_counter= 9
len( NX ).bonds= 3
processing b= CX - NX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= NX - CX
processing b= NX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 11
len( CX ).bonds= 3
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - NX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 13
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 14
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 15
len( CX ).bonds= 3
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
processing b= OX - CX  activeTors= 1
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
CX wL: queue= [(<Atom instance> ligcovalent:A:CYS110:CX, <Atom instance> ligcovalent:A:CYS110:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 16
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS110:CX, <Atom instance> ligcovalent:A:CYS110:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS110:CX, <Atom instance> ligcovalent:A:CYS110:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS110:CX, <Atom instance> ligcovalent:A:CYS110:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS110:CX, <Atom instance> ligcovalent:A:CYS110:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS110:CX, <Atom instance> ligcovalent:A:CYS110:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS110:CX, <Atom instance> ligcovalent:A:CYS110:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 16
len( CX ).bonds= 3
skipping b= CX - CX
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 17
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 18
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= []
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS110:CX, <Atom instance> ligcovalent:A:CYS110:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS110:CX, <Atom instance> ligcovalent:A:CYS110:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 18
len( CX ).bonds= 2
skipping b= NX - CX
skipping b= CX - CX
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS110:CX, <Atom instance> ligcovalent:A:CYS110:OX)]
newQ= [(<Atom instance> ligcovalent:A:CYS110:CX, <Atom instance> ligcovalent:A:CYS110:OX)]
@@@@len(newq)= 1
queue= [(<Atom instance> ligcovalent:A:CYS110:CX, <Atom instance> ligcovalent:A:CYS110:OX)]
 currently queue= CX - OX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS110:CX, <Atom instance> ligcovalent:A:CYS110:OX)]
 processing queue entry:  CX - OX
in wBF with fromAtom= CX + startAtom= OX startAtom.used= 0
wBF: wrote  OX
self.outatom_counter= 19


writing and calling wL with nA= CX - 19
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 20
len( CX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []
 currently queue=
CX : OX : queue= []
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 21


writing and calling wL with nA= CX - 21
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 22
len( CX ).bonds= 1
skipping b= CX - CX
returning queue= []
newQ= []
 currently queue=
CX : CX : queue= []
wrote flex file ligcovalent_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: ligcovalent_flex.pdbqt
wrote rigid file: ligcovalent_rigid.pdbqt
4---done
setting PYTHONHOME environment
setting PYTHONHOME environment
!unable to use ligand.TORSDOF! torsdof always set to ligand.ndihe= 7
5---done
 concat 10 log files... done.
Job finished, good luck!
rm: 无法删除'chimera.com': 没有那个文件或目录
rm: 无法删除'tmp.mol2': 没有那个文件或目录
Done
Processing residue A:CYS473
[start] output filename is: ligcovalent_single.pdb
CHAIN A
Writing output filename: ligcovalent_single.pdb
1---ligcovalent.pdb prepared...
1.5--done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= fixed  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  fixed
merged  0  nonpolar hydrogens
end of base class init
using std outputfilename  fixed.pdbqt
wrote  fixed  to  fixed.pdbqt
2---done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= ligcovalent  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  ligcovalent
merged  21  nonpolar hydrogens
end of base class init
using std outputfilename  ligcovalent.pdbqt
wrote  ligcovalent  to  ligcovalent.pdbqt
3---done
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> fixed:A:CYS473 with 6 MolKit.molecule.Atom]
calling setAutoFlexFields with  fixed:A:CYS473
in setAutoFlexFields with  fixed:A:CYS473
len(rotatables)= 1
returning res.torscount= 1
res.root= CA
ntors= 1
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= fixed_flex.pdbqt
res_total= 1
in writeResidue with  fixed:A:CYS473
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS473:CA, <Atom instance> fixed:A:CYS473:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS473:CA, <Atom instance> fixed:A:CYS473:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS473:N, <Atom instance> fixed:A:CYS473:CA)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3


writing and calling wL with nA= SG - 3
wBF2: wrote  SG
!!!2:calling wL


in writeLevel with  SG  outatom_counter= 4
len( SG ).bonds= 1
skipping b= CB - SG
returning queue= []
newQ= []
 currently queue=
CA : CB : queue= []
wrote flex file fixed_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: fixed_flex.pdbqt
wrote rigid file: fixed_rigid.pdbqt
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> ligcovalent:A:CYS473 with 28 MolKit.molecule.Atom]
calling setAutoFlexFields with  ligcovalent:A:CYS473
in setAutoFlexFields with  ligcovalent:A:CYS473
len(rotatables)= 8
returning res.torscount= 7
res.root= CA
ntors= 7
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= ligcovalent_flex.pdbqt
res_total= 7
in writeResidue with  ligcovalent:A:CYS473
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS473:N, <Atom instance> ligcovalent:A:CYS473:CA)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS473:CA, <Atom instance> ligcovalent:A:CYS473:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS473:CA, <Atom instance> ligcovalent:A:CYS473:CB)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3
 currently queue= CB - SG ,
CA : CB : queue= [(<Atom instance> ligcovalent:A:CYS473:CB, <Atom instance> ligcovalent:A:CYS473:SG)]
 processing queue entry:  CB - SG
in wBF with fromAtom= CB + startAtom= SG startAtom.used= 0
wBF: wrote  SG
self.outatom_counter= 4
 currently queue= SG - CX ,
CB : SG : queue= [(<Atom instance> ligcovalent:A:CYS473:SG, <Atom instance> ligcovalent:A:CYS473:CX)]
 processing queue entry:  SG - CX
in wBF with fromAtom= SG + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 5
 currently queue= CX - CX ,
SG : CX : queue= [(<Atom instance> ligcovalent:A:CYS473:CX, <Atom instance> ligcovalent:A:CYS473:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 6
 currently queue= CX - CX , CX - CX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS473:CX, <Atom instance> ligcovalent:A:CYS473:CX), (<Atom instance> ligcovalent:A:CYS473:CX, <Atom instance> ligcovalent:A:CYS473:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 7


writing and calling wL with nA= OX - 7
wBF2: wrote  OX
!!!2:calling wL


in writeLevel with  OX  outatom_counter= 8
len( OX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []


writing and calling wL with nA= NX - 8
wBF2: wrote  NX
!!!2:calling wL


in writeLevel with  NX  outatom_counter= 9
len( NX ).bonds= 3
skipping b= NX - CX
processing b= NX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
processing b= CX - NX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 11
len( CX ).bonds= 2
skipping b= NX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 12
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 13
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 14
len( CX ).bonds= 3
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 15
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 16
len( CX ).bonds= 3
processing b= OX - CX  activeTors= 1
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
CX wL: queue= [(<Atom instance> ligcovalent:A:CYS473:CX, <Atom instance> ligcovalent:A:CYS473:OX)]
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 17
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 18
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS473:CX, <Atom instance> ligcovalent:A:CYS473:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS473:CX, <Atom instance> ligcovalent:A:CYS473:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS473:CX, <Atom instance> ligcovalent:A:CYS473:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS473:CX, <Atom instance> ligcovalent:A:CYS473:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS473:CX, <Atom instance> ligcovalent:A:CYS473:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS473:CX, <Atom instance> ligcovalent:A:CYS473:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS473:CX, <Atom instance> ligcovalent:A:CYS473:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS473:CX, <Atom instance> ligcovalent:A:CYS473:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS473:CX, <Atom instance> ligcovalent:A:CYS473:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS473:CX, <Atom instance> ligcovalent:A:CYS473:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS473:CX, <Atom instance> ligcovalent:A:CYS473:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS473:CX, <Atom instance> ligcovalent:A:CYS473:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 18
len( CX ).bonds= 3
skipping b= CX - CX
skipping b= CX - CX
skipping b= CX - NX
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS473:CX, <Atom instance> ligcovalent:A:CYS473:OX)]
newQ= [(<Atom instance> ligcovalent:A:CYS473:CX, <Atom instance> ligcovalent:A:CYS473:OX)]
@@@@len(newq)= 1
queue= [(<Atom instance> ligcovalent:A:CYS473:CX, <Atom instance> ligcovalent:A:CYS473:OX)]
 currently queue= CX - OX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS473:CX, <Atom instance> ligcovalent:A:CYS473:OX)]
 processing queue entry:  CX - OX
in wBF with fromAtom= CX + startAtom= OX startAtom.used= 0
wBF: wrote  OX
self.outatom_counter= 19


writing and calling wL with nA= CX - 19
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 20
len( CX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []
 currently queue=
CX : OX : queue= []
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 21


writing and calling wL with nA= CX - 21
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 22
len( CX ).bonds= 1
skipping b= CX - CX
returning queue= []
newQ= []
 currently queue=
CX : CX : queue= []
wrote flex file ligcovalent_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: ligcovalent_flex.pdbqt
wrote rigid file: ligcovalent_rigid.pdbqt
4---done
setting PYTHONHOME environment
setting PYTHONHOME environment
!unable to use ligand.TORSDOF! torsdof always set to ligand.ndihe= 7
5---done
 concat 10 log files... done.
Job finished, good luck!
rm: 无法删除'chimera.com': 没有那个文件或目录
rm: 无法删除'tmp.mol2': 没有那个文件或目录
Done
Processing residue A:CYS367
[start] output filename is: ligcovalent_single.pdb
CHAIN A
Writing output filename: ligcovalent_single.pdb
1---ligcovalent.pdb prepared...
1.5--done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= fixed  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  fixed
merged  0  nonpolar hydrogens
end of base class init
using std outputfilename  fixed.pdbqt
wrote  fixed  to  fixed.pdbqt
2---done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= ligcovalent  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  ligcovalent
merged  21  nonpolar hydrogens
end of base class init
using std outputfilename  ligcovalent.pdbqt
wrote  ligcovalent  to  ligcovalent.pdbqt
3---done
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> fixed:A:CYS367 with 6 MolKit.molecule.Atom]
calling setAutoFlexFields with  fixed:A:CYS367
in setAutoFlexFields with  fixed:A:CYS367
len(rotatables)= 1
returning res.torscount= 1
res.root= CA
ntors= 1
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= fixed_flex.pdbqt
res_total= 1
in writeResidue with  fixed:A:CYS367
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS367:CA, <Atom instance> fixed:A:CYS367:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS367:CA, <Atom instance> fixed:A:CYS367:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS367:N, <Atom instance> fixed:A:CYS367:CA)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3


writing and calling wL with nA= SG - 3
wBF2: wrote  SG
!!!2:calling wL


in writeLevel with  SG  outatom_counter= 4
len( SG ).bonds= 1
skipping b= CB - SG
returning queue= []
newQ= []
 currently queue=
CA : CB : queue= []
wrote flex file fixed_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: fixed_flex.pdbqt
wrote rigid file: fixed_rigid.pdbqt
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> ligcovalent:A:CYS367 with 28 MolKit.molecule.Atom]
calling setAutoFlexFields with  ligcovalent:A:CYS367
in setAutoFlexFields with  ligcovalent:A:CYS367
len(rotatables)= 8
returning res.torscount= 7
res.root= CA
ntors= 7
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= ligcovalent_flex.pdbqt
res_total= 7
in writeResidue with  ligcovalent:A:CYS367
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS367:CA, <Atom instance> ligcovalent:A:CYS367:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS367:CA, <Atom instance> ligcovalent:A:CYS367:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS367:N, <Atom instance> ligcovalent:A:CYS367:CA)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3
 currently queue= CB - SG ,
CA : CB : queue= [(<Atom instance> ligcovalent:A:CYS367:CB, <Atom instance> ligcovalent:A:CYS367:SG)]
 processing queue entry:  CB - SG
in wBF with fromAtom= CB + startAtom= SG startAtom.used= 0
wBF: wrote  SG
self.outatom_counter= 4
 currently queue= SG - CX ,
CB : SG : queue= [(<Atom instance> ligcovalent:A:CYS367:SG, <Atom instance> ligcovalent:A:CYS367:CX)]
 processing queue entry:  SG - CX
in wBF with fromAtom= SG + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 5
 currently queue= CX - CX ,
SG : CX : queue= [(<Atom instance> ligcovalent:A:CYS367:CX, <Atom instance> ligcovalent:A:CYS367:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 6
 currently queue= CX - CX , CX - CX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS367:CX, <Atom instance> ligcovalent:A:CYS367:CX), (<Atom instance> ligcovalent:A:CYS367:CX, <Atom instance> ligcovalent:A:CYS367:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 7


writing and calling wL with nA= CX - 7
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 8
len( CX ).bonds= 1
skipping b= CX - CX
returning queue= []
newQ= []
 currently queue=
CX : CX : queue= []
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 9


writing and calling wL with nA= NX - 9
wBF2: wrote  NX
!!!2:calling wL


in writeLevel with  NX  outatom_counter= 10
len( NX ).bonds= 3
processing b= NX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= NX - CX
processing b= CX - NX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 12
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= NX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 13
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 14
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 15
len( CX ).bonds= 3
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 16
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 17
len( CX ).bonds= 3
processing b= OX - CX  activeTors= 1
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
CX wL: queue= [(<Atom instance> ligcovalent:A:CYS367:CX, <Atom instance> ligcovalent:A:CYS367:OX)]
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 18
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 19
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS367:CX, <Atom instance> ligcovalent:A:CYS367:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS367:CX, <Atom instance> ligcovalent:A:CYS367:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS367:CX, <Atom instance> ligcovalent:A:CYS367:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS367:CX, <Atom instance> ligcovalent:A:CYS367:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS367:CX, <Atom instance> ligcovalent:A:CYS367:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS367:CX, <Atom instance> ligcovalent:A:CYS367:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS367:CX, <Atom instance> ligcovalent:A:CYS367:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS367:CX, <Atom instance> ligcovalent:A:CYS367:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS367:CX, <Atom instance> ligcovalent:A:CYS367:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS367:CX, <Atom instance> ligcovalent:A:CYS367:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS367:CX, <Atom instance> ligcovalent:A:CYS367:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS367:CX, <Atom instance> ligcovalent:A:CYS367:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 19
len( CX ).bonds= 3
skipping b= CX - CX
skipping b= CX - NX
skipping b= CX - CX
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS367:CX, <Atom instance> ligcovalent:A:CYS367:OX)]
newQ= [(<Atom instance> ligcovalent:A:CYS367:CX, <Atom instance> ligcovalent:A:CYS367:OX)]
@@@@len(newq)= 1
queue= [(<Atom instance> ligcovalent:A:CYS367:CX, <Atom instance> ligcovalent:A:CYS367:OX)]


writing and calling wL with nA= OX - 19
wBF2: wrote  OX
!!!2:calling wL


in writeLevel with  OX  outatom_counter= 20
len( OX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []
 currently queue= CX - OX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS367:CX, <Atom instance> ligcovalent:A:CYS367:OX)]
 processing queue entry:  CX - OX
in wBF with fromAtom= CX + startAtom= OX startAtom.used= 0
wBF: wrote  OX
self.outatom_counter= 21


writing and calling wL with nA= CX - 21
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 22
len( CX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []
 currently queue=
CX : OX : queue= []
wrote flex file ligcovalent_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: ligcovalent_flex.pdbqt
wrote rigid file: ligcovalent_rigid.pdbqt
4---done
setting PYTHONHOME environment
setting PYTHONHOME environment
!unable to use ligand.TORSDOF! torsdof always set to ligand.ndihe= 7
5---done
 concat 10 log files... done.
Job finished, good luck!
rm: 无法删除'chimera.com': 没有那个文件或目录
rm: 无法删除'tmp.mol2': 没有那个文件或目录
Done
Processing residue A:CYS470
[start] output filename is: ligcovalent_single.pdb
CHAIN A
Writing output filename: ligcovalent_single.pdb
1---ligcovalent.pdb prepared...
1.5--done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= fixed  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  fixed
merged  0  nonpolar hydrogens
end of base class init
using std outputfilename  fixed.pdbqt
wrote  fixed  to  fixed.pdbqt
2---done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= ligcovalent  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  ligcovalent
merged  21  nonpolar hydrogens
end of base class init
using std outputfilename  ligcovalent.pdbqt
wrote  ligcovalent  to  ligcovalent.pdbqt
3---done
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> fixed:A:CYS470 with 6 MolKit.molecule.Atom]
calling setAutoFlexFields with  fixed:A:CYS470
in setAutoFlexFields with  fixed:A:CYS470
len(rotatables)= 1
returning res.torscount= 1
res.root= CA
ntors= 1
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= fixed_flex.pdbqt
res_total= 1
in writeResidue with  fixed:A:CYS470
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS470:N, <Atom instance> fixed:A:CYS470:CA)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS470:CA, <Atom instance> fixed:A:CYS470:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS470:CA, <Atom instance> fixed:A:CYS470:C)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3


writing and calling wL with nA= SG - 3
wBF2: wrote  SG
!!!2:calling wL


in writeLevel with  SG  outatom_counter= 4
len( SG ).bonds= 1
skipping b= CB - SG
returning queue= []
newQ= []
 currently queue=
CA : CB : queue= []
wrote flex file fixed_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: fixed_flex.pdbqt
wrote rigid file: fixed_rigid.pdbqt
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> ligcovalent:A:CYS470 with 28 MolKit.molecule.Atom]
calling setAutoFlexFields with  ligcovalent:A:CYS470
in setAutoFlexFields with  ligcovalent:A:CYS470
len(rotatables)= 8
returning res.torscount= 7
res.root= CA
ntors= 7
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= ligcovalent_flex.pdbqt
res_total= 7
in writeResidue with  ligcovalent:A:CYS470
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS470:CA, <Atom instance> ligcovalent:A:CYS470:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS470:CA, <Atom instance> ligcovalent:A:CYS470:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS470:N, <Atom instance> ligcovalent:A:CYS470:CA)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3
 currently queue= CB - SG ,
CA : CB : queue= [(<Atom instance> ligcovalent:A:CYS470:CB, <Atom instance> ligcovalent:A:CYS470:SG)]
 processing queue entry:  CB - SG
in wBF with fromAtom= CB + startAtom= SG startAtom.used= 0
wBF: wrote  SG
self.outatom_counter= 4
 currently queue= SG - CX ,
CB : SG : queue= [(<Atom instance> ligcovalent:A:CYS470:SG, <Atom instance> ligcovalent:A:CYS470:CX)]
 processing queue entry:  SG - CX
in wBF with fromAtom= SG + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 5
 currently queue= CX - CX ,
SG : CX : queue= [(<Atom instance> ligcovalent:A:CYS470:CX, <Atom instance> ligcovalent:A:CYS470:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 6
 currently queue= CX - CX , CX - CX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS470:CX, <Atom instance> ligcovalent:A:CYS470:CX), (<Atom instance> ligcovalent:A:CYS470:CX, <Atom instance> ligcovalent:A:CYS470:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 7


writing and calling wL with nA= OX - 7
wBF2: wrote  OX
!!!2:calling wL


in writeLevel with  OX  outatom_counter= 8
len( OX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []


writing and calling wL with nA= NX - 8
wBF2: wrote  NX
!!!2:calling wL


in writeLevel with  NX  outatom_counter= 9
len( NX ).bonds= 3
skipping b= NX - CX
processing b= NX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
processing b= CX - NX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 11
len( CX ).bonds= 2
skipping b= NX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 12
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 13
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 14
len( CX ).bonds= 3
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 15
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 16
len( CX ).bonds= 3
processing b= OX - CX  activeTors= 1
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
CX wL: queue= [(<Atom instance> ligcovalent:A:CYS470:CX, <Atom instance> ligcovalent:A:CYS470:OX)]
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 17
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 18
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS470:CX, <Atom instance> ligcovalent:A:CYS470:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS470:CX, <Atom instance> ligcovalent:A:CYS470:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS470:CX, <Atom instance> ligcovalent:A:CYS470:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS470:CX, <Atom instance> ligcovalent:A:CYS470:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS470:CX, <Atom instance> ligcovalent:A:CYS470:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS470:CX, <Atom instance> ligcovalent:A:CYS470:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS470:CX, <Atom instance> ligcovalent:A:CYS470:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS470:CX, <Atom instance> ligcovalent:A:CYS470:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS470:CX, <Atom instance> ligcovalent:A:CYS470:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS470:CX, <Atom instance> ligcovalent:A:CYS470:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS470:CX, <Atom instance> ligcovalent:A:CYS470:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS470:CX, <Atom instance> ligcovalent:A:CYS470:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 18
len( CX ).bonds= 3
skipping b= CX - CX
skipping b= CX - CX
skipping b= CX - NX
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS470:CX, <Atom instance> ligcovalent:A:CYS470:OX)]
newQ= [(<Atom instance> ligcovalent:A:CYS470:CX, <Atom instance> ligcovalent:A:CYS470:OX)]
@@@@len(newq)= 1
queue= [(<Atom instance> ligcovalent:A:CYS470:CX, <Atom instance> ligcovalent:A:CYS470:OX)]
 currently queue= CX - OX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS470:CX, <Atom instance> ligcovalent:A:CYS470:OX)]
 processing queue entry:  CX - OX
in wBF with fromAtom= CX + startAtom= OX startAtom.used= 0
wBF: wrote  OX
self.outatom_counter= 19


writing and calling wL with nA= CX - 19
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 20
len( CX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []
 currently queue=
CX : OX : queue= []
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 21


writing and calling wL with nA= CX - 21
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 22
len( CX ).bonds= 1
skipping b= CX - CX
returning queue= []
newQ= []
 currently queue=
CX : CX : queue= []
wrote flex file ligcovalent_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: ligcovalent_flex.pdbqt
wrote rigid file: ligcovalent_rigid.pdbqt
4---done
setting PYTHONHOME environment
setting PYTHONHOME environment
!unable to use ligand.TORSDOF! torsdof always set to ligand.ndihe= 7
5---done
 concat 10 log files... done.
Job finished, good luck!
rm: 无法删除'chimera.com': 没有那个文件或目录
rm: 无法删除'tmp.mol2': 没有那个文件或目录
Done
Processing residue A:CYS361
[start] output filename is: ligcovalent_single.pdb
CHAIN A
Writing output filename: ligcovalent_single.pdb
1---ligcovalent.pdb prepared...
1.5--done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= fixed  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  fixed
merged  0  nonpolar hydrogens
end of base class init
using std outputfilename  fixed.pdbqt
wrote  fixed  to  fixed.pdbqt
2---done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= ligcovalent  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  ligcovalent
merged  21  nonpolar hydrogens
end of base class init
using std outputfilename  ligcovalent.pdbqt
wrote  ligcovalent  to  ligcovalent.pdbqt
3---done
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> fixed:A:CYS361 with 6 MolKit.molecule.Atom]
calling setAutoFlexFields with  fixed:A:CYS361
in setAutoFlexFields with  fixed:A:CYS361
len(rotatables)= 1
returning res.torscount= 1
res.root= CA
ntors= 1
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= fixed_flex.pdbqt
res_total= 1
in writeResidue with  fixed:A:CYS361
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS361:CA, <Atom instance> fixed:A:CYS361:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS361:CA, <Atom instance> fixed:A:CYS361:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS361:N, <Atom instance> fixed:A:CYS361:CA)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3


writing and calling wL with nA= SG - 3
wBF2: wrote  SG
!!!2:calling wL


in writeLevel with  SG  outatom_counter= 4
len( SG ).bonds= 1
skipping b= CB - SG
returning queue= []
newQ= []
 currently queue=
CA : CB : queue= []
wrote flex file fixed_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: fixed_flex.pdbqt
wrote rigid file: fixed_rigid.pdbqt
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> ligcovalent:A:CYS361 with 28 MolKit.molecule.Atom]
calling setAutoFlexFields with  ligcovalent:A:CYS361
in setAutoFlexFields with  ligcovalent:A:CYS361
len(rotatables)= 8
returning res.torscount= 7
res.root= CA
ntors= 7
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= ligcovalent_flex.pdbqt
res_total= 7
in writeResidue with  ligcovalent:A:CYS361
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS361:N, <Atom instance> ligcovalent:A:CYS361:CA)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS361:CA, <Atom instance> ligcovalent:A:CYS361:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS361:CA, <Atom instance> ligcovalent:A:CYS361:C)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3
 currently queue= CB - SG ,
CA : CB : queue= [(<Atom instance> ligcovalent:A:CYS361:CB, <Atom instance> ligcovalent:A:CYS361:SG)]
 processing queue entry:  CB - SG
in wBF with fromAtom= CB + startAtom= SG startAtom.used= 0
wBF: wrote  SG
self.outatom_counter= 4
 currently queue= SG - CX ,
CB : SG : queue= [(<Atom instance> ligcovalent:A:CYS361:SG, <Atom instance> ligcovalent:A:CYS361:CX)]
 processing queue entry:  SG - CX
in wBF with fromAtom= SG + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 5
 currently queue= CX - CX ,
SG : CX : queue= [(<Atom instance> ligcovalent:A:CYS361:CX, <Atom instance> ligcovalent:A:CYS361:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 6
 currently queue= CX - CX , CX - CX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS361:CX, <Atom instance> ligcovalent:A:CYS361:CX), (<Atom instance> ligcovalent:A:CYS361:CX, <Atom instance> ligcovalent:A:CYS361:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 7


writing and calling wL with nA= CX - 7
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 8
len( CX ).bonds= 1
skipping b= CX - CX
returning queue= []
newQ= []
 currently queue=
CX : CX : queue= []
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 9


writing and calling wL with nA= NX - 9
wBF2: wrote  NX
!!!2:calling wL


in writeLevel with  NX  outatom_counter= 10
len( NX ).bonds= 3
processing b= CX - NX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= NX - CX
processing b= NX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 12
len( CX ).bonds= 3
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - NX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 14
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 15
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 16
len( CX ).bonds= 3
processing b= OX - CX  activeTors= 1
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
CX wL: queue= [(<Atom instance> ligcovalent:A:CYS361:CX, <Atom instance> ligcovalent:A:CYS361:OX)]
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 17
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS361:CX, <Atom instance> ligcovalent:A:CYS361:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS361:CX, <Atom instance> ligcovalent:A:CYS361:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS361:CX, <Atom instance> ligcovalent:A:CYS361:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS361:CX, <Atom instance> ligcovalent:A:CYS361:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS361:CX, <Atom instance> ligcovalent:A:CYS361:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS361:CX, <Atom instance> ligcovalent:A:CYS361:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 17
len( CX ).bonds= 3
skipping b= CX - CX
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 18
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 19
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= []
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS361:CX, <Atom instance> ligcovalent:A:CYS361:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS361:CX, <Atom instance> ligcovalent:A:CYS361:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 19
len( CX ).bonds= 2
skipping b= NX - CX
skipping b= CX - CX
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS361:CX, <Atom instance> ligcovalent:A:CYS361:OX)]
newQ= [(<Atom instance> ligcovalent:A:CYS361:CX, <Atom instance> ligcovalent:A:CYS361:OX)]
@@@@len(newq)= 1
queue= [(<Atom instance> ligcovalent:A:CYS361:CX, <Atom instance> ligcovalent:A:CYS361:OX)]


writing and calling wL with nA= OX - 19
wBF2: wrote  OX
!!!2:calling wL


in writeLevel with  OX  outatom_counter= 20
len( OX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []
 currently queue= CX - OX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS361:CX, <Atom instance> ligcovalent:A:CYS361:OX)]
 processing queue entry:  CX - OX
in wBF with fromAtom= CX + startAtom= OX startAtom.used= 0
wBF: wrote  OX
self.outatom_counter= 21


writing and calling wL with nA= CX - 21
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 22
len( CX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []
 currently queue=
CX : OX : queue= []
wrote flex file ligcovalent_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: ligcovalent_flex.pdbqt
wrote rigid file: ligcovalent_rigid.pdbqt
4---done
setting PYTHONHOME environment
setting PYTHONHOME environment
!unable to use ligand.TORSDOF! torsdof always set to ligand.ndihe= 7
5---done
 concat 10 log files... done.
Job finished, good luck!
rm: 无法删除'chimera.com': 没有那个文件或目录
rm: 无法删除'tmp.mol2': 没有那个文件或目录
Done
Processing residue A:CYS134
[start] output filename is: ligcovalent_single.pdb
CHAIN A
Writing output filename: ligcovalent_single.pdb
1---ligcovalent.pdb prepared...
1.5--done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= fixed  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  fixed
merged  0  nonpolar hydrogens
end of base class init
using std outputfilename  fixed.pdbqt
wrote  fixed  to  fixed.pdbqt
2---done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= ligcovalent  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  ligcovalent
merged  21  nonpolar hydrogens
end of base class init
using std outputfilename  ligcovalent.pdbqt
wrote  ligcovalent  to  ligcovalent.pdbqt
3---done
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> fixed:A:CYS134 with 6 MolKit.molecule.Atom]
calling setAutoFlexFields with  fixed:A:CYS134
in setAutoFlexFields with  fixed:A:CYS134
len(rotatables)= 1
returning res.torscount= 1
res.root= CA
ntors= 1
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= fixed_flex.pdbqt
res_total= 1
in writeResidue with  fixed:A:CYS134
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS134:N, <Atom instance> fixed:A:CYS134:CA)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS134:CA, <Atom instance> fixed:A:CYS134:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS134:CA, <Atom instance> fixed:A:CYS134:CB)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3


writing and calling wL with nA= SG - 3
wBF2: wrote  SG
!!!2:calling wL


in writeLevel with  SG  outatom_counter= 4
len( SG ).bonds= 1
skipping b= CB - SG
returning queue= []
newQ= []
 currently queue=
CA : CB : queue= []
wrote flex file fixed_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: fixed_flex.pdbqt
wrote rigid file: fixed_rigid.pdbqt
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> ligcovalent:A:CYS134 with 28 MolKit.molecule.Atom]
calling setAutoFlexFields with  ligcovalent:A:CYS134
in setAutoFlexFields with  ligcovalent:A:CYS134
len(rotatables)= 8
returning res.torscount= 7
res.root= CA
ntors= 7
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= ligcovalent_flex.pdbqt
res_total= 7
in writeResidue with  ligcovalent:A:CYS134
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS134:CA, <Atom instance> ligcovalent:A:CYS134:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS134:CA, <Atom instance> ligcovalent:A:CYS134:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS134:N, <Atom instance> ligcovalent:A:CYS134:CA)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3
 currently queue= CB - SG ,
CA : CB : queue= [(<Atom instance> ligcovalent:A:CYS134:CB, <Atom instance> ligcovalent:A:CYS134:SG)]
 processing queue entry:  CB - SG
in wBF with fromAtom= CB + startAtom= SG startAtom.used= 0
wBF: wrote  SG
self.outatom_counter= 4
 currently queue= SG - CX ,
CB : SG : queue= [(<Atom instance> ligcovalent:A:CYS134:SG, <Atom instance> ligcovalent:A:CYS134:CX)]
 processing queue entry:  SG - CX
in wBF with fromAtom= SG + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 5
 currently queue= CX - CX ,
SG : CX : queue= [(<Atom instance> ligcovalent:A:CYS134:CX, <Atom instance> ligcovalent:A:CYS134:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 6
 currently queue= CX - CX , CX - CX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS134:CX, <Atom instance> ligcovalent:A:CYS134:CX), (<Atom instance> ligcovalent:A:CYS134:CX, <Atom instance> ligcovalent:A:CYS134:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 7


writing and calling wL with nA= OX - 7
wBF2: wrote  OX
!!!2:calling wL


in writeLevel with  OX  outatom_counter= 8
len( OX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []


writing and calling wL with nA= NX - 8
wBF2: wrote  NX
!!!2:calling wL


in writeLevel with  NX  outatom_counter= 9
len( NX ).bonds= 3
processing b= NX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= NX - CX
processing b= CX - NX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 11
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= NX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 12
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 13
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 14
len( CX ).bonds= 3
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 15
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 16
len( CX ).bonds= 3
processing b= OX - CX  activeTors= 1
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
CX wL: queue= [(<Atom instance> ligcovalent:A:CYS134:CX, <Atom instance> ligcovalent:A:CYS134:OX)]
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 17
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 18
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS134:CX, <Atom instance> ligcovalent:A:CYS134:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS134:CX, <Atom instance> ligcovalent:A:CYS134:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS134:CX, <Atom instance> ligcovalent:A:CYS134:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS134:CX, <Atom instance> ligcovalent:A:CYS134:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS134:CX, <Atom instance> ligcovalent:A:CYS134:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS134:CX, <Atom instance> ligcovalent:A:CYS134:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS134:CX, <Atom instance> ligcovalent:A:CYS134:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS134:CX, <Atom instance> ligcovalent:A:CYS134:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS134:CX, <Atom instance> ligcovalent:A:CYS134:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS134:CX, <Atom instance> ligcovalent:A:CYS134:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS134:CX, <Atom instance> ligcovalent:A:CYS134:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS134:CX, <Atom instance> ligcovalent:A:CYS134:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 18
len( CX ).bonds= 3
skipping b= CX - CX
skipping b= CX - NX
skipping b= CX - CX
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS134:CX, <Atom instance> ligcovalent:A:CYS134:OX)]
newQ= [(<Atom instance> ligcovalent:A:CYS134:CX, <Atom instance> ligcovalent:A:CYS134:OX)]
@@@@len(newq)= 1
queue= [(<Atom instance> ligcovalent:A:CYS134:CX, <Atom instance> ligcovalent:A:CYS134:OX)]
 currently queue= CX - OX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS134:CX, <Atom instance> ligcovalent:A:CYS134:OX)]
 processing queue entry:  CX - OX
in wBF with fromAtom= CX + startAtom= OX startAtom.used= 0
wBF: wrote  OX
self.outatom_counter= 19


writing and calling wL with nA= CX - 19
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 20
len( CX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []
 currently queue=
CX : OX : queue= []
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 21


writing and calling wL with nA= CX - 21
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 22
len( CX ).bonds= 1
skipping b= CX - CX
returning queue= []
newQ= []
 currently queue=
CX : CX : queue= []
wrote flex file ligcovalent_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: ligcovalent_flex.pdbqt
wrote rigid file: ligcovalent_rigid.pdbqt
4---done
setting PYTHONHOME environment
setting PYTHONHOME environment
!unable to use ligand.TORSDOF! torsdof always set to ligand.ndihe= 7
5---done
 concat 10 log files... done.
Job finished, good luck!
rm: 无法删除'chimera.com': 没有那个文件或目录
rm: 无法删除'tmp.mol2': 没有那个文件或目录
Done
Processing residue A:CYS272
[start] output filename is: ligcovalent_single.pdb
CHAIN A
Writing output filename: ligcovalent_single.pdb
1---ligcovalent.pdb prepared...
1.5--done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= fixed  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  fixed
merged  0  nonpolar hydrogens
end of base class init
using std outputfilename  fixed.pdbqt
wrote  fixed  to  fixed.pdbqt
2---done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= ligcovalent  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  ligcovalent
merged  21  nonpolar hydrogens
end of base class init
using std outputfilename  ligcovalent.pdbqt
wrote  ligcovalent  to  ligcovalent.pdbqt
3---done
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> fixed:A:CYS272 with 6 MolKit.molecule.Atom]
calling setAutoFlexFields with  fixed:A:CYS272
in setAutoFlexFields with  fixed:A:CYS272
len(rotatables)= 1
returning res.torscount= 1
res.root= CA
ntors= 1
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= fixed_flex.pdbqt
res_total= 1
in writeResidue with  fixed:A:CYS272
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS272:N, <Atom instance> fixed:A:CYS272:CA)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS272:CA, <Atom instance> fixed:A:CYS272:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS272:CA, <Atom instance> fixed:A:CYS272:C)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3


writing and calling wL with nA= SG - 3
wBF2: wrote  SG
!!!2:calling wL


in writeLevel with  SG  outatom_counter= 4
len( SG ).bonds= 1
skipping b= CB - SG
returning queue= []
newQ= []
 currently queue=
CA : CB : queue= []
wrote flex file fixed_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: fixed_flex.pdbqt
wrote rigid file: fixed_rigid.pdbqt
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> ligcovalent:A:CYS272 with 28 MolKit.molecule.Atom]
calling setAutoFlexFields with  ligcovalent:A:CYS272
in setAutoFlexFields with  ligcovalent:A:CYS272
len(rotatables)= 8
returning res.torscount= 7
res.root= CA
ntors= 7
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= ligcovalent_flex.pdbqt
res_total= 7
in writeResidue with  ligcovalent:A:CYS272
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS272:N, <Atom instance> ligcovalent:A:CYS272:CA)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS272:CA, <Atom instance> ligcovalent:A:CYS272:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS272:CA, <Atom instance> ligcovalent:A:CYS272:C)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3
 currently queue= CB - SG ,
CA : CB : queue= [(<Atom instance> ligcovalent:A:CYS272:CB, <Atom instance> ligcovalent:A:CYS272:SG)]
 processing queue entry:  CB - SG
in wBF with fromAtom= CB + startAtom= SG startAtom.used= 0
wBF: wrote  SG
self.outatom_counter= 4
 currently queue= SG - CX ,
CB : SG : queue= [(<Atom instance> ligcovalent:A:CYS272:SG, <Atom instance> ligcovalent:A:CYS272:CX)]
 processing queue entry:  SG - CX
in wBF with fromAtom= SG + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 5
 currently queue= CX - CX ,
SG : CX : queue= [(<Atom instance> ligcovalent:A:CYS272:CX, <Atom instance> ligcovalent:A:CYS272:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 6
 currently queue= CX - CX , CX - CX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS272:CX, <Atom instance> ligcovalent:A:CYS272:CX), (<Atom instance> ligcovalent:A:CYS272:CX, <Atom instance> ligcovalent:A:CYS272:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 7


writing and calling wL with nA= CX - 7
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 8
len( CX ).bonds= 1
skipping b= CX - CX
returning queue= []
newQ= []
 currently queue=
CX : CX : queue= []
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 9


writing and calling wL with nA= OX - 9
wBF2: wrote  OX
!!!2:calling wL


in writeLevel with  OX  outatom_counter= 10
len( OX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []


writing and calling wL with nA= NX - 10
wBF2: wrote  NX
!!!2:calling wL


in writeLevel with  NX  outatom_counter= 11
len( NX ).bonds= 3
skipping b= NX - CX
processing b= NX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
processing b= CX - NX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 13
len( CX ).bonds= 2
skipping b= NX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 14
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 15
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 16
len( CX ).bonds= 3
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 17
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 18
len( CX ).bonds= 3
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
processing b= OX - CX  activeTors= 1
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
CX wL: queue= [(<Atom instance> ligcovalent:A:CYS272:CX, <Atom instance> ligcovalent:A:CYS272:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 19
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 20
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS272:CX, <Atom instance> ligcovalent:A:CYS272:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS272:CX, <Atom instance> ligcovalent:A:CYS272:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS272:CX, <Atom instance> ligcovalent:A:CYS272:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS272:CX, <Atom instance> ligcovalent:A:CYS272:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS272:CX, <Atom instance> ligcovalent:A:CYS272:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS272:CX, <Atom instance> ligcovalent:A:CYS272:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS272:CX, <Atom instance> ligcovalent:A:CYS272:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS272:CX, <Atom instance> ligcovalent:A:CYS272:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS272:CX, <Atom instance> ligcovalent:A:CYS272:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS272:CX, <Atom instance> ligcovalent:A:CYS272:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS272:CX, <Atom instance> ligcovalent:A:CYS272:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS272:CX, <Atom instance> ligcovalent:A:CYS272:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 20
len( CX ).bonds= 3
skipping b= CX - CX
skipping b= CX - NX
skipping b= CX - CX
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS272:CX, <Atom instance> ligcovalent:A:CYS272:OX)]
newQ= [(<Atom instance> ligcovalent:A:CYS272:CX, <Atom instance> ligcovalent:A:CYS272:OX)]
@@@@len(newq)= 1
queue= [(<Atom instance> ligcovalent:A:CYS272:CX, <Atom instance> ligcovalent:A:CYS272:OX)]
 currently queue= CX - OX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS272:CX, <Atom instance> ligcovalent:A:CYS272:OX)]
 processing queue entry:  CX - OX
in wBF with fromAtom= CX + startAtom= OX startAtom.used= 0
wBF: wrote  OX
self.outatom_counter= 21


writing and calling wL with nA= CX - 21
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 22
len( CX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []
 currently queue=
CX : OX : queue= []
wrote flex file ligcovalent_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: ligcovalent_flex.pdbqt
wrote rigid file: ligcovalent_rigid.pdbqt
4---done
setting PYTHONHOME environment
setting PYTHONHOME environment
!unable to use ligand.TORSDOF! torsdof always set to ligand.ndihe= 7
5---done
 concat 10 log files... done.
Job finished, good luck!
rm: 无法删除'chimera.com': 没有那个文件或目录
rm: 无法删除'tmp.mol2': 没有那个文件或目录
Done
Processing residue A:CYS212
[start] output filename is: ligcovalent_single.pdb
CHAIN A
Writing output filename: ligcovalent_single.pdb
1---ligcovalent.pdb prepared...
1.5--done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= fixed  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  fixed
merged  0  nonpolar hydrogens
end of base class init
using std outputfilename  fixed.pdbqt
wrote  fixed  to  fixed.pdbqt
2---done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= ligcovalent  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  ligcovalent
merged  21  nonpolar hydrogens
end of base class init
using std outputfilename  ligcovalent.pdbqt
wrote  ligcovalent  to  ligcovalent.pdbqt
3---done
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> fixed:A:CYS212 with 6 MolKit.molecule.Atom]
calling setAutoFlexFields with  fixed:A:CYS212
in setAutoFlexFields with  fixed:A:CYS212
len(rotatables)= 1
returning res.torscount= 1
res.root= CA
ntors= 1
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= fixed_flex.pdbqt
res_total= 1
in writeResidue with  fixed:A:CYS212
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS212:CA, <Atom instance> fixed:A:CYS212:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS212:CA, <Atom instance> fixed:A:CYS212:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS212:N, <Atom instance> fixed:A:CYS212:CA)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3


writing and calling wL with nA= SG - 3
wBF2: wrote  SG
!!!2:calling wL


in writeLevel with  SG  outatom_counter= 4
len( SG ).bonds= 1
skipping b= CB - SG
returning queue= []
newQ= []
 currently queue=
CA : CB : queue= []
wrote flex file fixed_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: fixed_flex.pdbqt
wrote rigid file: fixed_rigid.pdbqt
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> ligcovalent:A:CYS212 with 28 MolKit.molecule.Atom]
calling setAutoFlexFields with  ligcovalent:A:CYS212
in setAutoFlexFields with  ligcovalent:A:CYS212
len(rotatables)= 8
returning res.torscount= 7
res.root= CA
ntors= 7
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= ligcovalent_flex.pdbqt
res_total= 7
in writeResidue with  ligcovalent:A:CYS212
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS212:CA, <Atom instance> ligcovalent:A:CYS212:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS212:CA, <Atom instance> ligcovalent:A:CYS212:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS212:N, <Atom instance> ligcovalent:A:CYS212:CA)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3
 currently queue= CB - SG ,
CA : CB : queue= [(<Atom instance> ligcovalent:A:CYS212:CB, <Atom instance> ligcovalent:A:CYS212:SG)]
 processing queue entry:  CB - SG
in wBF with fromAtom= CB + startAtom= SG startAtom.used= 0
wBF: wrote  SG
self.outatom_counter= 4
 currently queue= SG - CX ,
CB : SG : queue= [(<Atom instance> ligcovalent:A:CYS212:SG, <Atom instance> ligcovalent:A:CYS212:CX)]
 processing queue entry:  SG - CX
in wBF with fromAtom= SG + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 5
 currently queue= CX - CX ,
SG : CX : queue= [(<Atom instance> ligcovalent:A:CYS212:CX, <Atom instance> ligcovalent:A:CYS212:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 6
 currently queue= CX - CX , CX - CX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS212:CX, <Atom instance> ligcovalent:A:CYS212:CX), (<Atom instance> ligcovalent:A:CYS212:CX, <Atom instance> ligcovalent:A:CYS212:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 7


writing and calling wL with nA= OX - 7
wBF2: wrote  OX
!!!2:calling wL


in writeLevel with  OX  outatom_counter= 8
len( OX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []


writing and calling wL with nA= NX - 8
wBF2: wrote  NX
!!!2:calling wL


in writeLevel with  NX  outatom_counter= 9
len( NX ).bonds= 3
skipping b= NX - CX
processing b= NX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
processing b= CX - NX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 11
len( CX ).bonds= 2
skipping b= NX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 12
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 13
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 14
len( CX ).bonds= 3
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 15
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 16
len( CX ).bonds= 3
processing b= OX - CX  activeTors= 1
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
CX wL: queue= [(<Atom instance> ligcovalent:A:CYS212:CX, <Atom instance> ligcovalent:A:CYS212:OX)]
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 17
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 18
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS212:CX, <Atom instance> ligcovalent:A:CYS212:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS212:CX, <Atom instance> ligcovalent:A:CYS212:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS212:CX, <Atom instance> ligcovalent:A:CYS212:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS212:CX, <Atom instance> ligcovalent:A:CYS212:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS212:CX, <Atom instance> ligcovalent:A:CYS212:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS212:CX, <Atom instance> ligcovalent:A:CYS212:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS212:CX, <Atom instance> ligcovalent:A:CYS212:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS212:CX, <Atom instance> ligcovalent:A:CYS212:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS212:CX, <Atom instance> ligcovalent:A:CYS212:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS212:CX, <Atom instance> ligcovalent:A:CYS212:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS212:CX, <Atom instance> ligcovalent:A:CYS212:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS212:CX, <Atom instance> ligcovalent:A:CYS212:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 18
len( CX ).bonds= 3
skipping b= CX - CX
skipping b= CX - NX
skipping b= CX - CX
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS212:CX, <Atom instance> ligcovalent:A:CYS212:OX)]
newQ= [(<Atom instance> ligcovalent:A:CYS212:CX, <Atom instance> ligcovalent:A:CYS212:OX)]
@@@@len(newq)= 1
queue= [(<Atom instance> ligcovalent:A:CYS212:CX, <Atom instance> ligcovalent:A:CYS212:OX)]
 currently queue= CX - OX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS212:CX, <Atom instance> ligcovalent:A:CYS212:OX)]
 processing queue entry:  CX - OX
in wBF with fromAtom= CX + startAtom= OX startAtom.used= 0
wBF: wrote  OX
self.outatom_counter= 19


writing and calling wL with nA= CX - 19
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 20
len( CX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []
 currently queue=
CX : OX : queue= []
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 21


writing and calling wL with nA= CX - 21
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 22
len( CX ).bonds= 1
skipping b= CX - CX
returning queue= []
newQ= []
 currently queue=
CX : CX : queue= []
wrote flex file ligcovalent_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: ligcovalent_flex.pdbqt
wrote rigid file: ligcovalent_rigid.pdbqt
4---done
setting PYTHONHOME environment
setting PYTHONHOME environment
!unable to use ligand.TORSDOF! torsdof always set to ligand.ndihe= 7
5---done
 concat 10 log files... done.
Job finished, good luck!
rm: 无法删除'chimera.com': 没有那个文件或目录
rm: 无法删除'tmp.mol2': 没有那个文件或目录
Done
Processing residue A:CYS260
[start] output filename is: ligcovalent_single.pdb
CHAIN A
Writing output filename: ligcovalent_single.pdb
1---ligcovalent.pdb prepared...
1.5--done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= fixed  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  fixed
merged  0  nonpolar hydrogens
end of base class init
using std outputfilename  fixed.pdbqt
wrote  fixed  to  fixed.pdbqt
2---done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= ligcovalent  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  ligcovalent
merged  21  nonpolar hydrogens
end of base class init
using std outputfilename  ligcovalent.pdbqt
wrote  ligcovalent  to  ligcovalent.pdbqt
3---done
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> fixed:A:CYS260 with 6 MolKit.molecule.Atom]
calling setAutoFlexFields with  fixed:A:CYS260
in setAutoFlexFields with  fixed:A:CYS260
len(rotatables)= 1
returning res.torscount= 1
res.root= CA
ntors= 1
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= fixed_flex.pdbqt
res_total= 1
in writeResidue with  fixed:A:CYS260
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS260:N, <Atom instance> fixed:A:CYS260:CA)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS260:CA, <Atom instance> fixed:A:CYS260:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS260:CA, <Atom instance> fixed:A:CYS260:CB)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3


writing and calling wL with nA= SG - 3
wBF2: wrote  SG
!!!2:calling wL


in writeLevel with  SG  outatom_counter= 4
len( SG ).bonds= 1
skipping b= CB - SG
returning queue= []
newQ= []
 currently queue=
CA : CB : queue= []
wrote flex file fixed_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: fixed_flex.pdbqt
wrote rigid file: fixed_rigid.pdbqt
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> ligcovalent:A:CYS260 with 28 MolKit.molecule.Atom]
calling setAutoFlexFields with  ligcovalent:A:CYS260
in setAutoFlexFields with  ligcovalent:A:CYS260
len(rotatables)= 8
returning res.torscount= 7
res.root= CA
ntors= 7
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= ligcovalent_flex.pdbqt
res_total= 7
in writeResidue with  ligcovalent:A:CYS260
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS260:N, <Atom instance> ligcovalent:A:CYS260:CA)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS260:CA, <Atom instance> ligcovalent:A:CYS260:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS260:CA, <Atom instance> ligcovalent:A:CYS260:C)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3
 currently queue= CB - SG ,
CA : CB : queue= [(<Atom instance> ligcovalent:A:CYS260:CB, <Atom instance> ligcovalent:A:CYS260:SG)]
 processing queue entry:  CB - SG
in wBF with fromAtom= CB + startAtom= SG startAtom.used= 0
wBF: wrote  SG
self.outatom_counter= 4
 currently queue= SG - CX ,
CB : SG : queue= [(<Atom instance> ligcovalent:A:CYS260:SG, <Atom instance> ligcovalent:A:CYS260:CX)]
 processing queue entry:  SG - CX
in wBF with fromAtom= SG + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 5
 currently queue= CX - CX ,
SG : CX : queue= [(<Atom instance> ligcovalent:A:CYS260:CX, <Atom instance> ligcovalent:A:CYS260:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 6
 currently queue= CX - CX , CX - CX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS260:CX, <Atom instance> ligcovalent:A:CYS260:CX), (<Atom instance> ligcovalent:A:CYS260:CX, <Atom instance> ligcovalent:A:CYS260:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 7


writing and calling wL with nA= OX - 7
wBF2: wrote  OX
!!!2:calling wL


in writeLevel with  OX  outatom_counter= 8
len( OX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []


writing and calling wL with nA= NX - 8
wBF2: wrote  NX
!!!2:calling wL


in writeLevel with  NX  outatom_counter= 9
len( NX ).bonds= 3
skipping b= NX - CX
processing b= NX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
processing b= CX - NX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 11
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= NX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 12
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 13
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 14
len( CX ).bonds= 3
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 15
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 16
len( CX ).bonds= 3
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
processing b= OX - CX  activeTors= 1
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
CX wL: queue= [(<Atom instance> ligcovalent:A:CYS260:CX, <Atom instance> ligcovalent:A:CYS260:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 17
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 18
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS260:CX, <Atom instance> ligcovalent:A:CYS260:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS260:CX, <Atom instance> ligcovalent:A:CYS260:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS260:CX, <Atom instance> ligcovalent:A:CYS260:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS260:CX, <Atom instance> ligcovalent:A:CYS260:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS260:CX, <Atom instance> ligcovalent:A:CYS260:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS260:CX, <Atom instance> ligcovalent:A:CYS260:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS260:CX, <Atom instance> ligcovalent:A:CYS260:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS260:CX, <Atom instance> ligcovalent:A:CYS260:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS260:CX, <Atom instance> ligcovalent:A:CYS260:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS260:CX, <Atom instance> ligcovalent:A:CYS260:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS260:CX, <Atom instance> ligcovalent:A:CYS260:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS260:CX, <Atom instance> ligcovalent:A:CYS260:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 18
len( CX ).bonds= 3
skipping b= CX - CX
skipping b= CX - NX
skipping b= CX - CX
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS260:CX, <Atom instance> ligcovalent:A:CYS260:OX)]
newQ= [(<Atom instance> ligcovalent:A:CYS260:CX, <Atom instance> ligcovalent:A:CYS260:OX)]
@@@@len(newq)= 1
queue= [(<Atom instance> ligcovalent:A:CYS260:CX, <Atom instance> ligcovalent:A:CYS260:OX)]
 currently queue= CX - OX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS260:CX, <Atom instance> ligcovalent:A:CYS260:OX)]
 processing queue entry:  CX - OX
in wBF with fromAtom= CX + startAtom= OX startAtom.used= 0
wBF: wrote  OX
self.outatom_counter= 19


writing and calling wL with nA= CX - 19
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 20
len( CX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []
 currently queue=
CX : OX : queue= []
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 21


writing and calling wL with nA= CX - 21
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 22
len( CX ).bonds= 1
skipping b= CX - CX
returning queue= []
newQ= []
 currently queue=
CX : CX : queue= []
wrote flex file ligcovalent_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: ligcovalent_flex.pdbqt
wrote rigid file: ligcovalent_rigid.pdbqt
4---done
setting PYTHONHOME environment
setting PYTHONHOME environment
!unable to use ligand.TORSDOF! torsdof always set to ligand.ndihe= 7
5---done
 concat 10 log files... done.
Job finished, good luck!
rm: 无法删除'chimera.com': 没有那个文件或目录
rm: 无法删除'tmp.mol2': 没有那个文件或目录
Done
Processing residue A:CYS280
[start] output filename is: ligcovalent_single.pdb
CHAIN A
Writing output filename: ligcovalent_single.pdb
1---ligcovalent.pdb prepared...
1.5--done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= fixed  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  fixed
merged  0  nonpolar hydrogens
end of base class init
using std outputfilename  fixed.pdbqt
wrote  fixed  to  fixed.pdbqt
2---done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= ligcovalent  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  ligcovalent
merged  21  nonpolar hydrogens
end of base class init
using std outputfilename  ligcovalent.pdbqt
wrote  ligcovalent  to  ligcovalent.pdbqt
3---done
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> fixed:A:CYS280 with 6 MolKit.molecule.Atom]
calling setAutoFlexFields with  fixed:A:CYS280
in setAutoFlexFields with  fixed:A:CYS280
len(rotatables)= 1
returning res.torscount= 1
res.root= CA
ntors= 1
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= fixed_flex.pdbqt
res_total= 1
in writeResidue with  fixed:A:CYS280
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS280:CA, <Atom instance> fixed:A:CYS280:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS280:CA, <Atom instance> fixed:A:CYS280:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS280:N, <Atom instance> fixed:A:CYS280:CA)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3


writing and calling wL with nA= SG - 3
wBF2: wrote  SG
!!!2:calling wL


in writeLevel with  SG  outatom_counter= 4
len( SG ).bonds= 1
skipping b= CB - SG
returning queue= []
newQ= []
 currently queue=
CA : CB : queue= []
wrote flex file fixed_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: fixed_flex.pdbqt
wrote rigid file: fixed_rigid.pdbqt
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> ligcovalent:A:CYS280 with 28 MolKit.molecule.Atom]
calling setAutoFlexFields with  ligcovalent:A:CYS280
in setAutoFlexFields with  ligcovalent:A:CYS280
len(rotatables)= 8
returning res.torscount= 7
res.root= CA
ntors= 7
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= ligcovalent_flex.pdbqt
res_total= 7
in writeResidue with  ligcovalent:A:CYS280
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS280:CA, <Atom instance> ligcovalent:A:CYS280:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS280:CA, <Atom instance> ligcovalent:A:CYS280:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS280:N, <Atom instance> ligcovalent:A:CYS280:CA)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3
 currently queue= CB - SG ,
CA : CB : queue= [(<Atom instance> ligcovalent:A:CYS280:CB, <Atom instance> ligcovalent:A:CYS280:SG)]
 processing queue entry:  CB - SG
in wBF with fromAtom= CB + startAtom= SG startAtom.used= 0
wBF: wrote  SG
self.outatom_counter= 4
 currently queue= SG - CX ,
CB : SG : queue= [(<Atom instance> ligcovalent:A:CYS280:SG, <Atom instance> ligcovalent:A:CYS280:CX)]
 processing queue entry:  SG - CX
in wBF with fromAtom= SG + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 5
 currently queue= CX - CX ,
SG : CX : queue= [(<Atom instance> ligcovalent:A:CYS280:CX, <Atom instance> ligcovalent:A:CYS280:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 6
 currently queue= CX - CX , CX - CX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS280:CX, <Atom instance> ligcovalent:A:CYS280:CX), (<Atom instance> ligcovalent:A:CYS280:CX, <Atom instance> ligcovalent:A:CYS280:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 7


writing and calling wL with nA= NX - 7
wBF2: wrote  NX
!!!2:calling wL


in writeLevel with  NX  outatom_counter= 8
len( NX ).bonds= 3
processing b= NX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= NX - CX
processing b= CX - NX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 10
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= NX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 11
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 12
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 13
len( CX ).bonds= 3
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 14
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 15
len( CX ).bonds= 3
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
processing b= OX - CX  activeTors= 1
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
CX wL: queue= [(<Atom instance> ligcovalent:A:CYS280:CX, <Atom instance> ligcovalent:A:CYS280:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 16
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 17
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS280:CX, <Atom instance> ligcovalent:A:CYS280:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS280:CX, <Atom instance> ligcovalent:A:CYS280:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS280:CX, <Atom instance> ligcovalent:A:CYS280:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS280:CX, <Atom instance> ligcovalent:A:CYS280:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS280:CX, <Atom instance> ligcovalent:A:CYS280:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS280:CX, <Atom instance> ligcovalent:A:CYS280:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS280:CX, <Atom instance> ligcovalent:A:CYS280:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS280:CX, <Atom instance> ligcovalent:A:CYS280:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS280:CX, <Atom instance> ligcovalent:A:CYS280:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS280:CX, <Atom instance> ligcovalent:A:CYS280:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS280:CX, <Atom instance> ligcovalent:A:CYS280:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS280:CX, <Atom instance> ligcovalent:A:CYS280:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 17
len( CX ).bonds= 3
skipping b= CX - CX
skipping b= CX - NX
skipping b= CX - CX
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS280:CX, <Atom instance> ligcovalent:A:CYS280:OX)]
newQ= [(<Atom instance> ligcovalent:A:CYS280:CX, <Atom instance> ligcovalent:A:CYS280:OX)]
@@@@len(newq)= 1
queue= [(<Atom instance> ligcovalent:A:CYS280:CX, <Atom instance> ligcovalent:A:CYS280:OX)]


writing and calling wL with nA= OX - 17
wBF2: wrote  OX
!!!2:calling wL


in writeLevel with  OX  outatom_counter= 18
len( OX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []
 currently queue= CX - OX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS280:CX, <Atom instance> ligcovalent:A:CYS280:OX)]
 processing queue entry:  CX - OX
in wBF with fromAtom= CX + startAtom= OX startAtom.used= 0
wBF: wrote  OX
self.outatom_counter= 19


writing and calling wL with nA= CX - 19
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 20
len( CX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []
 currently queue=
CX : OX : queue= []
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 21


writing and calling wL with nA= CX - 21
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 22
len( CX ).bonds= 1
skipping b= CX - CX
returning queue= []
newQ= []
 currently queue=
CX : CX : queue= []
wrote flex file ligcovalent_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: ligcovalent_flex.pdbqt
wrote rigid file: ligcovalent_rigid.pdbqt
4---done
setting PYTHONHOME environment
setting PYTHONHOME environment
!unable to use ligand.TORSDOF! torsdof always set to ligand.ndihe= 7
5---done
 concat 10 log files... done.
Job finished, good luck!
rm: 无法删除'chimera.com': 没有那个文件或目录
rm: 无法删除'tmp.mol2': 没有那个文件或目录
Done
Processing residue A:CYS131
[start] output filename is: ligcovalent_single.pdb
CHAIN A
Writing output filename: ligcovalent_single.pdb
1---ligcovalent.pdb prepared...
1.5--done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= fixed  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  fixed
merged  0  nonpolar hydrogens
end of base class init
using std outputfilename  fixed.pdbqt
wrote  fixed  to  fixed.pdbqt
2---done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= ligcovalent  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  ligcovalent
merged  21  nonpolar hydrogens
end of base class init
using std outputfilename  ligcovalent.pdbqt
wrote  ligcovalent  to  ligcovalent.pdbqt
3---done
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> fixed:A:CYS131 with 6 MolKit.molecule.Atom]
calling setAutoFlexFields with  fixed:A:CYS131
in setAutoFlexFields with  fixed:A:CYS131
len(rotatables)= 1
returning res.torscount= 1
res.root= CA
ntors= 1
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= fixed_flex.pdbqt
res_total= 1
in writeResidue with  fixed:A:CYS131
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS131:CA, <Atom instance> fixed:A:CYS131:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS131:CA, <Atom instance> fixed:A:CYS131:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS131:N, <Atom instance> fixed:A:CYS131:CA)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3


writing and calling wL with nA= SG - 3
wBF2: wrote  SG
!!!2:calling wL


in writeLevel with  SG  outatom_counter= 4
len( SG ).bonds= 1
skipping b= CB - SG
returning queue= []
newQ= []
 currently queue=
CA : CB : queue= []
wrote flex file fixed_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: fixed_flex.pdbqt
wrote rigid file: fixed_rigid.pdbqt
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> ligcovalent:A:CYS131 with 28 MolKit.molecule.Atom]
calling setAutoFlexFields with  ligcovalent:A:CYS131
in setAutoFlexFields with  ligcovalent:A:CYS131
len(rotatables)= 8
returning res.torscount= 7
res.root= CA
ntors= 7
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= ligcovalent_flex.pdbqt
res_total= 7
in writeResidue with  ligcovalent:A:CYS131
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS131:CA, <Atom instance> ligcovalent:A:CYS131:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS131:CA, <Atom instance> ligcovalent:A:CYS131:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS131:N, <Atom instance> ligcovalent:A:CYS131:CA)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3
 currently queue= CB - SG ,
CA : CB : queue= [(<Atom instance> ligcovalent:A:CYS131:CB, <Atom instance> ligcovalent:A:CYS131:SG)]
 processing queue entry:  CB - SG
in wBF with fromAtom= CB + startAtom= SG startAtom.used= 0
wBF: wrote  SG
self.outatom_counter= 4
 currently queue= SG - CX ,
CB : SG : queue= [(<Atom instance> ligcovalent:A:CYS131:SG, <Atom instance> ligcovalent:A:CYS131:CX)]
 processing queue entry:  SG - CX
in wBF with fromAtom= SG + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 5
 currently queue= CX - CX ,
SG : CX : queue= [(<Atom instance> ligcovalent:A:CYS131:CX, <Atom instance> ligcovalent:A:CYS131:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 6
 currently queue= CX - CX , CX - CX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS131:CX, <Atom instance> ligcovalent:A:CYS131:CX), (<Atom instance> ligcovalent:A:CYS131:CX, <Atom instance> ligcovalent:A:CYS131:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 7


writing and calling wL with nA= OX - 7
wBF2: wrote  OX
!!!2:calling wL


in writeLevel with  OX  outatom_counter= 8
len( OX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []


writing and calling wL with nA= NX - 8
wBF2: wrote  NX
!!!2:calling wL


in writeLevel with  NX  outatom_counter= 9
len( NX ).bonds= 3
skipping b= NX - CX
processing b= NX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
processing b= CX - NX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 11
len( CX ).bonds= 2
skipping b= NX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 12
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 13
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 14
len( CX ).bonds= 3
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 15
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 16
len( CX ).bonds= 3
processing b= OX - CX  activeTors= 1
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
CX wL: queue= [(<Atom instance> ligcovalent:A:CYS131:CX, <Atom instance> ligcovalent:A:CYS131:OX)]
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 17
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 18
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS131:CX, <Atom instance> ligcovalent:A:CYS131:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS131:CX, <Atom instance> ligcovalent:A:CYS131:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS131:CX, <Atom instance> ligcovalent:A:CYS131:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS131:CX, <Atom instance> ligcovalent:A:CYS131:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS131:CX, <Atom instance> ligcovalent:A:CYS131:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS131:CX, <Atom instance> ligcovalent:A:CYS131:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS131:CX, <Atom instance> ligcovalent:A:CYS131:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS131:CX, <Atom instance> ligcovalent:A:CYS131:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS131:CX, <Atom instance> ligcovalent:A:CYS131:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS131:CX, <Atom instance> ligcovalent:A:CYS131:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS131:CX, <Atom instance> ligcovalent:A:CYS131:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS131:CX, <Atom instance> ligcovalent:A:CYS131:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 18
len( CX ).bonds= 3
skipping b= CX - NX
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS131:CX, <Atom instance> ligcovalent:A:CYS131:OX)]
newQ= [(<Atom instance> ligcovalent:A:CYS131:CX, <Atom instance> ligcovalent:A:CYS131:OX)]
@@@@len(newq)= 1
queue= [(<Atom instance> ligcovalent:A:CYS131:CX, <Atom instance> ligcovalent:A:CYS131:OX)]
 currently queue= CX - OX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS131:CX, <Atom instance> ligcovalent:A:CYS131:OX)]
 processing queue entry:  CX - OX
in wBF with fromAtom= CX + startAtom= OX startAtom.used= 0
wBF: wrote  OX
self.outatom_counter= 19


writing and calling wL with nA= CX - 19
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 20
len( CX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []
 currently queue=
CX : OX : queue= []
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 21


writing and calling wL with nA= CX - 21
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 22
len( CX ).bonds= 1
skipping b= CX - CX
returning queue= []
newQ= []
 currently queue=
CX : CX : queue= []
wrote flex file ligcovalent_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: ligcovalent_flex.pdbqt
wrote rigid file: ligcovalent_rigid.pdbqt
4---done
setting PYTHONHOME environment
setting PYTHONHOME environment
!unable to use ligand.TORSDOF! torsdof always set to ligand.ndihe= 7
5---done
 concat 10 log files... done.
Job finished, good luck!
rm: 无法删除'chimera.com': 没有那个文件或目录
rm: 无法删除'tmp.mol2': 没有那个文件或目录
Done
Processing residue A:CYS278
[start] output filename is: ligcovalent_single.pdb
CHAIN A
Writing output filename: ligcovalent_single.pdb
1---ligcovalent.pdb prepared...
1.5--done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= fixed  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  fixed
merged  0  nonpolar hydrogens
end of base class init
using std outputfilename  fixed.pdbqt
wrote  fixed  to  fixed.pdbqt
2---done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= ligcovalent  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  ligcovalent
merged  21  nonpolar hydrogens
end of base class init
using std outputfilename  ligcovalent.pdbqt
wrote  ligcovalent  to  ligcovalent.pdbqt
3---done
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> fixed:A:CYS278 with 6 MolKit.molecule.Atom]
calling setAutoFlexFields with  fixed:A:CYS278
in setAutoFlexFields with  fixed:A:CYS278
len(rotatables)= 1
returning res.torscount= 1
res.root= CA
ntors= 1
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= fixed_flex.pdbqt
res_total= 1
in writeResidue with  fixed:A:CYS278
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS278:CA, <Atom instance> fixed:A:CYS278:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS278:CA, <Atom instance> fixed:A:CYS278:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS278:N, <Atom instance> fixed:A:CYS278:CA)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3


writing and calling wL with nA= SG - 3
wBF2: wrote  SG
!!!2:calling wL


in writeLevel with  SG  outatom_counter= 4
len( SG ).bonds= 1
skipping b= CB - SG
returning queue= []
newQ= []
 currently queue=
CA : CB : queue= []
wrote flex file fixed_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: fixed_flex.pdbqt
wrote rigid file: fixed_rigid.pdbqt
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> ligcovalent:A:CYS278 with 28 MolKit.molecule.Atom]
calling setAutoFlexFields with  ligcovalent:A:CYS278
in setAutoFlexFields with  ligcovalent:A:CYS278
len(rotatables)= 8
returning res.torscount= 7
res.root= CA
ntors= 7
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= ligcovalent_flex.pdbqt
res_total= 7
in writeResidue with  ligcovalent:A:CYS278
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS278:N, <Atom instance> ligcovalent:A:CYS278:CA)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS278:CA, <Atom instance> ligcovalent:A:CYS278:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS278:CA, <Atom instance> ligcovalent:A:CYS278:C)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3
 currently queue= CB - SG ,
CA : CB : queue= [(<Atom instance> ligcovalent:A:CYS278:CB, <Atom instance> ligcovalent:A:CYS278:SG)]
 processing queue entry:  CB - SG
in wBF with fromAtom= CB + startAtom= SG startAtom.used= 0
wBF: wrote  SG
self.outatom_counter= 4
 currently queue= SG - CX ,
CB : SG : queue= [(<Atom instance> ligcovalent:A:CYS278:SG, <Atom instance> ligcovalent:A:CYS278:CX)]
 processing queue entry:  SG - CX
in wBF with fromAtom= SG + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 5
 currently queue= CX - CX ,
SG : CX : queue= [(<Atom instance> ligcovalent:A:CYS278:CX, <Atom instance> ligcovalent:A:CYS278:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 6
 currently queue= CX - CX , CX - CX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS278:CX, <Atom instance> ligcovalent:A:CYS278:CX), (<Atom instance> ligcovalent:A:CYS278:CX, <Atom instance> ligcovalent:A:CYS278:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 7


writing and calling wL with nA= CX - 7
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 8
len( CX ).bonds= 1
skipping b= CX - CX
returning queue= []
newQ= []
 currently queue=
CX : CX : queue= []
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 9


writing and calling wL with nA= OX - 9
wBF2: wrote  OX
!!!2:calling wL


in writeLevel with  OX  outatom_counter= 10
len( OX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []


writing and calling wL with nA= NX - 10
wBF2: wrote  NX
!!!2:calling wL


in writeLevel with  NX  outatom_counter= 11
len( NX ).bonds= 3
processing b= CX - NX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= NX - CX
processing b= NX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 13
len( CX ).bonds= 3
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - NX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 15
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 16
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 17
len( CX ).bonds= 3
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
processing b= OX - CX  activeTors= 1
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
CX wL: queue= [(<Atom instance> ligcovalent:A:CYS278:CX, <Atom instance> ligcovalent:A:CYS278:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 18
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS278:CX, <Atom instance> ligcovalent:A:CYS278:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS278:CX, <Atom instance> ligcovalent:A:CYS278:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS278:CX, <Atom instance> ligcovalent:A:CYS278:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS278:CX, <Atom instance> ligcovalent:A:CYS278:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS278:CX, <Atom instance> ligcovalent:A:CYS278:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS278:CX, <Atom instance> ligcovalent:A:CYS278:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 18
len( CX ).bonds= 3
skipping b= CX - CX
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 19
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 20
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= []
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS278:CX, <Atom instance> ligcovalent:A:CYS278:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS278:CX, <Atom instance> ligcovalent:A:CYS278:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 20
len( CX ).bonds= 2
skipping b= NX - CX
skipping b= CX - CX
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS278:CX, <Atom instance> ligcovalent:A:CYS278:OX)]
newQ= [(<Atom instance> ligcovalent:A:CYS278:CX, <Atom instance> ligcovalent:A:CYS278:OX)]
@@@@len(newq)= 1
queue= [(<Atom instance> ligcovalent:A:CYS278:CX, <Atom instance> ligcovalent:A:CYS278:OX)]
 currently queue= CX - OX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS278:CX, <Atom instance> ligcovalent:A:CYS278:OX)]
 processing queue entry:  CX - OX
in wBF with fromAtom= CX + startAtom= OX startAtom.used= 0
wBF: wrote  OX
self.outatom_counter= 21


writing and calling wL with nA= CX - 21
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 22
len( CX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []
 currently queue=
CX : OX : queue= []
wrote flex file ligcovalent_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: ligcovalent_flex.pdbqt
wrote rigid file: ligcovalent_rigid.pdbqt
4---done
setting PYTHONHOME environment
setting PYTHONHOME environment
!unable to use ligand.TORSDOF! torsdof always set to ligand.ndihe= 7
5---done
 concat 10 log files... done.
Job finished, good luck!
rm: 无法删除'chimera.com': 没有那个文件或目录
rm: 无法删除'tmp.mol2': 没有那个文件或目录
Done
Processing residue A:CYS1062
[start] output filename is: ligcovalent_single.pdb
CHAIN A
Writing output filename: ligcovalent_single.pdb
1---ligcovalent.pdb prepared...
1.5--done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= fixed  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
Unable to assign MAP type to atom N
Sorry, there are no Gasteiger parameters available for atom fixed:A:HIS894:NE2
Unable to assign MAP type to atom N
Sorry, there are no Gasteiger parameters available for atom fixed:A:HIS1043:NE2
added gasteigercharges to  fixed
merged  0  nonpolar hydrogens
end of base class init
using std outputfilename  fixed.pdbqt
wrote  fixed  to  fixed.pdbqt
2---done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= ligcovalent  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  ligcovalent
merged  21  nonpolar hydrogens
end of base class init
using std outputfilename  ligcovalent.pdbqt
wrote  ligcovalent  to  ligcovalent.pdbqt
3---done
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> fixed:A:CYS1062 with 6 MolKit.molecule.Atom]
calling setAutoFlexFields with  fixed:A:CYS1062
in setAutoFlexFields with  fixed:A:CYS1062
Unable to assign XYZ type to atom N
Unable to assign XYZ type to atom N
len(rotatables)= 1
returning res.torscount= 1
res.root= CA
ntors= 1
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= fixed_flex.pdbqt
res_total= 1
in writeResidue with  fixed:A:CYS1062
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS1062:N, <Atom instance> fixed:A:CYS1062:CA)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS1062:CA, <Atom instance> fixed:A:CYS1062:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS1062:CA, <Atom instance> fixed:A:CYS1062:C)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3


writing and calling wL with nA= SG - 3
wBF2: wrote  SG
!!!2:calling wL


in writeLevel with  SG  outatom_counter= 4
len( SG ).bonds= 1
skipping b= CB - SG
returning queue= []
newQ= []
 currently queue=
CA : CB : queue= []
wrote flex file fixed_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: fixed_flex.pdbqt
wrote rigid file: fixed_rigid.pdbqt
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> ligcovalent:A:CYS1062 with 28 MolKit.molecule.Atom]
calling setAutoFlexFields with  ligcovalent:A:CYS1062
in setAutoFlexFields with  ligcovalent:A:CYS1062
len(rotatables)= 8
returning res.torscount= 7
res.root= CA
ntors= 7
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= ligcovalent_flex.pdbqt
res_total= 7
in writeResidue with  ligcovalent:A:CYS1062
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS1062:CA, <Atom instance> ligcovalent:A:CYS1062:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS1062:CA, <Atom instance> ligcovalent:A:CYS1062:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS1062:N, <Atom instance> ligcovalent:A:CYS1062:CA)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3
 currently queue= CB - SG ,
CA : CB : queue= [(<Atom instance> ligcovalent:A:CYS1062:CB, <Atom instance> ligcovalent:A:CYS1062:SG)]
 processing queue entry:  CB - SG
in wBF with fromAtom= CB + startAtom= SG startAtom.used= 0
wBF: wrote  SG
self.outatom_counter= 4
 currently queue= SG - CX ,
CB : SG : queue= [(<Atom instance> ligcovalent:A:CYS1062:SG, <Atom instance> ligcovalent:A:CYS1062:CX)]
 processing queue entry:  SG - CX
in wBF with fromAtom= SG + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 5
 currently queue= CX - CX ,
SG : CX : queue= [(<Atom instance> ligcovalent:A:CYS1062:CX, <Atom instance> ligcovalent:A:CYS1062:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 6
 currently queue= CX - CX , CX - CX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS1062:CX, <Atom instance> ligcovalent:A:CYS1062:CX), (<Atom instance> ligcovalent:A:CYS1062:CX, <Atom instance> ligcovalent:A:CYS1062:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 7


writing and calling wL with nA= NX - 7
wBF2: wrote  NX
!!!2:calling wL


in writeLevel with  NX  outatom_counter= 8
len( NX ).bonds= 3
processing b= CX - NX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
processing b= NX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= NX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 10
len( CX ).bonds= 3
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - NX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 12
len( CX ).bonds= 3
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 14
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 15
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= []
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 15
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 16
len( CX ).bonds= 3
processing b= OX - CX  activeTors= 1
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
CX wL: queue= [(<Atom instance> ligcovalent:A:CYS1062:CX, <Atom instance> ligcovalent:A:CYS1062:OX)]
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 17
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS1062:CX, <Atom instance> ligcovalent:A:CYS1062:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS1062:CX, <Atom instance> ligcovalent:A:CYS1062:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS1062:CX, <Atom instance> ligcovalent:A:CYS1062:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS1062:CX, <Atom instance> ligcovalent:A:CYS1062:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS1062:CX, <Atom instance> ligcovalent:A:CYS1062:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS1062:CX, <Atom instance> ligcovalent:A:CYS1062:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 17
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS1062:CX, <Atom instance> ligcovalent:A:CYS1062:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS1062:CX, <Atom instance> ligcovalent:A:CYS1062:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 17
len( CX ).bonds= 2
skipping b= NX - CX
skipping b= CX - CX
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS1062:CX, <Atom instance> ligcovalent:A:CYS1062:OX)]
newQ= [(<Atom instance> ligcovalent:A:CYS1062:CX, <Atom instance> ligcovalent:A:CYS1062:OX)]
@@@@len(newq)= 1
queue= [(<Atom instance> ligcovalent:A:CYS1062:CX, <Atom instance> ligcovalent:A:CYS1062:OX)]


writing and calling wL with nA= OX - 17
wBF2: wrote  OX
!!!2:calling wL


in writeLevel with  OX  outatom_counter= 18
len( OX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []
 currently queue= CX - OX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS1062:CX, <Atom instance> ligcovalent:A:CYS1062:OX)]
 processing queue entry:  CX - OX
in wBF with fromAtom= CX + startAtom= OX startAtom.used= 0
wBF: wrote  OX
self.outatom_counter= 19


writing and calling wL with nA= CX - 19
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 20
len( CX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []
 currently queue=
CX : OX : queue= []
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 21


writing and calling wL with nA= CX - 21
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 22
len( CX ).bonds= 1
skipping b= CX - CX
returning queue= []
newQ= []
 currently queue=
CX : CX : queue= []
wrote flex file ligcovalent_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: ligcovalent_flex.pdbqt
wrote rigid file: ligcovalent_rigid.pdbqt
4---done
setting PYTHONHOME environment
setting PYTHONHOME environment
!unable to use ligand.TORSDOF! torsdof always set to ligand.ndihe= 7
5---done
 concat 10 log files... done.
Job finished, good luck!
rm: 无法删除'chimera.com': 没有那个文件或目录
rm: 无法删除'tmp.mol2': 没有那个文件或目录
Done
Processing residue A:CYS449
[start] output filename is: ligcovalent_single.pdb
CHAIN A
Writing output filename: ligcovalent_single.pdb
1---ligcovalent.pdb prepared...
1.5--done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= fixed  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  fixed
merged  0  nonpolar hydrogens
end of base class init
using std outputfilename  fixed.pdbqt
wrote  fixed  to  fixed.pdbqt
2---done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= ligcovalent  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  ligcovalent
merged  21  nonpolar hydrogens
end of base class init
using std outputfilename  ligcovalent.pdbqt
wrote  ligcovalent  to  ligcovalent.pdbqt
3---done
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> fixed:A:CYS449 with 6 MolKit.molecule.Atom]
calling setAutoFlexFields with  fixed:A:CYS449
in setAutoFlexFields with  fixed:A:CYS449
len(rotatables)= 1
returning res.torscount= 1
res.root= CA
ntors= 1
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= fixed_flex.pdbqt
res_total= 1
in writeResidue with  fixed:A:CYS449
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS449:CA, <Atom instance> fixed:A:CYS449:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS449:CA, <Atom instance> fixed:A:CYS449:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS449:N, <Atom instance> fixed:A:CYS449:CA)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3


writing and calling wL with nA= SG - 3
wBF2: wrote  SG
!!!2:calling wL


in writeLevel with  SG  outatom_counter= 4
len( SG ).bonds= 1
skipping b= CB - SG
returning queue= []
newQ= []
 currently queue=
CA : CB : queue= []
wrote flex file fixed_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: fixed_flex.pdbqt
wrote rigid file: fixed_rigid.pdbqt
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> ligcovalent:A:CYS449 with 28 MolKit.molecule.Atom]
calling setAutoFlexFields with  ligcovalent:A:CYS449
in setAutoFlexFields with  ligcovalent:A:CYS449
len(rotatables)= 8
returning res.torscount= 7
res.root= CA
ntors= 7
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= ligcovalent_flex.pdbqt
res_total= 7
in writeResidue with  ligcovalent:A:CYS449
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS449:CA, <Atom instance> ligcovalent:A:CYS449:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS449:CA, <Atom instance> ligcovalent:A:CYS449:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS449:N, <Atom instance> ligcovalent:A:CYS449:CA)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3
 currently queue= CB - SG ,
CA : CB : queue= [(<Atom instance> ligcovalent:A:CYS449:CB, <Atom instance> ligcovalent:A:CYS449:SG)]
 processing queue entry:  CB - SG
in wBF with fromAtom= CB + startAtom= SG startAtom.used= 0
wBF: wrote  SG
self.outatom_counter= 4
 currently queue= SG - CX ,
CB : SG : queue= [(<Atom instance> ligcovalent:A:CYS449:SG, <Atom instance> ligcovalent:A:CYS449:CX)]
 processing queue entry:  SG - CX
in wBF with fromAtom= SG + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 5
 currently queue= CX - CX ,
SG : CX : queue= [(<Atom instance> ligcovalent:A:CYS449:CX, <Atom instance> ligcovalent:A:CYS449:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 6
 currently queue= CX - CX , CX - CX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS449:CX, <Atom instance> ligcovalent:A:CYS449:CX), (<Atom instance> ligcovalent:A:CYS449:CX, <Atom instance> ligcovalent:A:CYS449:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 7


writing and calling wL with nA= NX - 7
wBF2: wrote  NX
!!!2:calling wL


in writeLevel with  NX  outatom_counter= 8
len( NX ).bonds= 3
processing b= NX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= NX - CX
processing b= CX - NX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 10
len( CX ).bonds= 2
skipping b= NX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 11
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 12
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 13
len( CX ).bonds= 3
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 14
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 15
len( CX ).bonds= 3
processing b= OX - CX  activeTors= 1
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
CX wL: queue= [(<Atom instance> ligcovalent:A:CYS449:CX, <Atom instance> ligcovalent:A:CYS449:OX)]
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 16
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 17
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS449:CX, <Atom instance> ligcovalent:A:CYS449:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS449:CX, <Atom instance> ligcovalent:A:CYS449:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS449:CX, <Atom instance> ligcovalent:A:CYS449:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS449:CX, <Atom instance> ligcovalent:A:CYS449:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS449:CX, <Atom instance> ligcovalent:A:CYS449:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS449:CX, <Atom instance> ligcovalent:A:CYS449:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS449:CX, <Atom instance> ligcovalent:A:CYS449:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS449:CX, <Atom instance> ligcovalent:A:CYS449:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS449:CX, <Atom instance> ligcovalent:A:CYS449:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS449:CX, <Atom instance> ligcovalent:A:CYS449:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS449:CX, <Atom instance> ligcovalent:A:CYS449:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS449:CX, <Atom instance> ligcovalent:A:CYS449:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 17
len( CX ).bonds= 3
skipping b= CX - CX
skipping b= CX - CX
skipping b= CX - NX
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS449:CX, <Atom instance> ligcovalent:A:CYS449:OX)]
newQ= [(<Atom instance> ligcovalent:A:CYS449:CX, <Atom instance> ligcovalent:A:CYS449:OX)]
@@@@len(newq)= 1
queue= [(<Atom instance> ligcovalent:A:CYS449:CX, <Atom instance> ligcovalent:A:CYS449:OX)]


writing and calling wL with nA= OX - 17
wBF2: wrote  OX
!!!2:calling wL


in writeLevel with  OX  outatom_counter= 18
len( OX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []
 currently queue= CX - OX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS449:CX, <Atom instance> ligcovalent:A:CYS449:OX)]
 processing queue entry:  CX - OX
in wBF with fromAtom= CX + startAtom= OX startAtom.used= 0
wBF: wrote  OX
self.outatom_counter= 19


writing and calling wL with nA= CX - 19
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 20
len( CX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []
 currently queue=
CX : OX : queue= []
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 21


writing and calling wL with nA= CX - 21
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 22
len( CX ).bonds= 1
skipping b= CX - CX
returning queue= []
newQ= []
 currently queue=
CX : CX : queue= []
wrote flex file ligcovalent_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: ligcovalent_flex.pdbqt
wrote rigid file: ligcovalent_rigid.pdbqt
4---done
setting PYTHONHOME environment
setting PYTHONHOME environment
!unable to use ligand.TORSDOF! torsdof always set to ligand.ndihe= 7
5---done
 concat 10 log files... done.
Job finished, good luck!
rm: 无法删除'chimera.com': 没有那个文件或目录
rm: 无法删除'tmp.mol2': 没有那个文件或目录
Done
Processing residue A:CYS63
[start] output filename is: ligcovalent_single.pdb
CHAIN A
Writing output filename: ligcovalent_single.pdb
1---ligcovalent.pdb prepared...
1.5--done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= fixed  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  fixed
merged  0  nonpolar hydrogens
end of base class init
using std outputfilename  fixed.pdbqt
wrote  fixed  to  fixed.pdbqt
2---done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= ligcovalent  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  ligcovalent
merged  21  nonpolar hydrogens
end of base class init
using std outputfilename  ligcovalent.pdbqt
wrote  ligcovalent  to  ligcovalent.pdbqt
3---done
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> fixed:A:CYS63 with 6 MolKit.molecule.Atom]
calling setAutoFlexFields with  fixed:A:CYS63
in setAutoFlexFields with  fixed:A:CYS63
len(rotatables)= 1
returning res.torscount= 1
res.root= CA
ntors= 1
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= fixed_flex.pdbqt
res_total= 1
in writeResidue with  fixed:A:CYS63
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS63:N, <Atom instance> fixed:A:CYS63:CA)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS63:CA, <Atom instance> fixed:A:CYS63:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS63:CA, <Atom instance> fixed:A:CYS63:C)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3


writing and calling wL with nA= SG - 3
wBF2: wrote  SG
!!!2:calling wL


in writeLevel with  SG  outatom_counter= 4
len( SG ).bonds= 1
skipping b= CB - SG
returning queue= []
newQ= []
 currently queue=
CA : CB : queue= []
wrote flex file fixed_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: fixed_flex.pdbqt
wrote rigid file: fixed_rigid.pdbqt
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> ligcovalent:A:CYS63 with 28 MolKit.molecule.Atom]
calling setAutoFlexFields with  ligcovalent:A:CYS63
in setAutoFlexFields with  ligcovalent:A:CYS63
len(rotatables)= 8
returning res.torscount= 7
res.root= CA
ntors= 7
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= ligcovalent_flex.pdbqt
res_total= 7
in writeResidue with  ligcovalent:A:CYS63
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS63:CA, <Atom instance> ligcovalent:A:CYS63:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS63:CA, <Atom instance> ligcovalent:A:CYS63:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS63:N, <Atom instance> ligcovalent:A:CYS63:CA)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3
 currently queue= CB - SG ,
CA : CB : queue= [(<Atom instance> ligcovalent:A:CYS63:CB, <Atom instance> ligcovalent:A:CYS63:SG)]
 processing queue entry:  CB - SG
in wBF with fromAtom= CB + startAtom= SG startAtom.used= 0
wBF: wrote  SG
self.outatom_counter= 4
 currently queue= SG - CX ,
CB : SG : queue= [(<Atom instance> ligcovalent:A:CYS63:SG, <Atom instance> ligcovalent:A:CYS63:CX)]
 processing queue entry:  SG - CX
in wBF with fromAtom= SG + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 5
 currently queue= CX - CX ,
SG : CX : queue= [(<Atom instance> ligcovalent:A:CYS63:CX, <Atom instance> ligcovalent:A:CYS63:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 6
 currently queue= CX - CX , CX - CX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS63:CX, <Atom instance> ligcovalent:A:CYS63:CX), (<Atom instance> ligcovalent:A:CYS63:CX, <Atom instance> ligcovalent:A:CYS63:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 7


writing and calling wL with nA= OX - 7
wBF2: wrote  OX
!!!2:calling wL


in writeLevel with  OX  outatom_counter= 8
len( OX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []


writing and calling wL with nA= NX - 8
wBF2: wrote  NX
!!!2:calling wL


in writeLevel with  NX  outatom_counter= 9
len( NX ).bonds= 3
skipping b= NX - CX
processing b= NX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
processing b= CX - NX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 11
len( CX ).bonds= 2
skipping b= NX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 12
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 13
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 14
len( CX ).bonds= 3
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 15
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 16
len( CX ).bonds= 3
processing b= OX - CX  activeTors= 1
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
CX wL: queue= [(<Atom instance> ligcovalent:A:CYS63:CX, <Atom instance> ligcovalent:A:CYS63:OX)]
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 17
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 18
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS63:CX, <Atom instance> ligcovalent:A:CYS63:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS63:CX, <Atom instance> ligcovalent:A:CYS63:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS63:CX, <Atom instance> ligcovalent:A:CYS63:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS63:CX, <Atom instance> ligcovalent:A:CYS63:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS63:CX, <Atom instance> ligcovalent:A:CYS63:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS63:CX, <Atom instance> ligcovalent:A:CYS63:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS63:CX, <Atom instance> ligcovalent:A:CYS63:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS63:CX, <Atom instance> ligcovalent:A:CYS63:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS63:CX, <Atom instance> ligcovalent:A:CYS63:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS63:CX, <Atom instance> ligcovalent:A:CYS63:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS63:CX, <Atom instance> ligcovalent:A:CYS63:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS63:CX, <Atom instance> ligcovalent:A:CYS63:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 18
len( CX ).bonds= 3
skipping b= CX - CX
skipping b= CX - CX
skipping b= CX - NX
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS63:CX, <Atom instance> ligcovalent:A:CYS63:OX)]
newQ= [(<Atom instance> ligcovalent:A:CYS63:CX, <Atom instance> ligcovalent:A:CYS63:OX)]
@@@@len(newq)= 1
queue= [(<Atom instance> ligcovalent:A:CYS63:CX, <Atom instance> ligcovalent:A:CYS63:OX)]
 currently queue= CX - OX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS63:CX, <Atom instance> ligcovalent:A:CYS63:OX)]
 processing queue entry:  CX - OX
in wBF with fromAtom= CX + startAtom= OX startAtom.used= 0
wBF: wrote  OX
self.outatom_counter= 19


writing and calling wL with nA= CX - 19
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 20
len( CX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []
 currently queue=
CX : OX : queue= []
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 21


writing and calling wL with nA= CX - 21
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 22
len( CX ).bonds= 1
skipping b= CX - CX
returning queue= []
newQ= []
 currently queue=
CX : CX : queue= []
wrote flex file ligcovalent_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: ligcovalent_flex.pdbqt
wrote rigid file: ligcovalent_rigid.pdbqt
4---done
setting PYTHONHOME environment
setting PYTHONHOME environment
!unable to use ligand.TORSDOF! torsdof always set to ligand.ndihe= 7
5---done
 concat 10 log files... done.
Job finished, good luck!
rm: 无法删除'chimera.com': 没有那个文件或目录
rm: 无法删除'tmp.mol2': 没有那个文件或目录
Done
Processing residue A:CYS63
[start] output filename is: ligcovalent_single.pdb
CHAIN A
Writing output filename: ligcovalent_single.pdb
1---ligcovalent.pdb prepared...
1.5--done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= fixed  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  fixed
merged  0  nonpolar hydrogens
end of base class init
using std outputfilename  fixed.pdbqt
wrote  fixed  to  fixed.pdbqt
2---done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= ligcovalent  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  ligcovalent
merged  21  nonpolar hydrogens
end of base class init
using std outputfilename  ligcovalent.pdbqt
wrote  ligcovalent  to  ligcovalent.pdbqt
3---done
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> fixed:A:CYS63 with 6 MolKit.molecule.Atom]
calling setAutoFlexFields with  fixed:A:CYS63
in setAutoFlexFields with  fixed:A:CYS63
len(rotatables)= 1
returning res.torscount= 1
res.root= CA
ntors= 1
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= fixed_flex.pdbqt
res_total= 1
in writeResidue with  fixed:A:CYS63
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS63:CA, <Atom instance> fixed:A:CYS63:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS63:CA, <Atom instance> fixed:A:CYS63:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS63:N, <Atom instance> fixed:A:CYS63:CA)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3


writing and calling wL with nA= SG - 3
wBF2: wrote  SG
!!!2:calling wL


in writeLevel with  SG  outatom_counter= 4
len( SG ).bonds= 1
skipping b= CB - SG
returning queue= []
newQ= []
 currently queue=
CA : CB : queue= []
wrote flex file fixed_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: fixed_flex.pdbqt
wrote rigid file: fixed_rigid.pdbqt
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> ligcovalent:A:CYS63 with 28 MolKit.molecule.Atom]
calling setAutoFlexFields with  ligcovalent:A:CYS63
in setAutoFlexFields with  ligcovalent:A:CYS63
len(rotatables)= 8
returning res.torscount= 7
res.root= CA
ntors= 7
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= ligcovalent_flex.pdbqt
res_total= 7
in writeResidue with  ligcovalent:A:CYS63
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS63:CA, <Atom instance> ligcovalent:A:CYS63:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS63:CA, <Atom instance> ligcovalent:A:CYS63:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS63:N, <Atom instance> ligcovalent:A:CYS63:CA)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3
 currently queue= CB - SG ,
CA : CB : queue= [(<Atom instance> ligcovalent:A:CYS63:CB, <Atom instance> ligcovalent:A:CYS63:SG)]
 processing queue entry:  CB - SG
in wBF with fromAtom= CB + startAtom= SG startAtom.used= 0
wBF: wrote  SG
self.outatom_counter= 4
 currently queue= SG - CX ,
CB : SG : queue= [(<Atom instance> ligcovalent:A:CYS63:SG, <Atom instance> ligcovalent:A:CYS63:CX)]
 processing queue entry:  SG - CX
in wBF with fromAtom= SG + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 5
 currently queue= CX - CX ,
SG : CX : queue= [(<Atom instance> ligcovalent:A:CYS63:CX, <Atom instance> ligcovalent:A:CYS63:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 6
 currently queue= CX - CX , CX - CX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS63:CX, <Atom instance> ligcovalent:A:CYS63:CX), (<Atom instance> ligcovalent:A:CYS63:CX, <Atom instance> ligcovalent:A:CYS63:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 7


writing and calling wL with nA= OX - 7
wBF2: wrote  OX
!!!2:calling wL


in writeLevel with  OX  outatom_counter= 8
len( OX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []


writing and calling wL with nA= NX - 8
wBF2: wrote  NX
!!!2:calling wL


in writeLevel with  NX  outatom_counter= 9
len( NX ).bonds= 3
processing b= NX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= NX - CX
processing b= CX - NX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 11
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= NX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 12
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 13
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 14
len( CX ).bonds= 3
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 15
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 16
len( CX ).bonds= 3
processing b= OX - CX  activeTors= 1
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
CX wL: queue= [(<Atom instance> ligcovalent:A:CYS63:CX, <Atom instance> ligcovalent:A:CYS63:OX)]
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 17
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 18
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS63:CX, <Atom instance> ligcovalent:A:CYS63:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS63:CX, <Atom instance> ligcovalent:A:CYS63:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS63:CX, <Atom instance> ligcovalent:A:CYS63:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS63:CX, <Atom instance> ligcovalent:A:CYS63:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS63:CX, <Atom instance> ligcovalent:A:CYS63:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS63:CX, <Atom instance> ligcovalent:A:CYS63:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS63:CX, <Atom instance> ligcovalent:A:CYS63:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS63:CX, <Atom instance> ligcovalent:A:CYS63:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS63:CX, <Atom instance> ligcovalent:A:CYS63:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS63:CX, <Atom instance> ligcovalent:A:CYS63:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS63:CX, <Atom instance> ligcovalent:A:CYS63:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS63:CX, <Atom instance> ligcovalent:A:CYS63:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 18
len( CX ).bonds= 3
skipping b= CX - CX
skipping b= CX - NX
skipping b= CX - CX
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS63:CX, <Atom instance> ligcovalent:A:CYS63:OX)]
newQ= [(<Atom instance> ligcovalent:A:CYS63:CX, <Atom instance> ligcovalent:A:CYS63:OX)]
@@@@len(newq)= 1
queue= [(<Atom instance> ligcovalent:A:CYS63:CX, <Atom instance> ligcovalent:A:CYS63:OX)]
 currently queue= CX - OX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS63:CX, <Atom instance> ligcovalent:A:CYS63:OX)]
 processing queue entry:  CX - OX
in wBF with fromAtom= CX + startAtom= OX startAtom.used= 0
wBF: wrote  OX
self.outatom_counter= 19


writing and calling wL with nA= CX - 19
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 20
len( CX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []
 currently queue=
CX : OX : queue= []
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 21


writing and calling wL with nA= CX - 21
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 22
len( CX ).bonds= 1
skipping b= CX - CX
returning queue= []
newQ= []
 currently queue=
CX : CX : queue= []
wrote flex file ligcovalent_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: ligcovalent_flex.pdbqt
wrote rigid file: ligcovalent_rigid.pdbqt
4---done
setting PYTHONHOME environment
setting PYTHONHOME environment
!unable to use ligand.TORSDOF! torsdof always set to ligand.ndihe= 7
5---done
 concat 10 log files... done.
Job finished, good luck!
rm: 无法删除'chimera.com': 没有那个文件或目录
rm: 无法删除'tmp.mol2': 没有那个文件或目录
Done
Processing residue A:CYS751
[start] output filename is: ligcovalent_single.pdb
CHAIN A
Writing output filename: ligcovalent_single.pdb
1---ligcovalent.pdb prepared...
1.5--done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= fixed  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  fixed
merged  0  nonpolar hydrogens
end of base class init
using std outputfilename  fixed.pdbqt
wrote  fixed  to  fixed.pdbqt
2---done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= ligcovalent  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  ligcovalent
merged  21  nonpolar hydrogens
end of base class init
using std outputfilename  ligcovalent.pdbqt
wrote  ligcovalent  to  ligcovalent.pdbqt
3---done
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> fixed:A:CYS751 with 6 MolKit.molecule.Atom]
calling setAutoFlexFields with  fixed:A:CYS751
in setAutoFlexFields with  fixed:A:CYS751
len(rotatables)= 1
returning res.torscount= 1
res.root= CA
ntors= 1
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= fixed_flex.pdbqt
res_total= 1
in writeResidue with  fixed:A:CYS751
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS751:N, <Atom instance> fixed:A:CYS751:CA)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS751:CA, <Atom instance> fixed:A:CYS751:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS751:CA, <Atom instance> fixed:A:CYS751:CB)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3


writing and calling wL with nA= SG - 3
wBF2: wrote  SG
!!!2:calling wL


in writeLevel with  SG  outatom_counter= 4
len( SG ).bonds= 1
skipping b= CB - SG
returning queue= []
newQ= []
 currently queue=
CA : CB : queue= []
wrote flex file fixed_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: fixed_flex.pdbqt
wrote rigid file: fixed_rigid.pdbqt
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> ligcovalent:A:CYS751 with 28 MolKit.molecule.Atom]
calling setAutoFlexFields with  ligcovalent:A:CYS751
in setAutoFlexFields with  ligcovalent:A:CYS751
len(rotatables)= 8
returning res.torscount= 7
res.root= CA
ntors= 7
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= ligcovalent_flex.pdbqt
res_total= 7
in writeResidue with  ligcovalent:A:CYS751
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS751:CA, <Atom instance> ligcovalent:A:CYS751:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS751:CA, <Atom instance> ligcovalent:A:CYS751:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS751:N, <Atom instance> ligcovalent:A:CYS751:CA)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3
 currently queue= CB - SG ,
CA : CB : queue= [(<Atom instance> ligcovalent:A:CYS751:CB, <Atom instance> ligcovalent:A:CYS751:SG)]
 processing queue entry:  CB - SG
in wBF with fromAtom= CB + startAtom= SG startAtom.used= 0
wBF: wrote  SG
self.outatom_counter= 4
 currently queue= SG - CX ,
CB : SG : queue= [(<Atom instance> ligcovalent:A:CYS751:SG, <Atom instance> ligcovalent:A:CYS751:CX)]
 processing queue entry:  SG - CX
in wBF with fromAtom= SG + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 5
 currently queue= CX - CX ,
SG : CX : queue= [(<Atom instance> ligcovalent:A:CYS751:CX, <Atom instance> ligcovalent:A:CYS751:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 6
 currently queue= CX - CX , CX - CX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS751:CX, <Atom instance> ligcovalent:A:CYS751:CX), (<Atom instance> ligcovalent:A:CYS751:CX, <Atom instance> ligcovalent:A:CYS751:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 7


writing and calling wL with nA= CX - 7
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 8
len( CX ).bonds= 1
skipping b= CX - CX
returning queue= []
newQ= []
 currently queue=
CX : CX : queue= []
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 9


writing and calling wL with nA= NX - 9
wBF2: wrote  NX
!!!2:calling wL


in writeLevel with  NX  outatom_counter= 10
len( NX ).bonds= 3
processing b= CX - NX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= NX - CX
processing b= NX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 12
len( CX ).bonds= 3
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - NX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 14
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 15
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 16
len( CX ).bonds= 3
processing b= OX - CX  activeTors= 1
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
CX wL: queue= [(<Atom instance> ligcovalent:A:CYS751:CX, <Atom instance> ligcovalent:A:CYS751:OX)]
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 17
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS751:CX, <Atom instance> ligcovalent:A:CYS751:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS751:CX, <Atom instance> ligcovalent:A:CYS751:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS751:CX, <Atom instance> ligcovalent:A:CYS751:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS751:CX, <Atom instance> ligcovalent:A:CYS751:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS751:CX, <Atom instance> ligcovalent:A:CYS751:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS751:CX, <Atom instance> ligcovalent:A:CYS751:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 17
len( CX ).bonds= 3
skipping b= CX - CX
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 18
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 19
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= []
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS751:CX, <Atom instance> ligcovalent:A:CYS751:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS751:CX, <Atom instance> ligcovalent:A:CYS751:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 19
len( CX ).bonds= 2
skipping b= NX - CX
skipping b= CX - CX
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS751:CX, <Atom instance> ligcovalent:A:CYS751:OX)]
newQ= [(<Atom instance> ligcovalent:A:CYS751:CX, <Atom instance> ligcovalent:A:CYS751:OX)]
@@@@len(newq)= 1
queue= [(<Atom instance> ligcovalent:A:CYS751:CX, <Atom instance> ligcovalent:A:CYS751:OX)]


writing and calling wL with nA= OX - 19
wBF2: wrote  OX
!!!2:calling wL


in writeLevel with  OX  outatom_counter= 20
len( OX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []
 currently queue= CX - OX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS751:CX, <Atom instance> ligcovalent:A:CYS751:OX)]
 processing queue entry:  CX - OX
in wBF with fromAtom= CX + startAtom= OX startAtom.used= 0
wBF: wrote  OX
self.outatom_counter= 21


writing and calling wL with nA= CX - 21
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 22
len( CX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []
 currently queue=
CX : OX : queue= []
wrote flex file ligcovalent_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: ligcovalent_flex.pdbqt
wrote rigid file: ligcovalent_rigid.pdbqt
4---done
setting PYTHONHOME environment
setting PYTHONHOME environment
!unable to use ligand.TORSDOF! torsdof always set to ligand.ndihe= 7
5---done
 concat 10 log files... done.
Job finished, good luck!
rm: 无法删除'chimera.com': 没有那个文件或目录
rm: 无法删除'tmp.mol2': 没有那个文件或目录
Done
Processing residue A:CYS27
[start] output filename is: ligcovalent_single.pdb
CHAIN A
Writing output filename: ligcovalent_single.pdb
1---ligcovalent.pdb prepared...
1.5--done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= fixed  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  fixed
merged  0  nonpolar hydrogens
end of base class init
using std outputfilename  fixed.pdbqt
wrote  fixed  to  fixed.pdbqt
2---done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= ligcovalent  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  ligcovalent
merged  21  nonpolar hydrogens
end of base class init
using std outputfilename  ligcovalent.pdbqt
wrote  ligcovalent  to  ligcovalent.pdbqt
3---done
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> fixed:A:CYS27 with 6 MolKit.molecule.Atom]
calling setAutoFlexFields with  fixed:A:CYS27
in setAutoFlexFields with  fixed:A:CYS27
len(rotatables)= 1
returning res.torscount= 1
res.root= CA
ntors= 1
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= fixed_flex.pdbqt
res_total= 1
in writeResidue with  fixed:A:CYS27
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS27:N, <Atom instance> fixed:A:CYS27:CA)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS27:CA, <Atom instance> fixed:A:CYS27:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS27:CA, <Atom instance> fixed:A:CYS27:CB)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3


writing and calling wL with nA= SG - 3
wBF2: wrote  SG
!!!2:calling wL


in writeLevel with  SG  outatom_counter= 4
len( SG ).bonds= 1
skipping b= CB - SG
returning queue= []
newQ= []
 currently queue=
CA : CB : queue= []
wrote flex file fixed_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: fixed_flex.pdbqt
wrote rigid file: fixed_rigid.pdbqt
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> ligcovalent:A:CYS27 with 28 MolKit.molecule.Atom]
calling setAutoFlexFields with  ligcovalent:A:CYS27
in setAutoFlexFields with  ligcovalent:A:CYS27
len(rotatables)= 8
returning res.torscount= 7
res.root= CA
ntors= 7
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= ligcovalent_flex.pdbqt
res_total= 7
in writeResidue with  ligcovalent:A:CYS27
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS27:N, <Atom instance> ligcovalent:A:CYS27:CA)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS27:CA, <Atom instance> ligcovalent:A:CYS27:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS27:CA, <Atom instance> ligcovalent:A:CYS27:CB)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3
 currently queue= CB - SG ,
CA : CB : queue= [(<Atom instance> ligcovalent:A:CYS27:CB, <Atom instance> ligcovalent:A:CYS27:SG)]
 processing queue entry:  CB - SG
in wBF with fromAtom= CB + startAtom= SG startAtom.used= 0
wBF: wrote  SG
self.outatom_counter= 4
 currently queue= SG - CX ,
CB : SG : queue= [(<Atom instance> ligcovalent:A:CYS27:SG, <Atom instance> ligcovalent:A:CYS27:CX)]
 processing queue entry:  SG - CX
in wBF with fromAtom= SG + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 5
 currently queue= CX - CX ,
SG : CX : queue= [(<Atom instance> ligcovalent:A:CYS27:CX, <Atom instance> ligcovalent:A:CYS27:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 6
 currently queue= CX - CX , CX - CX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS27:CX, <Atom instance> ligcovalent:A:CYS27:CX), (<Atom instance> ligcovalent:A:CYS27:CX, <Atom instance> ligcovalent:A:CYS27:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 7


writing and calling wL with nA= OX - 7
wBF2: wrote  OX
!!!2:calling wL


in writeLevel with  OX  outatom_counter= 8
len( OX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []


writing and calling wL with nA= NX - 8
wBF2: wrote  NX
!!!2:calling wL


in writeLevel with  NX  outatom_counter= 9
len( NX ).bonds= 3
skipping b= NX - CX
processing b= NX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
processing b= CX - NX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 11
len( CX ).bonds= 2
skipping b= NX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 12
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 13
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 14
len( CX ).bonds= 3
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 15
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 16
len( CX ).bonds= 3
processing b= OX - CX  activeTors= 1
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
CX wL: queue= [(<Atom instance> ligcovalent:A:CYS27:CX, <Atom instance> ligcovalent:A:CYS27:OX)]
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 17
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 18
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS27:CX, <Atom instance> ligcovalent:A:CYS27:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS27:CX, <Atom instance> ligcovalent:A:CYS27:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS27:CX, <Atom instance> ligcovalent:A:CYS27:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS27:CX, <Atom instance> ligcovalent:A:CYS27:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS27:CX, <Atom instance> ligcovalent:A:CYS27:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS27:CX, <Atom instance> ligcovalent:A:CYS27:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS27:CX, <Atom instance> ligcovalent:A:CYS27:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS27:CX, <Atom instance> ligcovalent:A:CYS27:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS27:CX, <Atom instance> ligcovalent:A:CYS27:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS27:CX, <Atom instance> ligcovalent:A:CYS27:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS27:CX, <Atom instance> ligcovalent:A:CYS27:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS27:CX, <Atom instance> ligcovalent:A:CYS27:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 18
len( CX ).bonds= 3
skipping b= CX - CX
skipping b= CX - NX
skipping b= CX - CX
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS27:CX, <Atom instance> ligcovalent:A:CYS27:OX)]
newQ= [(<Atom instance> ligcovalent:A:CYS27:CX, <Atom instance> ligcovalent:A:CYS27:OX)]
@@@@len(newq)= 1
queue= [(<Atom instance> ligcovalent:A:CYS27:CX, <Atom instance> ligcovalent:A:CYS27:OX)]
 currently queue= CX - OX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS27:CX, <Atom instance> ligcovalent:A:CYS27:OX)]
 processing queue entry:  CX - OX
in wBF with fromAtom= CX + startAtom= OX startAtom.used= 0
wBF: wrote  OX
self.outatom_counter= 19


writing and calling wL with nA= CX - 19
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 20
len( CX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []
 currently queue=
CX : OX : queue= []
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 21


writing and calling wL with nA= CX - 21
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 22
len( CX ).bonds= 1
skipping b= CX - CX
returning queue= []
newQ= []
 currently queue=
CX : CX : queue= []
wrote flex file ligcovalent_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: ligcovalent_flex.pdbqt
wrote rigid file: ligcovalent_rigid.pdbqt
4---done
setting PYTHONHOME environment
setting PYTHONHOME environment
!unable to use ligand.TORSDOF! torsdof always set to ligand.ndihe= 7
5---done
 concat 10 log files... done.
Job finished, good luck!
rm: 无法删除'chimera.com': 没有那个文件或目录
rm: 无法删除'tmp.mol2': 没有那个文件或目录
Done
Processing residue A:CYS294
[start] output filename is: ligcovalent_single.pdb
CHAIN A
Writing output filename: ligcovalent_single.pdb
1---ligcovalent.pdb prepared...
1.5--done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= fixed  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  fixed
merged  0  nonpolar hydrogens
end of base class init
using std outputfilename  fixed.pdbqt
wrote  fixed  to  fixed.pdbqt
2---done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= ligcovalent  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  ligcovalent
merged  21  nonpolar hydrogens
end of base class init
using std outputfilename  ligcovalent.pdbqt
wrote  ligcovalent  to  ligcovalent.pdbqt
3---done
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> fixed:A:CYS294 with 6 MolKit.molecule.Atom]
calling setAutoFlexFields with  fixed:A:CYS294
in setAutoFlexFields with  fixed:A:CYS294
len(rotatables)= 1
returning res.torscount= 1
res.root= CA
ntors= 1
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= fixed_flex.pdbqt
res_total= 1
in writeResidue with  fixed:A:CYS294
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS294:CA, <Atom instance> fixed:A:CYS294:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS294:CA, <Atom instance> fixed:A:CYS294:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS294:N, <Atom instance> fixed:A:CYS294:CA)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3


writing and calling wL with nA= SG - 3
wBF2: wrote  SG
!!!2:calling wL


in writeLevel with  SG  outatom_counter= 4
len( SG ).bonds= 1
skipping b= CB - SG
returning queue= []
newQ= []
 currently queue=
CA : CB : queue= []
wrote flex file fixed_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: fixed_flex.pdbqt
wrote rigid file: fixed_rigid.pdbqt
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> ligcovalent:A:CYS294 with 28 MolKit.molecule.Atom]
calling setAutoFlexFields with  ligcovalent:A:CYS294
in setAutoFlexFields with  ligcovalent:A:CYS294
len(rotatables)= 8
returning res.torscount= 7
res.root= CA
ntors= 7
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= ligcovalent_flex.pdbqt
res_total= 7
in writeResidue with  ligcovalent:A:CYS294
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS294:CA, <Atom instance> ligcovalent:A:CYS294:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS294:CA, <Atom instance> ligcovalent:A:CYS294:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS294:N, <Atom instance> ligcovalent:A:CYS294:CA)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3
 currently queue= CB - SG ,
CA : CB : queue= [(<Atom instance> ligcovalent:A:CYS294:CB, <Atom instance> ligcovalent:A:CYS294:SG)]
 processing queue entry:  CB - SG
in wBF with fromAtom= CB + startAtom= SG startAtom.used= 0
wBF: wrote  SG
self.outatom_counter= 4
 currently queue= SG - CX ,
CB : SG : queue= [(<Atom instance> ligcovalent:A:CYS294:SG, <Atom instance> ligcovalent:A:CYS294:CX)]
 processing queue entry:  SG - CX
in wBF with fromAtom= SG + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 5
 currently queue= CX - CX ,
SG : CX : queue= [(<Atom instance> ligcovalent:A:CYS294:CX, <Atom instance> ligcovalent:A:CYS294:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 6
 currently queue= CX - CX , CX - CX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS294:CX, <Atom instance> ligcovalent:A:CYS294:CX), (<Atom instance> ligcovalent:A:CYS294:CX, <Atom instance> ligcovalent:A:CYS294:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 7


writing and calling wL with nA= CX - 7
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 8
len( CX ).bonds= 1
skipping b= CX - CX
returning queue= []
newQ= []
 currently queue=
CX : CX : queue= []
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 9


writing and calling wL with nA= OX - 9
wBF2: wrote  OX
!!!2:calling wL


in writeLevel with  OX  outatom_counter= 10
len( OX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []


writing and calling wL with nA= NX - 10
wBF2: wrote  NX
!!!2:calling wL


in writeLevel with  NX  outatom_counter= 11
len( NX ).bonds= 3
skipping b= NX - CX
processing b= NX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
processing b= CX - NX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 13
len( CX ).bonds= 2
skipping b= NX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 14
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 15
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 16
len( CX ).bonds= 3
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 17
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 18
len( CX ).bonds= 3
processing b= OX - CX  activeTors= 1
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
CX wL: queue= [(<Atom instance> ligcovalent:A:CYS294:CX, <Atom instance> ligcovalent:A:CYS294:OX)]
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 19
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 20
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS294:CX, <Atom instance> ligcovalent:A:CYS294:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS294:CX, <Atom instance> ligcovalent:A:CYS294:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS294:CX, <Atom instance> ligcovalent:A:CYS294:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS294:CX, <Atom instance> ligcovalent:A:CYS294:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS294:CX, <Atom instance> ligcovalent:A:CYS294:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS294:CX, <Atom instance> ligcovalent:A:CYS294:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS294:CX, <Atom instance> ligcovalent:A:CYS294:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS294:CX, <Atom instance> ligcovalent:A:CYS294:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS294:CX, <Atom instance> ligcovalent:A:CYS294:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS294:CX, <Atom instance> ligcovalent:A:CYS294:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS294:CX, <Atom instance> ligcovalent:A:CYS294:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS294:CX, <Atom instance> ligcovalent:A:CYS294:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 20
len( CX ).bonds= 3
skipping b= CX - CX
skipping b= CX - NX
skipping b= CX - CX
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS294:CX, <Atom instance> ligcovalent:A:CYS294:OX)]
newQ= [(<Atom instance> ligcovalent:A:CYS294:CX, <Atom instance> ligcovalent:A:CYS294:OX)]
@@@@len(newq)= 1
queue= [(<Atom instance> ligcovalent:A:CYS294:CX, <Atom instance> ligcovalent:A:CYS294:OX)]
 currently queue= CX - OX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS294:CX, <Atom instance> ligcovalent:A:CYS294:OX)]
 processing queue entry:  CX - OX
in wBF with fromAtom= CX + startAtom= OX startAtom.used= 0
wBF: wrote  OX
self.outatom_counter= 21


writing and calling wL with nA= CX - 21
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 22
len( CX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []
 currently queue=
CX : OX : queue= []
wrote flex file ligcovalent_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: ligcovalent_flex.pdbqt
wrote rigid file: ligcovalent_rigid.pdbqt
4---done
setting PYTHONHOME environment
setting PYTHONHOME environment
!unable to use ligand.TORSDOF! torsdof always set to ligand.ndihe= 7
5---done
 concat 10 log files... done.
Job finished, good luck!
rm: 无法删除'chimera.com': 没有那个文件或目录
rm: 无法删除'tmp.mol2': 没有那个文件或目录
Done
Processing residue A:CYS120
[start] output filename is: ligcovalent_single.pdb
CHAIN A
Writing output filename: ligcovalent_single.pdb
1---ligcovalent.pdb prepared...
1.5--done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= fixed  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  fixed
merged  0  nonpolar hydrogens
end of base class init
using std outputfilename  fixed.pdbqt
wrote  fixed  to  fixed.pdbqt
2---done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= ligcovalent  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  ligcovalent
merged  21  nonpolar hydrogens
end of base class init
using std outputfilename  ligcovalent.pdbqt
wrote  ligcovalent  to  ligcovalent.pdbqt
3---done
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> fixed:A:CYS120 with 6 MolKit.molecule.Atom]
calling setAutoFlexFields with  fixed:A:CYS120
in setAutoFlexFields with  fixed:A:CYS120
len(rotatables)= 1
returning res.torscount= 1
res.root= CA
ntors= 1
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= fixed_flex.pdbqt
res_total= 1
in writeResidue with  fixed:A:CYS120
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS120:N, <Atom instance> fixed:A:CYS120:CA)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS120:CA, <Atom instance> fixed:A:CYS120:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS120:CA, <Atom instance> fixed:A:CYS120:CB)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3


writing and calling wL with nA= SG - 3
wBF2: wrote  SG
!!!2:calling wL


in writeLevel with  SG  outatom_counter= 4
len( SG ).bonds= 1
skipping b= CB - SG
returning queue= []
newQ= []
 currently queue=
CA : CB : queue= []
wrote flex file fixed_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: fixed_flex.pdbqt
wrote rigid file: fixed_rigid.pdbqt
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> ligcovalent:A:CYS120 with 28 MolKit.molecule.Atom]
calling setAutoFlexFields with  ligcovalent:A:CYS120
in setAutoFlexFields with  ligcovalent:A:CYS120
len(rotatables)= 8
returning res.torscount= 7
res.root= CA
ntors= 7
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= ligcovalent_flex.pdbqt
res_total= 7
in writeResidue with  ligcovalent:A:CYS120
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS120:N, <Atom instance> ligcovalent:A:CYS120:CA)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS120:CA, <Atom instance> ligcovalent:A:CYS120:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS120:CA, <Atom instance> ligcovalent:A:CYS120:C)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3
 currently queue= CB - SG ,
CA : CB : queue= [(<Atom instance> ligcovalent:A:CYS120:CB, <Atom instance> ligcovalent:A:CYS120:SG)]
 processing queue entry:  CB - SG
in wBF with fromAtom= CB + startAtom= SG startAtom.used= 0
wBF: wrote  SG
self.outatom_counter= 4
 currently queue= SG - CX ,
CB : SG : queue= [(<Atom instance> ligcovalent:A:CYS120:SG, <Atom instance> ligcovalent:A:CYS120:CX)]
 processing queue entry:  SG - CX
in wBF with fromAtom= SG + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 5
 currently queue= CX - CX ,
SG : CX : queue= [(<Atom instance> ligcovalent:A:CYS120:CX, <Atom instance> ligcovalent:A:CYS120:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 6
 currently queue= CX - CX , CX - CX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS120:CX, <Atom instance> ligcovalent:A:CYS120:CX), (<Atom instance> ligcovalent:A:CYS120:CX, <Atom instance> ligcovalent:A:CYS120:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 7


writing and calling wL with nA= OX - 7
wBF2: wrote  OX
!!!2:calling wL


in writeLevel with  OX  outatom_counter= 8
len( OX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []


writing and calling wL with nA= NX - 8
wBF2: wrote  NX
!!!2:calling wL


in writeLevel with  NX  outatom_counter= 9
len( NX ).bonds= 3
skipping b= NX - CX
processing b= NX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
processing b= CX - NX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 11
len( CX ).bonds= 2
skipping b= NX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 12
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 13
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 14
len( CX ).bonds= 3
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 15
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 16
len( CX ).bonds= 3
processing b= OX - CX  activeTors= 1
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
CX wL: queue= [(<Atom instance> ligcovalent:A:CYS120:CX, <Atom instance> ligcovalent:A:CYS120:OX)]
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 17
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 18
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS120:CX, <Atom instance> ligcovalent:A:CYS120:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS120:CX, <Atom instance> ligcovalent:A:CYS120:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS120:CX, <Atom instance> ligcovalent:A:CYS120:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS120:CX, <Atom instance> ligcovalent:A:CYS120:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS120:CX, <Atom instance> ligcovalent:A:CYS120:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS120:CX, <Atom instance> ligcovalent:A:CYS120:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS120:CX, <Atom instance> ligcovalent:A:CYS120:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS120:CX, <Atom instance> ligcovalent:A:CYS120:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS120:CX, <Atom instance> ligcovalent:A:CYS120:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS120:CX, <Atom instance> ligcovalent:A:CYS120:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS120:CX, <Atom instance> ligcovalent:A:CYS120:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS120:CX, <Atom instance> ligcovalent:A:CYS120:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 18
len( CX ).bonds= 3
skipping b= CX - CX
skipping b= CX - NX
skipping b= CX - CX
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS120:CX, <Atom instance> ligcovalent:A:CYS120:OX)]
newQ= [(<Atom instance> ligcovalent:A:CYS120:CX, <Atom instance> ligcovalent:A:CYS120:OX)]
@@@@len(newq)= 1
queue= [(<Atom instance> ligcovalent:A:CYS120:CX, <Atom instance> ligcovalent:A:CYS120:OX)]
 currently queue= CX - OX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS120:CX, <Atom instance> ligcovalent:A:CYS120:OX)]
 processing queue entry:  CX - OX
in wBF with fromAtom= CX + startAtom= OX startAtom.used= 0
wBF: wrote  OX
self.outatom_counter= 19


writing and calling wL with nA= CX - 19
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 20
len( CX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []
 currently queue=
CX : OX : queue= []
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 21


writing and calling wL with nA= CX - 21
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 22
len( CX ).bonds= 1
skipping b= CX - CX
returning queue= []
newQ= []
 currently queue=
CX : CX : queue= []
wrote flex file ligcovalent_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: ligcovalent_flex.pdbqt
wrote rigid file: ligcovalent_rigid.pdbqt
4---done
setting PYTHONHOME environment
setting PYTHONHOME environment
!unable to use ligand.TORSDOF! torsdof always set to ligand.ndihe= 7
5---done
 concat 10 log files... done.
Job finished, good luck!
rm: 无法删除'chimera.com': 没有那个文件或目录
rm: 无法删除'tmp.mol2': 没有那个文件或目录
Done
Processing residue A:CYS101
[start] output filename is: ligcovalent_single.pdb
CHAIN A
Writing output filename: ligcovalent_single.pdb
1---ligcovalent.pdb prepared...
1.5--done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= fixed  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  fixed
merged  0  nonpolar hydrogens
end of base class init
using std outputfilename  fixed.pdbqt
wrote  fixed  to  fixed.pdbqt
2---done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= ligcovalent  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  ligcovalent
merged  21  nonpolar hydrogens
end of base class init
using std outputfilename  ligcovalent.pdbqt
wrote  ligcovalent  to  ligcovalent.pdbqt
3---done
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> fixed:A:CYS101 with 6 MolKit.molecule.Atom]
calling setAutoFlexFields with  fixed:A:CYS101
in setAutoFlexFields with  fixed:A:CYS101
len(rotatables)= 1
returning res.torscount= 1
res.root= CA
ntors= 1
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= fixed_flex.pdbqt
res_total= 1
in writeResidue with  fixed:A:CYS101
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS101:N, <Atom instance> fixed:A:CYS101:CA)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS101:CA, <Atom instance> fixed:A:CYS101:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS101:CA, <Atom instance> fixed:A:CYS101:C)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3


writing and calling wL with nA= SG - 3
wBF2: wrote  SG
!!!2:calling wL


in writeLevel with  SG  outatom_counter= 4
len( SG ).bonds= 1
skipping b= CB - SG
returning queue= []
newQ= []
 currently queue=
CA : CB : queue= []
wrote flex file fixed_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: fixed_flex.pdbqt
wrote rigid file: fixed_rigid.pdbqt
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> ligcovalent:A:CYS101 with 28 MolKit.molecule.Atom]
calling setAutoFlexFields with  ligcovalent:A:CYS101
in setAutoFlexFields with  ligcovalent:A:CYS101
len(rotatables)= 8
returning res.torscount= 7
res.root= CA
ntors= 7
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= ligcovalent_flex.pdbqt
res_total= 7
in writeResidue with  ligcovalent:A:CYS101
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS101:CA, <Atom instance> ligcovalent:A:CYS101:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS101:CA, <Atom instance> ligcovalent:A:CYS101:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS101:N, <Atom instance> ligcovalent:A:CYS101:CA)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3
 currently queue= CB - SG ,
CA : CB : queue= [(<Atom instance> ligcovalent:A:CYS101:CB, <Atom instance> ligcovalent:A:CYS101:SG)]
 processing queue entry:  CB - SG
in wBF with fromAtom= CB + startAtom= SG startAtom.used= 0
wBF: wrote  SG
self.outatom_counter= 4
 currently queue= SG - CX ,
CB : SG : queue= [(<Atom instance> ligcovalent:A:CYS101:SG, <Atom instance> ligcovalent:A:CYS101:CX)]
 processing queue entry:  SG - CX
in wBF with fromAtom= SG + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 5
 currently queue= CX - CX ,
SG : CX : queue= [(<Atom instance> ligcovalent:A:CYS101:CX, <Atom instance> ligcovalent:A:CYS101:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 6
 currently queue= CX - CX , CX - CX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS101:CX, <Atom instance> ligcovalent:A:CYS101:CX), (<Atom instance> ligcovalent:A:CYS101:CX, <Atom instance> ligcovalent:A:CYS101:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 7


writing and calling wL with nA= OX - 7
wBF2: wrote  OX
!!!2:calling wL


in writeLevel with  OX  outatom_counter= 8
len( OX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []


writing and calling wL with nA= NX - 8
wBF2: wrote  NX
!!!2:calling wL


in writeLevel with  NX  outatom_counter= 9
len( NX ).bonds= 3
skipping b= NX - CX
processing b= NX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
processing b= CX - NX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 11
len( CX ).bonds= 2
skipping b= NX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 12
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 13
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 14
len( CX ).bonds= 3
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 15
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 16
len( CX ).bonds= 3
processing b= OX - CX  activeTors= 1
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
CX wL: queue= [(<Atom instance> ligcovalent:A:CYS101:CX, <Atom instance> ligcovalent:A:CYS101:OX)]
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 17
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 18
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS101:CX, <Atom instance> ligcovalent:A:CYS101:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS101:CX, <Atom instance> ligcovalent:A:CYS101:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS101:CX, <Atom instance> ligcovalent:A:CYS101:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS101:CX, <Atom instance> ligcovalent:A:CYS101:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS101:CX, <Atom instance> ligcovalent:A:CYS101:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS101:CX, <Atom instance> ligcovalent:A:CYS101:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS101:CX, <Atom instance> ligcovalent:A:CYS101:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS101:CX, <Atom instance> ligcovalent:A:CYS101:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS101:CX, <Atom instance> ligcovalent:A:CYS101:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS101:CX, <Atom instance> ligcovalent:A:CYS101:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS101:CX, <Atom instance> ligcovalent:A:CYS101:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS101:CX, <Atom instance> ligcovalent:A:CYS101:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 18
len( CX ).bonds= 3
skipping b= CX - CX
skipping b= CX - NX
skipping b= CX - CX
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS101:CX, <Atom instance> ligcovalent:A:CYS101:OX)]
newQ= [(<Atom instance> ligcovalent:A:CYS101:CX, <Atom instance> ligcovalent:A:CYS101:OX)]
@@@@len(newq)= 1
queue= [(<Atom instance> ligcovalent:A:CYS101:CX, <Atom instance> ligcovalent:A:CYS101:OX)]
 currently queue= CX - OX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS101:CX, <Atom instance> ligcovalent:A:CYS101:OX)]
 processing queue entry:  CX - OX
in wBF with fromAtom= CX + startAtom= OX startAtom.used= 0
wBF: wrote  OX
self.outatom_counter= 19


writing and calling wL with nA= CX - 19
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 20
len( CX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []
 currently queue=
CX : OX : queue= []
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 21


writing and calling wL with nA= CX - 21
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 22
len( CX ).bonds= 1
skipping b= CX - CX
returning queue= []
newQ= []
 currently queue=
CX : CX : queue= []
wrote flex file ligcovalent_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: ligcovalent_flex.pdbqt
wrote rigid file: ligcovalent_rigid.pdbqt
4---done
setting PYTHONHOME environment
setting PYTHONHOME environment
!unable to use ligand.TORSDOF! torsdof always set to ligand.ndihe= 7
5---done
 concat 10 log files... done.
Job finished, good luck!
rm: 无法删除'chimera.com': 没有那个文件或目录
rm: 无法删除'tmp.mol2': 没有那个文件或目录
Done
Processing residue A:CYS98
[start] output filename is: ligcovalent_single.pdb
CHAIN A
Writing output filename: ligcovalent_single.pdb
1---ligcovalent.pdb prepared...
1.5--done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= fixed  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  fixed
merged  0  nonpolar hydrogens
end of base class init
using std outputfilename  fixed.pdbqt
wrote  fixed  to  fixed.pdbqt
2---done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= ligcovalent  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  ligcovalent
merged  21  nonpolar hydrogens
end of base class init
using std outputfilename  ligcovalent.pdbqt
wrote  ligcovalent  to  ligcovalent.pdbqt
3---done
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> fixed:A:CYS98 with 6 MolKit.molecule.Atom]
calling setAutoFlexFields with  fixed:A:CYS98
in setAutoFlexFields with  fixed:A:CYS98
len(rotatables)= 1
returning res.torscount= 1
res.root= CA
ntors= 1
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= fixed_flex.pdbqt
res_total= 1
in writeResidue with  fixed:A:CYS98
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS98:CA, <Atom instance> fixed:A:CYS98:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS98:CA, <Atom instance> fixed:A:CYS98:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS98:N, <Atom instance> fixed:A:CYS98:CA)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3


writing and calling wL with nA= SG - 3
wBF2: wrote  SG
!!!2:calling wL


in writeLevel with  SG  outatom_counter= 4
len( SG ).bonds= 1
skipping b= CB - SG
returning queue= []
newQ= []
 currently queue=
CA : CB : queue= []
wrote flex file fixed_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: fixed_flex.pdbqt
wrote rigid file: fixed_rigid.pdbqt
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> ligcovalent:A:CYS98 with 28 MolKit.molecule.Atom]
calling setAutoFlexFields with  ligcovalent:A:CYS98
in setAutoFlexFields with  ligcovalent:A:CYS98
len(rotatables)= 8
returning res.torscount= 7
res.root= CA
ntors= 7
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= ligcovalent_flex.pdbqt
res_total= 7
in writeResidue with  ligcovalent:A:CYS98
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS98:N, <Atom instance> ligcovalent:A:CYS98:CA)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS98:CA, <Atom instance> ligcovalent:A:CYS98:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS98:CA, <Atom instance> ligcovalent:A:CYS98:C)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3
 currently queue= CB - SG ,
CA : CB : queue= [(<Atom instance> ligcovalent:A:CYS98:CB, <Atom instance> ligcovalent:A:CYS98:SG)]
 processing queue entry:  CB - SG
in wBF with fromAtom= CB + startAtom= SG startAtom.used= 0
wBF: wrote  SG
self.outatom_counter= 4
 currently queue= SG - CX ,
CB : SG : queue= [(<Atom instance> ligcovalent:A:CYS98:SG, <Atom instance> ligcovalent:A:CYS98:CX)]
 processing queue entry:  SG - CX
in wBF with fromAtom= SG + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 5
 currently queue= CX - CX ,
SG : CX : queue= [(<Atom instance> ligcovalent:A:CYS98:CX, <Atom instance> ligcovalent:A:CYS98:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 6
 currently queue= CX - CX , CX - CX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS98:CX, <Atom instance> ligcovalent:A:CYS98:CX), (<Atom instance> ligcovalent:A:CYS98:CX, <Atom instance> ligcovalent:A:CYS98:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 7


writing and calling wL with nA= OX - 7
wBF2: wrote  OX
!!!2:calling wL


in writeLevel with  OX  outatom_counter= 8
len( OX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []


writing and calling wL with nA= NX - 8
wBF2: wrote  NX
!!!2:calling wL


in writeLevel with  NX  outatom_counter= 9
len( NX ).bonds= 3
skipping b= NX - CX
processing b= NX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
processing b= CX - NX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 11
len( CX ).bonds= 2
skipping b= NX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 12
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 13
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 14
len( CX ).bonds= 3
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 15
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 16
len( CX ).bonds= 3
processing b= OX - CX  activeTors= 1
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
CX wL: queue= [(<Atom instance> ligcovalent:A:CYS98:CX, <Atom instance> ligcovalent:A:CYS98:OX)]
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 17
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 18
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS98:CX, <Atom instance> ligcovalent:A:CYS98:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS98:CX, <Atom instance> ligcovalent:A:CYS98:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS98:CX, <Atom instance> ligcovalent:A:CYS98:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS98:CX, <Atom instance> ligcovalent:A:CYS98:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS98:CX, <Atom instance> ligcovalent:A:CYS98:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS98:CX, <Atom instance> ligcovalent:A:CYS98:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS98:CX, <Atom instance> ligcovalent:A:CYS98:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS98:CX, <Atom instance> ligcovalent:A:CYS98:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS98:CX, <Atom instance> ligcovalent:A:CYS98:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS98:CX, <Atom instance> ligcovalent:A:CYS98:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS98:CX, <Atom instance> ligcovalent:A:CYS98:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS98:CX, <Atom instance> ligcovalent:A:CYS98:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 18
len( CX ).bonds= 3
skipping b= CX - CX
skipping b= CX - NX
skipping b= CX - CX
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS98:CX, <Atom instance> ligcovalent:A:CYS98:OX)]
newQ= [(<Atom instance> ligcovalent:A:CYS98:CX, <Atom instance> ligcovalent:A:CYS98:OX)]
@@@@len(newq)= 1
queue= [(<Atom instance> ligcovalent:A:CYS98:CX, <Atom instance> ligcovalent:A:CYS98:OX)]
 currently queue= CX - OX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS98:CX, <Atom instance> ligcovalent:A:CYS98:OX)]
 processing queue entry:  CX - OX
in wBF with fromAtom= CX + startAtom= OX startAtom.used= 0
wBF: wrote  OX
self.outatom_counter= 19


writing and calling wL with nA= CX - 19
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 20
len( CX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []
 currently queue=
CX : OX : queue= []
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 21


writing and calling wL with nA= CX - 21
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 22
len( CX ).bonds= 1
skipping b= CX - CX
returning queue= []
newQ= []
 currently queue=
CX : CX : queue= []
wrote flex file ligcovalent_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: ligcovalent_flex.pdbqt
wrote rigid file: ligcovalent_rigid.pdbqt
4---done
setting PYTHONHOME environment
setting PYTHONHOME environment
!unable to use ligand.TORSDOF! torsdof always set to ligand.ndihe= 7
5---done
 concat 10 log files... done.
Job finished, good luck!
rm: 无法删除'chimera.com': 没有那个文件或目录
rm: 无法删除'tmp.mol2': 没有那个文件或目录
Done
Processing residue A:CYS393
[start] output filename is: ligcovalent_single.pdb
CHAIN A
Writing output filename: ligcovalent_single.pdb
1---ligcovalent.pdb prepared...
1.5--done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= fixed  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  fixed
merged  0  nonpolar hydrogens
end of base class init
using std outputfilename  fixed.pdbqt
wrote  fixed  to  fixed.pdbqt
2---done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= ligcovalent  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  ligcovalent
merged  21  nonpolar hydrogens
end of base class init
using std outputfilename  ligcovalent.pdbqt
wrote  ligcovalent  to  ligcovalent.pdbqt
3---done
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> fixed:A:CYS393 with 6 MolKit.molecule.Atom]
calling setAutoFlexFields with  fixed:A:CYS393
in setAutoFlexFields with  fixed:A:CYS393
len(rotatables)= 1
returning res.torscount= 1
res.root= CA
ntors= 1
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= fixed_flex.pdbqt
res_total= 1
in writeResidue with  fixed:A:CYS393
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS393:CA, <Atom instance> fixed:A:CYS393:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS393:CA, <Atom instance> fixed:A:CYS393:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS393:N, <Atom instance> fixed:A:CYS393:CA)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3


writing and calling wL with nA= SG - 3
wBF2: wrote  SG
!!!2:calling wL


in writeLevel with  SG  outatom_counter= 4
len( SG ).bonds= 1
skipping b= CB - SG
returning queue= []
newQ= []
 currently queue=
CA : CB : queue= []
wrote flex file fixed_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: fixed_flex.pdbqt
wrote rigid file: fixed_rigid.pdbqt
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> ligcovalent:A:CYS393 with 28 MolKit.molecule.Atom]
calling setAutoFlexFields with  ligcovalent:A:CYS393
in setAutoFlexFields with  ligcovalent:A:CYS393
len(rotatables)= 8
returning res.torscount= 7
res.root= CA
ntors= 7
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= ligcovalent_flex.pdbqt
res_total= 7
in writeResidue with  ligcovalent:A:CYS393
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS393:CA, <Atom instance> ligcovalent:A:CYS393:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS393:CA, <Atom instance> ligcovalent:A:CYS393:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS393:N, <Atom instance> ligcovalent:A:CYS393:CA)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3
 currently queue= CB - SG ,
CA : CB : queue= [(<Atom instance> ligcovalent:A:CYS393:CB, <Atom instance> ligcovalent:A:CYS393:SG)]
 processing queue entry:  CB - SG
in wBF with fromAtom= CB + startAtom= SG startAtom.used= 0
wBF: wrote  SG
self.outatom_counter= 4
 currently queue= SG - CX ,
CB : SG : queue= [(<Atom instance> ligcovalent:A:CYS393:SG, <Atom instance> ligcovalent:A:CYS393:CX)]
 processing queue entry:  SG - CX
in wBF with fromAtom= SG + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 5
 currently queue= CX - CX ,
SG : CX : queue= [(<Atom instance> ligcovalent:A:CYS393:CX, <Atom instance> ligcovalent:A:CYS393:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 6
 currently queue= CX - CX , CX - CX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS393:CX, <Atom instance> ligcovalent:A:CYS393:CX), (<Atom instance> ligcovalent:A:CYS393:CX, <Atom instance> ligcovalent:A:CYS393:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 7


writing and calling wL with nA= NX - 7
wBF2: wrote  NX
!!!2:calling wL


in writeLevel with  NX  outatom_counter= 8
len( NX ).bonds= 3
processing b= NX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= NX - CX
processing b= CX - NX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 10
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= NX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 11
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 12
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 13
len( CX ).bonds= 3
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 14
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 15
len( CX ).bonds= 3
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
processing b= OX - CX  activeTors= 1
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
CX wL: queue= [(<Atom instance> ligcovalent:A:CYS393:CX, <Atom instance> ligcovalent:A:CYS393:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 16
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 17
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS393:CX, <Atom instance> ligcovalent:A:CYS393:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS393:CX, <Atom instance> ligcovalent:A:CYS393:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS393:CX, <Atom instance> ligcovalent:A:CYS393:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS393:CX, <Atom instance> ligcovalent:A:CYS393:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS393:CX, <Atom instance> ligcovalent:A:CYS393:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS393:CX, <Atom instance> ligcovalent:A:CYS393:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS393:CX, <Atom instance> ligcovalent:A:CYS393:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS393:CX, <Atom instance> ligcovalent:A:CYS393:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS393:CX, <Atom instance> ligcovalent:A:CYS393:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS393:CX, <Atom instance> ligcovalent:A:CYS393:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS393:CX, <Atom instance> ligcovalent:A:CYS393:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS393:CX, <Atom instance> ligcovalent:A:CYS393:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 17
len( CX ).bonds= 3
skipping b= CX - NX
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS393:CX, <Atom instance> ligcovalent:A:CYS393:OX)]
newQ= [(<Atom instance> ligcovalent:A:CYS393:CX, <Atom instance> ligcovalent:A:CYS393:OX)]
@@@@len(newq)= 1
queue= [(<Atom instance> ligcovalent:A:CYS393:CX, <Atom instance> ligcovalent:A:CYS393:OX)]


writing and calling wL with nA= OX - 17
wBF2: wrote  OX
!!!2:calling wL


in writeLevel with  OX  outatom_counter= 18
len( OX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []
 currently queue= CX - OX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS393:CX, <Atom instance> ligcovalent:A:CYS393:OX)]
 processing queue entry:  CX - OX
in wBF with fromAtom= CX + startAtom= OX startAtom.used= 0
wBF: wrote  OX
self.outatom_counter= 19


writing and calling wL with nA= CX - 19
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 20
len( CX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []
 currently queue=
CX : OX : queue= []
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 21


writing and calling wL with nA= CX - 21
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 22
len( CX ).bonds= 1
skipping b= CX - CX
returning queue= []
newQ= []
 currently queue=
CX : CX : queue= []
wrote flex file ligcovalent_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: ligcovalent_flex.pdbqt
wrote rigid file: ligcovalent_rigid.pdbqt
4---done
setting PYTHONHOME environment
setting PYTHONHOME environment
!unable to use ligand.TORSDOF! torsdof always set to ligand.ndihe= 7
5---done
 concat 10 log files... done.
Job finished, good luck!
rm: 无法删除'chimera.com': 没有那个文件或目录
rm: 无法删除'tmp.mol2': 没有那个文件或目录
Done
Processing residue A:CYS723
[start] output filename is: ligcovalent_single.pdb
CHAIN A
Writing output filename: ligcovalent_single.pdb
1---ligcovalent.pdb prepared...
1.5--done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= fixed  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  fixed
merged  0  nonpolar hydrogens
end of base class init
using std outputfilename  fixed.pdbqt
wrote  fixed  to  fixed.pdbqt
2---done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= ligcovalent  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  ligcovalent
merged  21  nonpolar hydrogens
end of base class init
using std outputfilename  ligcovalent.pdbqt
wrote  ligcovalent  to  ligcovalent.pdbqt
3---done
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> fixed:A:CYS723 with 6 MolKit.molecule.Atom]
calling setAutoFlexFields with  fixed:A:CYS723
in setAutoFlexFields with  fixed:A:CYS723
len(rotatables)= 1
returning res.torscount= 1
res.root= CA
ntors= 1
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= fixed_flex.pdbqt
res_total= 1
in writeResidue with  fixed:A:CYS723
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS723:CA, <Atom instance> fixed:A:CYS723:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS723:CA, <Atom instance> fixed:A:CYS723:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS723:N, <Atom instance> fixed:A:CYS723:CA)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3


writing and calling wL with nA= SG - 3
wBF2: wrote  SG
!!!2:calling wL


in writeLevel with  SG  outatom_counter= 4
len( SG ).bonds= 1
skipping b= CB - SG
returning queue= []
newQ= []
 currently queue=
CA : CB : queue= []
wrote flex file fixed_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: fixed_flex.pdbqt
wrote rigid file: fixed_rigid.pdbqt
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> ligcovalent:A:CYS723 with 28 MolKit.molecule.Atom]
calling setAutoFlexFields with  ligcovalent:A:CYS723
in setAutoFlexFields with  ligcovalent:A:CYS723
len(rotatables)= 8
returning res.torscount= 7
res.root= CA
ntors= 7
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= ligcovalent_flex.pdbqt
res_total= 7
in writeResidue with  ligcovalent:A:CYS723
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS723:CA, <Atom instance> ligcovalent:A:CYS723:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS723:CA, <Atom instance> ligcovalent:A:CYS723:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS723:N, <Atom instance> ligcovalent:A:CYS723:CA)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3
 currently queue= CB - SG ,
CA : CB : queue= [(<Atom instance> ligcovalent:A:CYS723:CB, <Atom instance> ligcovalent:A:CYS723:SG)]
 processing queue entry:  CB - SG
in wBF with fromAtom= CB + startAtom= SG startAtom.used= 0
wBF: wrote  SG
self.outatom_counter= 4
 currently queue= SG - CX ,
CB : SG : queue= [(<Atom instance> ligcovalent:A:CYS723:SG, <Atom instance> ligcovalent:A:CYS723:CX)]
 processing queue entry:  SG - CX
in wBF with fromAtom= SG + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 5
 currently queue= CX - CX ,
SG : CX : queue= [(<Atom instance> ligcovalent:A:CYS723:CX, <Atom instance> ligcovalent:A:CYS723:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 6
 currently queue= CX - CX , CX - CX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS723:CX, <Atom instance> ligcovalent:A:CYS723:CX), (<Atom instance> ligcovalent:A:CYS723:CX, <Atom instance> ligcovalent:A:CYS723:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 7


writing and calling wL with nA= OX - 7
wBF2: wrote  OX
!!!2:calling wL


in writeLevel with  OX  outatom_counter= 8
len( OX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []


writing and calling wL with nA= NX - 8
wBF2: wrote  NX
!!!2:calling wL


in writeLevel with  NX  outatom_counter= 9
len( NX ).bonds= 3
processing b= NX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= NX - CX
processing b= CX - NX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 11
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= NX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 12
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 13
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 14
len( CX ).bonds= 3
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 15
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 16
len( CX ).bonds= 3
processing b= OX - CX  activeTors= 1
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
CX wL: queue= [(<Atom instance> ligcovalent:A:CYS723:CX, <Atom instance> ligcovalent:A:CYS723:OX)]
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 17
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 18
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS723:CX, <Atom instance> ligcovalent:A:CYS723:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS723:CX, <Atom instance> ligcovalent:A:CYS723:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS723:CX, <Atom instance> ligcovalent:A:CYS723:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS723:CX, <Atom instance> ligcovalent:A:CYS723:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS723:CX, <Atom instance> ligcovalent:A:CYS723:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS723:CX, <Atom instance> ligcovalent:A:CYS723:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS723:CX, <Atom instance> ligcovalent:A:CYS723:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS723:CX, <Atom instance> ligcovalent:A:CYS723:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS723:CX, <Atom instance> ligcovalent:A:CYS723:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS723:CX, <Atom instance> ligcovalent:A:CYS723:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS723:CX, <Atom instance> ligcovalent:A:CYS723:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS723:CX, <Atom instance> ligcovalent:A:CYS723:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 18
len( CX ).bonds= 3
skipping b= CX - NX
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS723:CX, <Atom instance> ligcovalent:A:CYS723:OX)]
newQ= [(<Atom instance> ligcovalent:A:CYS723:CX, <Atom instance> ligcovalent:A:CYS723:OX)]
@@@@len(newq)= 1
queue= [(<Atom instance> ligcovalent:A:CYS723:CX, <Atom instance> ligcovalent:A:CYS723:OX)]
 currently queue= CX - OX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS723:CX, <Atom instance> ligcovalent:A:CYS723:OX)]
 processing queue entry:  CX - OX
in wBF with fromAtom= CX + startAtom= OX startAtom.used= 0
wBF: wrote  OX
self.outatom_counter= 19


writing and calling wL with nA= CX - 19
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 20
len( CX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []
 currently queue=
CX : OX : queue= []
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 21


writing and calling wL with nA= CX - 21
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 22
len( CX ).bonds= 1
skipping b= CX - CX
returning queue= []
newQ= []
 currently queue=
CX : CX : queue= []
wrote flex file ligcovalent_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: ligcovalent_flex.pdbqt
wrote rigid file: ligcovalent_rigid.pdbqt
4---done
setting PYTHONHOME environment
setting PYTHONHOME environment
!unable to use ligand.TORSDOF! torsdof always set to ligand.ndihe= 7
5---done
 concat 10 log files... done.
Job finished, good luck!
rm: 无法删除'chimera.com': 没有那个文件或目录
rm: 无法删除'tmp.mol2': 没有那个文件或目录
Done
Processing residue A:CYS528
[start] output filename is: ligcovalent_single.pdb
CHAIN A
Writing output filename: ligcovalent_single.pdb
1---ligcovalent.pdb prepared...
1.5--done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= fixed  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  fixed
merged  0  nonpolar hydrogens
end of base class init
using std outputfilename  fixed.pdbqt
wrote  fixed  to  fixed.pdbqt
2---done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= ligcovalent  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  ligcovalent
merged  21  nonpolar hydrogens
end of base class init
using std outputfilename  ligcovalent.pdbqt
wrote  ligcovalent  to  ligcovalent.pdbqt
3---done
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> fixed:A:CYS528 with 6 MolKit.molecule.Atom]
calling setAutoFlexFields with  fixed:A:CYS528
in setAutoFlexFields with  fixed:A:CYS528
len(rotatables)= 1
returning res.torscount= 1
res.root= CA
ntors= 1
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= fixed_flex.pdbqt
res_total= 1
in writeResidue with  fixed:A:CYS528
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS528:CA, <Atom instance> fixed:A:CYS528:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS528:CA, <Atom instance> fixed:A:CYS528:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS528:N, <Atom instance> fixed:A:CYS528:CA)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3


writing and calling wL with nA= SG - 3
wBF2: wrote  SG
!!!2:calling wL


in writeLevel with  SG  outatom_counter= 4
len( SG ).bonds= 1
skipping b= CB - SG
returning queue= []
newQ= []
 currently queue=
CA : CB : queue= []
wrote flex file fixed_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: fixed_flex.pdbqt
wrote rigid file: fixed_rigid.pdbqt
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> ligcovalent:A:CYS528 with 28 MolKit.molecule.Atom]
calling setAutoFlexFields with  ligcovalent:A:CYS528
in setAutoFlexFields with  ligcovalent:A:CYS528
len(rotatables)= 8
returning res.torscount= 7
res.root= CA
ntors= 7
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= ligcovalent_flex.pdbqt
res_total= 7
in writeResidue with  ligcovalent:A:CYS528
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS528:CA, <Atom instance> ligcovalent:A:CYS528:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS528:CA, <Atom instance> ligcovalent:A:CYS528:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS528:N, <Atom instance> ligcovalent:A:CYS528:CA)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3
 currently queue= CB - SG ,
CA : CB : queue= [(<Atom instance> ligcovalent:A:CYS528:CB, <Atom instance> ligcovalent:A:CYS528:SG)]
 processing queue entry:  CB - SG
in wBF with fromAtom= CB + startAtom= SG startAtom.used= 0
wBF: wrote  SG
self.outatom_counter= 4
 currently queue= SG - CX ,
CB : SG : queue= [(<Atom instance> ligcovalent:A:CYS528:SG, <Atom instance> ligcovalent:A:CYS528:CX)]
 processing queue entry:  SG - CX
in wBF with fromAtom= SG + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 5
 currently queue= CX - CX ,
SG : CX : queue= [(<Atom instance> ligcovalent:A:CYS528:CX, <Atom instance> ligcovalent:A:CYS528:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 6
 currently queue= CX - CX , CX - CX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS528:CX, <Atom instance> ligcovalent:A:CYS528:CX), (<Atom instance> ligcovalent:A:CYS528:CX, <Atom instance> ligcovalent:A:CYS528:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 7


writing and calling wL with nA= OX - 7
wBF2: wrote  OX
!!!2:calling wL


in writeLevel with  OX  outatom_counter= 8
len( OX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []


writing and calling wL with nA= NX - 8
wBF2: wrote  NX
!!!2:calling wL


in writeLevel with  NX  outatom_counter= 9
len( NX ).bonds= 3
skipping b= NX - CX
processing b= NX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
processing b= CX - NX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 11
len( CX ).bonds= 2
skipping b= NX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 12
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 13
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 14
len( CX ).bonds= 3
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 15
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 16
len( CX ).bonds= 3
processing b= OX - CX  activeTors= 1
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
CX wL: queue= [(<Atom instance> ligcovalent:A:CYS528:CX, <Atom instance> ligcovalent:A:CYS528:OX)]
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 17
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 18
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS528:CX, <Atom instance> ligcovalent:A:CYS528:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS528:CX, <Atom instance> ligcovalent:A:CYS528:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS528:CX, <Atom instance> ligcovalent:A:CYS528:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS528:CX, <Atom instance> ligcovalent:A:CYS528:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS528:CX, <Atom instance> ligcovalent:A:CYS528:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS528:CX, <Atom instance> ligcovalent:A:CYS528:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS528:CX, <Atom instance> ligcovalent:A:CYS528:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS528:CX, <Atom instance> ligcovalent:A:CYS528:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS528:CX, <Atom instance> ligcovalent:A:CYS528:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS528:CX, <Atom instance> ligcovalent:A:CYS528:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS528:CX, <Atom instance> ligcovalent:A:CYS528:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS528:CX, <Atom instance> ligcovalent:A:CYS528:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 18
len( CX ).bonds= 3
skipping b= CX - CX
skipping b= CX - NX
skipping b= CX - CX
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS528:CX, <Atom instance> ligcovalent:A:CYS528:OX)]
newQ= [(<Atom instance> ligcovalent:A:CYS528:CX, <Atom instance> ligcovalent:A:CYS528:OX)]
@@@@len(newq)= 1
queue= [(<Atom instance> ligcovalent:A:CYS528:CX, <Atom instance> ligcovalent:A:CYS528:OX)]
 currently queue= CX - OX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS528:CX, <Atom instance> ligcovalent:A:CYS528:OX)]
 processing queue entry:  CX - OX
in wBF with fromAtom= CX + startAtom= OX startAtom.used= 0
wBF: wrote  OX
self.outatom_counter= 19


writing and calling wL with nA= CX - 19
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 20
len( CX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []
 currently queue=
CX : OX : queue= []
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 21


writing and calling wL with nA= CX - 21
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 22
len( CX ).bonds= 1
skipping b= CX - CX
returning queue= []
newQ= []
 currently queue=
CX : CX : queue= []
wrote flex file ligcovalent_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: ligcovalent_flex.pdbqt
wrote rigid file: ligcovalent_rigid.pdbqt
4---done
setting PYTHONHOME environment
setting PYTHONHOME environment
!unable to use ligand.TORSDOF! torsdof always set to ligand.ndihe= 7
5---done
 concat 10 log files... done.
Job finished, good luck!
rm: 无法删除'chimera.com': 没有那个文件或目录
rm: 无法删除'tmp.mol2': 没有那个文件或目录
Done
Processing residue A:CYS34
[start] output filename is: ligcovalent_single.pdb
CHAIN A
Writing output filename: ligcovalent_single.pdb
1---ligcovalent.pdb prepared...
1.5--done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= fixed  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  fixed
merged  0  nonpolar hydrogens
end of base class init
using std outputfilename  fixed.pdbqt
wrote  fixed  to  fixed.pdbqt
2---done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= ligcovalent  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  ligcovalent
merged  21  nonpolar hydrogens
end of base class init
using std outputfilename  ligcovalent.pdbqt
wrote  ligcovalent  to  ligcovalent.pdbqt
3---done
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> fixed:A:CYS34 with 6 MolKit.molecule.Atom]
calling setAutoFlexFields with  fixed:A:CYS34
in setAutoFlexFields with  fixed:A:CYS34
len(rotatables)= 1
returning res.torscount= 1
res.root= CA
ntors= 1
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= fixed_flex.pdbqt
res_total= 1
in writeResidue with  fixed:A:CYS34
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS34:N, <Atom instance> fixed:A:CYS34:CA)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS34:CA, <Atom instance> fixed:A:CYS34:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS34:CA, <Atom instance> fixed:A:CYS34:CB)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3


writing and calling wL with nA= SG - 3
wBF2: wrote  SG
!!!2:calling wL


in writeLevel with  SG  outatom_counter= 4
len( SG ).bonds= 1
skipping b= CB - SG
returning queue= []
newQ= []
 currently queue=
CA : CB : queue= []
wrote flex file fixed_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: fixed_flex.pdbqt
wrote rigid file: fixed_rigid.pdbqt
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> ligcovalent:A:CYS34 with 28 MolKit.molecule.Atom]
calling setAutoFlexFields with  ligcovalent:A:CYS34
in setAutoFlexFields with  ligcovalent:A:CYS34
len(rotatables)= 8
returning res.torscount= 7
res.root= CA
ntors= 7
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= ligcovalent_flex.pdbqt
res_total= 7
in writeResidue with  ligcovalent:A:CYS34
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS34:CA, <Atom instance> ligcovalent:A:CYS34:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS34:CA, <Atom instance> ligcovalent:A:CYS34:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS34:N, <Atom instance> ligcovalent:A:CYS34:CA)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3
 currently queue= CB - SG ,
CA : CB : queue= [(<Atom instance> ligcovalent:A:CYS34:CB, <Atom instance> ligcovalent:A:CYS34:SG)]
 processing queue entry:  CB - SG
in wBF with fromAtom= CB + startAtom= SG startAtom.used= 0
wBF: wrote  SG
self.outatom_counter= 4
 currently queue= SG - CX ,
CB : SG : queue= [(<Atom instance> ligcovalent:A:CYS34:SG, <Atom instance> ligcovalent:A:CYS34:CX)]
 processing queue entry:  SG - CX
in wBF with fromAtom= SG + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 5
 currently queue= CX - CX ,
SG : CX : queue= [(<Atom instance> ligcovalent:A:CYS34:CX, <Atom instance> ligcovalent:A:CYS34:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 6
 currently queue= CX - CX , CX - CX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS34:CX, <Atom instance> ligcovalent:A:CYS34:CX), (<Atom instance> ligcovalent:A:CYS34:CX, <Atom instance> ligcovalent:A:CYS34:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 7


writing and calling wL with nA= NX - 7
wBF2: wrote  NX
!!!2:calling wL


in writeLevel with  NX  outatom_counter= 8
len( NX ).bonds= 3
processing b= NX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= NX - CX
processing b= CX - NX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 10
len( CX ).bonds= 2
skipping b= NX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 11
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 12
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 13
len( CX ).bonds= 3
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 14
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 15
len( CX ).bonds= 3
processing b= OX - CX  activeTors= 1
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
CX wL: queue= [(<Atom instance> ligcovalent:A:CYS34:CX, <Atom instance> ligcovalent:A:CYS34:OX)]
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 16
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 17
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS34:CX, <Atom instance> ligcovalent:A:CYS34:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS34:CX, <Atom instance> ligcovalent:A:CYS34:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS34:CX, <Atom instance> ligcovalent:A:CYS34:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS34:CX, <Atom instance> ligcovalent:A:CYS34:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS34:CX, <Atom instance> ligcovalent:A:CYS34:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS34:CX, <Atom instance> ligcovalent:A:CYS34:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS34:CX, <Atom instance> ligcovalent:A:CYS34:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS34:CX, <Atom instance> ligcovalent:A:CYS34:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS34:CX, <Atom instance> ligcovalent:A:CYS34:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS34:CX, <Atom instance> ligcovalent:A:CYS34:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS34:CX, <Atom instance> ligcovalent:A:CYS34:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS34:CX, <Atom instance> ligcovalent:A:CYS34:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 17
len( CX ).bonds= 3
skipping b= CX - CX
skipping b= CX - CX
skipping b= CX - NX
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS34:CX, <Atom instance> ligcovalent:A:CYS34:OX)]
newQ= [(<Atom instance> ligcovalent:A:CYS34:CX, <Atom instance> ligcovalent:A:CYS34:OX)]
@@@@len(newq)= 1
queue= [(<Atom instance> ligcovalent:A:CYS34:CX, <Atom instance> ligcovalent:A:CYS34:OX)]


writing and calling wL with nA= OX - 17
wBF2: wrote  OX
!!!2:calling wL


in writeLevel with  OX  outatom_counter= 18
len( OX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []
 currently queue= CX - OX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS34:CX, <Atom instance> ligcovalent:A:CYS34:OX)]
 processing queue entry:  CX - OX
in wBF with fromAtom= CX + startAtom= OX startAtom.used= 0
wBF: wrote  OX
self.outatom_counter= 19


writing and calling wL with nA= CX - 19
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 20
len( CX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []
 currently queue=
CX : OX : queue= []
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 21


writing and calling wL with nA= CX - 21
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 22
len( CX ).bonds= 1
skipping b= CX - CX
returning queue= []
newQ= []
 currently queue=
CX : CX : queue= []
wrote flex file ligcovalent_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: ligcovalent_flex.pdbqt
wrote rigid file: ligcovalent_rigid.pdbqt
4---done
setting PYTHONHOME environment
setting PYTHONHOME environment
!unable to use ligand.TORSDOF! torsdof always set to ligand.ndihe= 7
5---done
 concat 10 log files... done.
Job finished, good luck!
rm: 无法删除'chimera.com': 没有那个文件或目录
rm: 无法删除'tmp.mol2': 没有那个文件或目录
Done
Processing residue A:CYS1070
[start] output filename is: ligcovalent_single.pdb
CHAIN A
Writing output filename: ligcovalent_single.pdb
1---ligcovalent.pdb prepared...
1.5--done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= fixed  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  fixed
merged  0  nonpolar hydrogens
end of base class init
using std outputfilename  fixed.pdbqt
wrote  fixed  to  fixed.pdbqt
2---done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= ligcovalent  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  ligcovalent
merged  21  nonpolar hydrogens
end of base class init
using std outputfilename  ligcovalent.pdbqt
wrote  ligcovalent  to  ligcovalent.pdbqt
3---done
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> fixed:A:CYS1070 with 6 MolKit.molecule.Atom]
calling setAutoFlexFields with  fixed:A:CYS1070
in setAutoFlexFields with  fixed:A:CYS1070
len(rotatables)= 1
returning res.torscount= 1
res.root= CA
ntors= 1
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= fixed_flex.pdbqt
res_total= 1
in writeResidue with  fixed:A:CYS1070
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS1070:CA, <Atom instance> fixed:A:CYS1070:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS1070:CA, <Atom instance> fixed:A:CYS1070:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS1070:N, <Atom instance> fixed:A:CYS1070:CA)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3


writing and calling wL with nA= SG - 3
wBF2: wrote  SG
!!!2:calling wL


in writeLevel with  SG  outatom_counter= 4
len( SG ).bonds= 1
skipping b= CB - SG
returning queue= []
newQ= []
 currently queue=
CA : CB : queue= []
wrote flex file fixed_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: fixed_flex.pdbqt
wrote rigid file: fixed_rigid.pdbqt
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> ligcovalent:A:CYS1070 with 28 MolKit.molecule.Atom]
calling setAutoFlexFields with  ligcovalent:A:CYS1070
in setAutoFlexFields with  ligcovalent:A:CYS1070
len(rotatables)= 8
returning res.torscount= 7
res.root= CA
ntors= 7
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= ligcovalent_flex.pdbqt
res_total= 7
in writeResidue with  ligcovalent:A:CYS1070
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS1070:CA, <Atom instance> ligcovalent:A:CYS1070:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS1070:CA, <Atom instance> ligcovalent:A:CYS1070:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS1070:N, <Atom instance> ligcovalent:A:CYS1070:CA)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3
 currently queue= CB - SG ,
CA : CB : queue= [(<Atom instance> ligcovalent:A:CYS1070:CB, <Atom instance> ligcovalent:A:CYS1070:SG)]
 processing queue entry:  CB - SG
in wBF with fromAtom= CB + startAtom= SG startAtom.used= 0
wBF: wrote  SG
self.outatom_counter= 4
 currently queue= SG - CX ,
CB : SG : queue= [(<Atom instance> ligcovalent:A:CYS1070:SG, <Atom instance> ligcovalent:A:CYS1070:CX)]
 processing queue entry:  SG - CX
in wBF with fromAtom= SG + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 5
 currently queue= CX - CX ,
SG : CX : queue= [(<Atom instance> ligcovalent:A:CYS1070:CX, <Atom instance> ligcovalent:A:CYS1070:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 6
 currently queue= CX - CX , CX - CX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS1070:CX, <Atom instance> ligcovalent:A:CYS1070:CX), (<Atom instance> ligcovalent:A:CYS1070:CX, <Atom instance> ligcovalent:A:CYS1070:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 7


writing and calling wL with nA= OX - 7
wBF2: wrote  OX
!!!2:calling wL


in writeLevel with  OX  outatom_counter= 8
len( OX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []


writing and calling wL with nA= NX - 8
wBF2: wrote  NX
!!!2:calling wL


in writeLevel with  NX  outatom_counter= 9
len( NX ).bonds= 3
skipping b= NX - CX
processing b= NX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
processing b= CX - NX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 11
len( CX ).bonds= 2
skipping b= NX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 12
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 13
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 14
len( CX ).bonds= 3
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 15
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 16
len( CX ).bonds= 3
processing b= OX - CX  activeTors= 1
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
CX wL: queue= [(<Atom instance> ligcovalent:A:CYS1070:CX, <Atom instance> ligcovalent:A:CYS1070:OX)]
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 17
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 18
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS1070:CX, <Atom instance> ligcovalent:A:CYS1070:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS1070:CX, <Atom instance> ligcovalent:A:CYS1070:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS1070:CX, <Atom instance> ligcovalent:A:CYS1070:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS1070:CX, <Atom instance> ligcovalent:A:CYS1070:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS1070:CX, <Atom instance> ligcovalent:A:CYS1070:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS1070:CX, <Atom instance> ligcovalent:A:CYS1070:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS1070:CX, <Atom instance> ligcovalent:A:CYS1070:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS1070:CX, <Atom instance> ligcovalent:A:CYS1070:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS1070:CX, <Atom instance> ligcovalent:A:CYS1070:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS1070:CX, <Atom instance> ligcovalent:A:CYS1070:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS1070:CX, <Atom instance> ligcovalent:A:CYS1070:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS1070:CX, <Atom instance> ligcovalent:A:CYS1070:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 18
len( CX ).bonds= 3
skipping b= CX - CX
skipping b= CX - NX
skipping b= CX - CX
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS1070:CX, <Atom instance> ligcovalent:A:CYS1070:OX)]
newQ= [(<Atom instance> ligcovalent:A:CYS1070:CX, <Atom instance> ligcovalent:A:CYS1070:OX)]
@@@@len(newq)= 1
queue= [(<Atom instance> ligcovalent:A:CYS1070:CX, <Atom instance> ligcovalent:A:CYS1070:OX)]
 currently queue= CX - OX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS1070:CX, <Atom instance> ligcovalent:A:CYS1070:OX)]
 processing queue entry:  CX - OX
in wBF with fromAtom= CX + startAtom= OX startAtom.used= 0
wBF: wrote  OX
self.outatom_counter= 19


writing and calling wL with nA= CX - 19
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 20
len( CX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []
 currently queue=
CX : OX : queue= []
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 21


writing and calling wL with nA= CX - 21
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 22
len( CX ).bonds= 1
skipping b= CX - CX
returning queue= []
newQ= []
 currently queue=
CX : CX : queue= []
wrote flex file ligcovalent_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: ligcovalent_flex.pdbqt
wrote rigid file: ligcovalent_rigid.pdbqt
4---done
setting PYTHONHOME environment
setting PYTHONHOME environment
!unable to use ligand.TORSDOF! torsdof always set to ligand.ndihe= 7
5---done
 concat 10 log files... done.
Job finished, good luck!
rm: 无法删除'chimera.com': 没有那个文件或目录
rm: 无法删除'tmp.mol2': 没有那个文件或目录
Done
Processing residue A:CYS164
[start] output filename is: ligcovalent_single.pdb
CHAIN A
Writing output filename: ligcovalent_single.pdb
1---ligcovalent.pdb prepared...
1.5--done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= fixed  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  fixed
merged  0  nonpolar hydrogens
end of base class init
using std outputfilename  fixed.pdbqt
wrote  fixed  to  fixed.pdbqt
2---done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= ligcovalent  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  ligcovalent
merged  21  nonpolar hydrogens
end of base class init
using std outputfilename  ligcovalent.pdbqt
wrote  ligcovalent  to  ligcovalent.pdbqt
3---done
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> fixed:A:CYS164 with 6 MolKit.molecule.Atom]
calling setAutoFlexFields with  fixed:A:CYS164
in setAutoFlexFields with  fixed:A:CYS164
len(rotatables)= 1
returning res.torscount= 1
res.root= CA
ntors= 1
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= fixed_flex.pdbqt
res_total= 1
in writeResidue with  fixed:A:CYS164
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS164:N, <Atom instance> fixed:A:CYS164:CA)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS164:CA, <Atom instance> fixed:A:CYS164:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS164:CA, <Atom instance> fixed:A:CYS164:CB)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3


writing and calling wL with nA= SG - 3
wBF2: wrote  SG
!!!2:calling wL


in writeLevel with  SG  outatom_counter= 4
len( SG ).bonds= 1
skipping b= CB - SG
returning queue= []
newQ= []
 currently queue=
CA : CB : queue= []
wrote flex file fixed_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: fixed_flex.pdbqt
wrote rigid file: fixed_rigid.pdbqt
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> ligcovalent:A:CYS164 with 28 MolKit.molecule.Atom]
calling setAutoFlexFields with  ligcovalent:A:CYS164
in setAutoFlexFields with  ligcovalent:A:CYS164
len(rotatables)= 8
returning res.torscount= 7
res.root= CA
ntors= 7
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= ligcovalent_flex.pdbqt
res_total= 7
in writeResidue with  ligcovalent:A:CYS164
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS164:N, <Atom instance> ligcovalent:A:CYS164:CA)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS164:CA, <Atom instance> ligcovalent:A:CYS164:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS164:CA, <Atom instance> ligcovalent:A:CYS164:CB)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3
 currently queue= CB - SG ,
CA : CB : queue= [(<Atom instance> ligcovalent:A:CYS164:CB, <Atom instance> ligcovalent:A:CYS164:SG)]
 processing queue entry:  CB - SG
in wBF with fromAtom= CB + startAtom= SG startAtom.used= 0
wBF: wrote  SG
self.outatom_counter= 4
 currently queue= SG - CX ,
CB : SG : queue= [(<Atom instance> ligcovalent:A:CYS164:SG, <Atom instance> ligcovalent:A:CYS164:CX)]
 processing queue entry:  SG - CX
in wBF with fromAtom= SG + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 5
 currently queue= CX - CX ,
SG : CX : queue= [(<Atom instance> ligcovalent:A:CYS164:CX, <Atom instance> ligcovalent:A:CYS164:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 6
 currently queue= CX - CX , CX - CX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS164:CX, <Atom instance> ligcovalent:A:CYS164:CX), (<Atom instance> ligcovalent:A:CYS164:CX, <Atom instance> ligcovalent:A:CYS164:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 7


writing and calling wL with nA= OX - 7
wBF2: wrote  OX
!!!2:calling wL


in writeLevel with  OX  outatom_counter= 8
len( OX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []


writing and calling wL with nA= NX - 8
wBF2: wrote  NX
!!!2:calling wL


in writeLevel with  NX  outatom_counter= 9
len( NX ).bonds= 3
skipping b= NX - CX
processing b= NX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
processing b= CX - NX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 11
len( CX ).bonds= 2
skipping b= NX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 12
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 13
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 14
len( CX ).bonds= 3
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 15
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 16
len( CX ).bonds= 3
processing b= OX - CX  activeTors= 1
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
CX wL: queue= [(<Atom instance> ligcovalent:A:CYS164:CX, <Atom instance> ligcovalent:A:CYS164:OX)]
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 17
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 18
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS164:CX, <Atom instance> ligcovalent:A:CYS164:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS164:CX, <Atom instance> ligcovalent:A:CYS164:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS164:CX, <Atom instance> ligcovalent:A:CYS164:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS164:CX, <Atom instance> ligcovalent:A:CYS164:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS164:CX, <Atom instance> ligcovalent:A:CYS164:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS164:CX, <Atom instance> ligcovalent:A:CYS164:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS164:CX, <Atom instance> ligcovalent:A:CYS164:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS164:CX, <Atom instance> ligcovalent:A:CYS164:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS164:CX, <Atom instance> ligcovalent:A:CYS164:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS164:CX, <Atom instance> ligcovalent:A:CYS164:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS164:CX, <Atom instance> ligcovalent:A:CYS164:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS164:CX, <Atom instance> ligcovalent:A:CYS164:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 18
len( CX ).bonds= 3
skipping b= CX - CX
skipping b= CX - NX
skipping b= CX - CX
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS164:CX, <Atom instance> ligcovalent:A:CYS164:OX)]
newQ= [(<Atom instance> ligcovalent:A:CYS164:CX, <Atom instance> ligcovalent:A:CYS164:OX)]
@@@@len(newq)= 1
queue= [(<Atom instance> ligcovalent:A:CYS164:CX, <Atom instance> ligcovalent:A:CYS164:OX)]
 currently queue= CX - OX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS164:CX, <Atom instance> ligcovalent:A:CYS164:OX)]
 processing queue entry:  CX - OX
in wBF with fromAtom= CX + startAtom= OX startAtom.used= 0
wBF: wrote  OX
self.outatom_counter= 19


writing and calling wL with nA= CX - 19
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 20
len( CX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []
 currently queue=
CX : OX : queue= []
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 21


writing and calling wL with nA= CX - 21
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 22
len( CX ).bonds= 1
skipping b= CX - CX
returning queue= []
newQ= []
 currently queue=
CX : CX : queue= []
wrote flex file ligcovalent_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: ligcovalent_flex.pdbqt
wrote rigid file: ligcovalent_rigid.pdbqt
4---done
setting PYTHONHOME environment
setting PYTHONHOME environment
!unable to use ligand.TORSDOF! torsdof always set to ligand.ndihe= 7
5---done
 concat 10 log files... done.
Job finished, good luck!
rm: 无法删除'chimera.com': 没有那个文件或目录
rm: 无法删除'tmp.mol2': 没有那个文件或目录
Done
Processing residue A:CYS119
[start] output filename is: ligcovalent_single.pdb
CHAIN A
Writing output filename: ligcovalent_single.pdb
1---ligcovalent.pdb prepared...
1.5--done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= fixed  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  fixed
merged  0  nonpolar hydrogens
end of base class init
using std outputfilename  fixed.pdbqt
wrote  fixed  to  fixed.pdbqt
2---done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= ligcovalent  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  ligcovalent
merged  21  nonpolar hydrogens
end of base class init
using std outputfilename  ligcovalent.pdbqt
wrote  ligcovalent  to  ligcovalent.pdbqt
3---done
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> fixed:A:CYS119 with 6 MolKit.molecule.Atom]
calling setAutoFlexFields with  fixed:A:CYS119
in setAutoFlexFields with  fixed:A:CYS119
len(rotatables)= 1
returning res.torscount= 1
res.root= CA
ntors= 1
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= fixed_flex.pdbqt
res_total= 1
in writeResidue with  fixed:A:CYS119
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS119:N, <Atom instance> fixed:A:CYS119:CA)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS119:CA, <Atom instance> fixed:A:CYS119:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS119:CA, <Atom instance> fixed:A:CYS119:C)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3


writing and calling wL with nA= SG - 3
wBF2: wrote  SG
!!!2:calling wL


in writeLevel with  SG  outatom_counter= 4
len( SG ).bonds= 1
skipping b= CB - SG
returning queue= []
newQ= []
 currently queue=
CA : CB : queue= []
wrote flex file fixed_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: fixed_flex.pdbqt
wrote rigid file: fixed_rigid.pdbqt
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> ligcovalent:A:CYS119 with 28 MolKit.molecule.Atom]
calling setAutoFlexFields with  ligcovalent:A:CYS119
in setAutoFlexFields with  ligcovalent:A:CYS119
len(rotatables)= 8
returning res.torscount= 7
res.root= CA
ntors= 7
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= ligcovalent_flex.pdbqt
res_total= 7
in writeResidue with  ligcovalent:A:CYS119
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS119:CA, <Atom instance> ligcovalent:A:CYS119:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS119:CA, <Atom instance> ligcovalent:A:CYS119:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS119:N, <Atom instance> ligcovalent:A:CYS119:CA)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3
 currently queue= CB - SG ,
CA : CB : queue= [(<Atom instance> ligcovalent:A:CYS119:CB, <Atom instance> ligcovalent:A:CYS119:SG)]
 processing queue entry:  CB - SG
in wBF with fromAtom= CB + startAtom= SG startAtom.used= 0
wBF: wrote  SG
self.outatom_counter= 4
 currently queue= SG - CX ,
CB : SG : queue= [(<Atom instance> ligcovalent:A:CYS119:SG, <Atom instance> ligcovalent:A:CYS119:CX)]
 processing queue entry:  SG - CX
in wBF with fromAtom= SG + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 5
 currently queue= CX - CX ,
SG : CX : queue= [(<Atom instance> ligcovalent:A:CYS119:CX, <Atom instance> ligcovalent:A:CYS119:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 6
 currently queue= CX - CX , CX - CX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS119:CX, <Atom instance> ligcovalent:A:CYS119:CX), (<Atom instance> ligcovalent:A:CYS119:CX, <Atom instance> ligcovalent:A:CYS119:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 7


writing and calling wL with nA= OX - 7
wBF2: wrote  OX
!!!2:calling wL


in writeLevel with  OX  outatom_counter= 8
len( OX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []


writing and calling wL with nA= NX - 8
wBF2: wrote  NX
!!!2:calling wL


in writeLevel with  NX  outatom_counter= 9
len( NX ).bonds= 3
skipping b= NX - CX
processing b= NX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
processing b= CX - NX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 11
len( CX ).bonds= 2
skipping b= NX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 12
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 13
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 14
len( CX ).bonds= 3
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 15
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 16
len( CX ).bonds= 3
processing b= OX - CX  activeTors= 1
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
CX wL: queue= [(<Atom instance> ligcovalent:A:CYS119:CX, <Atom instance> ligcovalent:A:CYS119:OX)]
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 17
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 18
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS119:CX, <Atom instance> ligcovalent:A:CYS119:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS119:CX, <Atom instance> ligcovalent:A:CYS119:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS119:CX, <Atom instance> ligcovalent:A:CYS119:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS119:CX, <Atom instance> ligcovalent:A:CYS119:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS119:CX, <Atom instance> ligcovalent:A:CYS119:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS119:CX, <Atom instance> ligcovalent:A:CYS119:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS119:CX, <Atom instance> ligcovalent:A:CYS119:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS119:CX, <Atom instance> ligcovalent:A:CYS119:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS119:CX, <Atom instance> ligcovalent:A:CYS119:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS119:CX, <Atom instance> ligcovalent:A:CYS119:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS119:CX, <Atom instance> ligcovalent:A:CYS119:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS119:CX, <Atom instance> ligcovalent:A:CYS119:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 18
len( CX ).bonds= 3
skipping b= CX - CX
skipping b= CX - CX
skipping b= CX - NX
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS119:CX, <Atom instance> ligcovalent:A:CYS119:OX)]
newQ= [(<Atom instance> ligcovalent:A:CYS119:CX, <Atom instance> ligcovalent:A:CYS119:OX)]
@@@@len(newq)= 1
queue= [(<Atom instance> ligcovalent:A:CYS119:CX, <Atom instance> ligcovalent:A:CYS119:OX)]
 currently queue= CX - OX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS119:CX, <Atom instance> ligcovalent:A:CYS119:OX)]
 processing queue entry:  CX - OX
in wBF with fromAtom= CX + startAtom= OX startAtom.used= 0
wBF: wrote  OX
self.outatom_counter= 19


writing and calling wL with nA= CX - 19
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 20
len( CX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []
 currently queue=
CX : OX : queue= []
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 21


writing and calling wL with nA= CX - 21
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 22
len( CX ).bonds= 1
skipping b= CX - CX
returning queue= []
newQ= []
 currently queue=
CX : CX : queue= []
wrote flex file ligcovalent_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: ligcovalent_flex.pdbqt
wrote rigid file: ligcovalent_rigid.pdbqt
4---done
setting PYTHONHOME environment
setting PYTHONHOME environment
!unable to use ligand.TORSDOF! torsdof always set to ligand.ndihe= 7
5---done
 concat 10 log files... done.
Job finished, good luck!
rm: 无法删除'chimera.com': 没有那个文件或目录
rm: 无法删除'tmp.mol2': 没有那个文件或目录
Done
Processing residue A:CYS221
[start] output filename is: ligcovalent_single.pdb
CHAIN A
Writing output filename: ligcovalent_single.pdb
1---ligcovalent.pdb prepared...
1.5--done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= fixed  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  fixed
merged  0  nonpolar hydrogens
end of base class init
using std outputfilename  fixed.pdbqt
wrote  fixed  to  fixed.pdbqt
2---done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= ligcovalent  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  ligcovalent
merged  21  nonpolar hydrogens
end of base class init
using std outputfilename  ligcovalent.pdbqt
wrote  ligcovalent  to  ligcovalent.pdbqt
3---done
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> fixed:A:CYS221 with 6 MolKit.molecule.Atom]
calling setAutoFlexFields with  fixed:A:CYS221
in setAutoFlexFields with  fixed:A:CYS221
len(rotatables)= 1
returning res.torscount= 1
res.root= CA
ntors= 1
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= fixed_flex.pdbqt
res_total= 1
in writeResidue with  fixed:A:CYS221
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS221:N, <Atom instance> fixed:A:CYS221:CA)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS221:CA, <Atom instance> fixed:A:CYS221:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS221:CA, <Atom instance> fixed:A:CYS221:C)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3


writing and calling wL with nA= SG - 3
wBF2: wrote  SG
!!!2:calling wL


in writeLevel with  SG  outatom_counter= 4
len( SG ).bonds= 1
skipping b= CB - SG
returning queue= []
newQ= []
 currently queue=
CA : CB : queue= []
wrote flex file fixed_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: fixed_flex.pdbqt
wrote rigid file: fixed_rigid.pdbqt
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> ligcovalent:A:CYS221 with 28 MolKit.molecule.Atom]
calling setAutoFlexFields with  ligcovalent:A:CYS221
in setAutoFlexFields with  ligcovalent:A:CYS221
len(rotatables)= 8
returning res.torscount= 7
res.root= CA
ntors= 7
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= ligcovalent_flex.pdbqt
res_total= 7
in writeResidue with  ligcovalent:A:CYS221
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS221:CA, <Atom instance> ligcovalent:A:CYS221:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS221:CA, <Atom instance> ligcovalent:A:CYS221:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS221:N, <Atom instance> ligcovalent:A:CYS221:CA)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3
 currently queue= CB - SG ,
CA : CB : queue= [(<Atom instance> ligcovalent:A:CYS221:CB, <Atom instance> ligcovalent:A:CYS221:SG)]
 processing queue entry:  CB - SG
in wBF with fromAtom= CB + startAtom= SG startAtom.used= 0
wBF: wrote  SG
self.outatom_counter= 4
 currently queue= SG - CX ,
CB : SG : queue= [(<Atom instance> ligcovalent:A:CYS221:SG, <Atom instance> ligcovalent:A:CYS221:CX)]
 processing queue entry:  SG - CX
in wBF with fromAtom= SG + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 5
 currently queue= CX - CX ,
SG : CX : queue= [(<Atom instance> ligcovalent:A:CYS221:CX, <Atom instance> ligcovalent:A:CYS221:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 6
 currently queue= CX - CX , CX - CX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS221:CX, <Atom instance> ligcovalent:A:CYS221:CX), (<Atom instance> ligcovalent:A:CYS221:CX, <Atom instance> ligcovalent:A:CYS221:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 7


writing and calling wL with nA= CX - 7
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 8
len( CX ).bonds= 1
skipping b= CX - CX
returning queue= []
newQ= []
 currently queue=
CX : CX : queue= []
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 9


writing and calling wL with nA= NX - 9
wBF2: wrote  NX
!!!2:calling wL


in writeLevel with  NX  outatom_counter= 10
len( NX ).bonds= 3
skipping b= NX - CX
processing b= NX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
processing b= CX - NX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 12
len( CX ).bonds= 2
skipping b= NX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 13
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 14
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 15
len( CX ).bonds= 3
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 16
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 17
len( CX ).bonds= 3
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
processing b= OX - CX  activeTors= 1
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
CX wL: queue= [(<Atom instance> ligcovalent:A:CYS221:CX, <Atom instance> ligcovalent:A:CYS221:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 18
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 19
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS221:CX, <Atom instance> ligcovalent:A:CYS221:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS221:CX, <Atom instance> ligcovalent:A:CYS221:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS221:CX, <Atom instance> ligcovalent:A:CYS221:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS221:CX, <Atom instance> ligcovalent:A:CYS221:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS221:CX, <Atom instance> ligcovalent:A:CYS221:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS221:CX, <Atom instance> ligcovalent:A:CYS221:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS221:CX, <Atom instance> ligcovalent:A:CYS221:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS221:CX, <Atom instance> ligcovalent:A:CYS221:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS221:CX, <Atom instance> ligcovalent:A:CYS221:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS221:CX, <Atom instance> ligcovalent:A:CYS221:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS221:CX, <Atom instance> ligcovalent:A:CYS221:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS221:CX, <Atom instance> ligcovalent:A:CYS221:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 19
len( CX ).bonds= 3
skipping b= CX - CX
skipping b= CX - NX
skipping b= CX - CX
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS221:CX, <Atom instance> ligcovalent:A:CYS221:OX)]
newQ= [(<Atom instance> ligcovalent:A:CYS221:CX, <Atom instance> ligcovalent:A:CYS221:OX)]
@@@@len(newq)= 1
queue= [(<Atom instance> ligcovalent:A:CYS221:CX, <Atom instance> ligcovalent:A:CYS221:OX)]


writing and calling wL with nA= OX - 19
wBF2: wrote  OX
!!!2:calling wL


in writeLevel with  OX  outatom_counter= 20
len( OX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []
 currently queue= CX - OX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS221:CX, <Atom instance> ligcovalent:A:CYS221:OX)]
 processing queue entry:  CX - OX
in wBF with fromAtom= CX + startAtom= OX startAtom.used= 0
wBF: wrote  OX
self.outatom_counter= 21


writing and calling wL with nA= CX - 21
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 22
len( CX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []
 currently queue=
CX : OX : queue= []
wrote flex file ligcovalent_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: ligcovalent_flex.pdbqt
wrote rigid file: ligcovalent_rigid.pdbqt
4---done
setting PYTHONHOME environment
setting PYTHONHOME environment
!unable to use ligand.TORSDOF! torsdof always set to ligand.ndihe= 7
5---done
 concat 10 log files... done.
Job finished, good luck!
rm: 无法删除'chimera.com': 没有那个文件或目录
rm: 无法删除'tmp.mol2': 没有那个文件或目录
Done
Processing residue A:CYS406
[start] output filename is: ligcovalent_single.pdb
CHAIN A
Writing output filename: ligcovalent_single.pdb
1---ligcovalent.pdb prepared...
1.5--done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= fixed  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  fixed
merged  0  nonpolar hydrogens
end of base class init
using std outputfilename  fixed.pdbqt
wrote  fixed  to  fixed.pdbqt
2---done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= ligcovalent  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  ligcovalent
merged  21  nonpolar hydrogens
end of base class init
using std outputfilename  ligcovalent.pdbqt
wrote  ligcovalent  to  ligcovalent.pdbqt
3---done
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> fixed:A:CYS406 with 6 MolKit.molecule.Atom]
calling setAutoFlexFields with  fixed:A:CYS406
in setAutoFlexFields with  fixed:A:CYS406
len(rotatables)= 1
returning res.torscount= 1
res.root= CA
ntors= 1
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= fixed_flex.pdbqt
res_total= 1
in writeResidue with  fixed:A:CYS406
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS406:CA, <Atom instance> fixed:A:CYS406:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS406:CA, <Atom instance> fixed:A:CYS406:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS406:N, <Atom instance> fixed:A:CYS406:CA)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3


writing and calling wL with nA= SG - 3
wBF2: wrote  SG
!!!2:calling wL


in writeLevel with  SG  outatom_counter= 4
len( SG ).bonds= 1
skipping b= CB - SG
returning queue= []
newQ= []
 currently queue=
CA : CB : queue= []
wrote flex file fixed_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: fixed_flex.pdbqt
wrote rigid file: fixed_rigid.pdbqt
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> ligcovalent:A:CYS406 with 28 MolKit.molecule.Atom]
calling setAutoFlexFields with  ligcovalent:A:CYS406
in setAutoFlexFields with  ligcovalent:A:CYS406
len(rotatables)= 8
returning res.torscount= 7
res.root= CA
ntors= 7
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= ligcovalent_flex.pdbqt
res_total= 7
in writeResidue with  ligcovalent:A:CYS406
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS406:CA, <Atom instance> ligcovalent:A:CYS406:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS406:CA, <Atom instance> ligcovalent:A:CYS406:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS406:N, <Atom instance> ligcovalent:A:CYS406:CA)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3
 currently queue= CB - SG ,
CA : CB : queue= [(<Atom instance> ligcovalent:A:CYS406:CB, <Atom instance> ligcovalent:A:CYS406:SG)]
 processing queue entry:  CB - SG
in wBF with fromAtom= CB + startAtom= SG startAtom.used= 0
wBF: wrote  SG
self.outatom_counter= 4
 currently queue= SG - CX ,
CB : SG : queue= [(<Atom instance> ligcovalent:A:CYS406:SG, <Atom instance> ligcovalent:A:CYS406:CX)]
 processing queue entry:  SG - CX
in wBF with fromAtom= SG + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 5
 currently queue= CX - CX ,
SG : CX : queue= [(<Atom instance> ligcovalent:A:CYS406:CX, <Atom instance> ligcovalent:A:CYS406:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 6
 currently queue= CX - CX , CX - CX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS406:CX, <Atom instance> ligcovalent:A:CYS406:CX), (<Atom instance> ligcovalent:A:CYS406:CX, <Atom instance> ligcovalent:A:CYS406:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 7


writing and calling wL with nA= CX - 7
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 8
len( CX ).bonds= 1
skipping b= CX - CX
returning queue= []
newQ= []
 currently queue=
CX : CX : queue= []
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 9


writing and calling wL with nA= NX - 9
wBF2: wrote  NX
!!!2:calling wL


in writeLevel with  NX  outatom_counter= 10
len( NX ).bonds= 3
skipping b= NX - CX
processing b= NX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
processing b= CX - NX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 12
len( CX ).bonds= 2
skipping b= NX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 13
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 14
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 15
len( CX ).bonds= 3
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 16
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 17
len( CX ).bonds= 3
processing b= OX - CX  activeTors= 1
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
CX wL: queue= [(<Atom instance> ligcovalent:A:CYS406:CX, <Atom instance> ligcovalent:A:CYS406:OX)]
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 18
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 19
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS406:CX, <Atom instance> ligcovalent:A:CYS406:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS406:CX, <Atom instance> ligcovalent:A:CYS406:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS406:CX, <Atom instance> ligcovalent:A:CYS406:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS406:CX, <Atom instance> ligcovalent:A:CYS406:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS406:CX, <Atom instance> ligcovalent:A:CYS406:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS406:CX, <Atom instance> ligcovalent:A:CYS406:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS406:CX, <Atom instance> ligcovalent:A:CYS406:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS406:CX, <Atom instance> ligcovalent:A:CYS406:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS406:CX, <Atom instance> ligcovalent:A:CYS406:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS406:CX, <Atom instance> ligcovalent:A:CYS406:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS406:CX, <Atom instance> ligcovalent:A:CYS406:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS406:CX, <Atom instance> ligcovalent:A:CYS406:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 19
len( CX ).bonds= 3
skipping b= CX - CX
skipping b= CX - NX
skipping b= CX - CX
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS406:CX, <Atom instance> ligcovalent:A:CYS406:OX)]
newQ= [(<Atom instance> ligcovalent:A:CYS406:CX, <Atom instance> ligcovalent:A:CYS406:OX)]
@@@@len(newq)= 1
queue= [(<Atom instance> ligcovalent:A:CYS406:CX, <Atom instance> ligcovalent:A:CYS406:OX)]


writing and calling wL with nA= OX - 19
wBF2: wrote  OX
!!!2:calling wL


in writeLevel with  OX  outatom_counter= 20
len( OX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []
 currently queue= CX - OX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS406:CX, <Atom instance> ligcovalent:A:CYS406:OX)]
 processing queue entry:  CX - OX
in wBF with fromAtom= CX + startAtom= OX startAtom.used= 0
wBF: wrote  OX
self.outatom_counter= 21


writing and calling wL with nA= CX - 21
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 22
len( CX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []
 currently queue=
CX : OX : queue= []
wrote flex file ligcovalent_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: ligcovalent_flex.pdbqt
wrote rigid file: ligcovalent_rigid.pdbqt
4---done
setting PYTHONHOME environment
setting PYTHONHOME environment
!unable to use ligand.TORSDOF! torsdof always set to ligand.ndihe= 7
5---done
 concat 10 log files... done.
Job finished, good luck!
rm: 无法删除'chimera.com': 没有那个文件或目录
rm: 无法删除'tmp.mol2': 没有那个文件或目录
Done
Processing residue A:CYS70
[start] output filename is: ligcovalent_single.pdb
CHAIN A
Writing output filename: ligcovalent_single.pdb
1---ligcovalent.pdb prepared...
1.5--done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= fixed  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  fixed
merged  0  nonpolar hydrogens
end of base class init
using std outputfilename  fixed.pdbqt
wrote  fixed  to  fixed.pdbqt
2---done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= ligcovalent  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  ligcovalent
merged  21  nonpolar hydrogens
end of base class init
using std outputfilename  ligcovalent.pdbqt
wrote  ligcovalent  to  ligcovalent.pdbqt
3---done
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> fixed:A:CYS70 with 6 MolKit.molecule.Atom]
calling setAutoFlexFields with  fixed:A:CYS70
in setAutoFlexFields with  fixed:A:CYS70
len(rotatables)= 1
returning res.torscount= 1
res.root= CA
ntors= 1
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= fixed_flex.pdbqt
res_total= 1
in writeResidue with  fixed:A:CYS70
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS70:N, <Atom instance> fixed:A:CYS70:CA)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS70:CA, <Atom instance> fixed:A:CYS70:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS70:CA, <Atom instance> fixed:A:CYS70:CB)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3


writing and calling wL with nA= SG - 3
wBF2: wrote  SG
!!!2:calling wL


in writeLevel with  SG  outatom_counter= 4
len( SG ).bonds= 1
skipping b= CB - SG
returning queue= []
newQ= []
 currently queue=
CA : CB : queue= []
wrote flex file fixed_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: fixed_flex.pdbqt
wrote rigid file: fixed_rigid.pdbqt
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> ligcovalent:A:CYS70 with 28 MolKit.molecule.Atom]
calling setAutoFlexFields with  ligcovalent:A:CYS70
in setAutoFlexFields with  ligcovalent:A:CYS70
len(rotatables)= 8
returning res.torscount= 7
res.root= CA
ntors= 7
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= ligcovalent_flex.pdbqt
res_total= 7
in writeResidue with  ligcovalent:A:CYS70
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS70:N, <Atom instance> ligcovalent:A:CYS70:CA)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS70:CA, <Atom instance> ligcovalent:A:CYS70:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS70:CA, <Atom instance> ligcovalent:A:CYS70:C)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3
 currently queue= CB - SG ,
CA : CB : queue= [(<Atom instance> ligcovalent:A:CYS70:CB, <Atom instance> ligcovalent:A:CYS70:SG)]
 processing queue entry:  CB - SG
in wBF with fromAtom= CB + startAtom= SG startAtom.used= 0
wBF: wrote  SG
self.outatom_counter= 4
 currently queue= SG - CX ,
CB : SG : queue= [(<Atom instance> ligcovalent:A:CYS70:SG, <Atom instance> ligcovalent:A:CYS70:CX)]
 processing queue entry:  SG - CX
in wBF with fromAtom= SG + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 5
 currently queue= CX - CX ,
SG : CX : queue= [(<Atom instance> ligcovalent:A:CYS70:CX, <Atom instance> ligcovalent:A:CYS70:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 6
 currently queue= CX - CX , CX - CX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS70:CX, <Atom instance> ligcovalent:A:CYS70:CX), (<Atom instance> ligcovalent:A:CYS70:CX, <Atom instance> ligcovalent:A:CYS70:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 7


writing and calling wL with nA= CX - 7
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 8
len( CX ).bonds= 1
skipping b= CX - CX
returning queue= []
newQ= []
 currently queue=
CX : CX : queue= []
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 9


writing and calling wL with nA= NX - 9
wBF2: wrote  NX
!!!2:calling wL


in writeLevel with  NX  outatom_counter= 10
len( NX ).bonds= 3
processing b= NX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= NX - CX
processing b= CX - NX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 12
len( CX ).bonds= 2
skipping b= NX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 13
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 14
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 15
len( CX ).bonds= 3
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 16
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 17
len( CX ).bonds= 3
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
processing b= OX - CX  activeTors= 1
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
CX wL: queue= [(<Atom instance> ligcovalent:A:CYS70:CX, <Atom instance> ligcovalent:A:CYS70:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 18
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 19
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS70:CX, <Atom instance> ligcovalent:A:CYS70:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS70:CX, <Atom instance> ligcovalent:A:CYS70:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS70:CX, <Atom instance> ligcovalent:A:CYS70:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS70:CX, <Atom instance> ligcovalent:A:CYS70:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS70:CX, <Atom instance> ligcovalent:A:CYS70:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS70:CX, <Atom instance> ligcovalent:A:CYS70:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS70:CX, <Atom instance> ligcovalent:A:CYS70:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS70:CX, <Atom instance> ligcovalent:A:CYS70:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS70:CX, <Atom instance> ligcovalent:A:CYS70:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS70:CX, <Atom instance> ligcovalent:A:CYS70:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS70:CX, <Atom instance> ligcovalent:A:CYS70:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS70:CX, <Atom instance> ligcovalent:A:CYS70:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 19
len( CX ).bonds= 3
skipping b= CX - CX
skipping b= CX - NX
skipping b= CX - CX
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS70:CX, <Atom instance> ligcovalent:A:CYS70:OX)]
newQ= [(<Atom instance> ligcovalent:A:CYS70:CX, <Atom instance> ligcovalent:A:CYS70:OX)]
@@@@len(newq)= 1
queue= [(<Atom instance> ligcovalent:A:CYS70:CX, <Atom instance> ligcovalent:A:CYS70:OX)]


writing and calling wL with nA= OX - 19
wBF2: wrote  OX
!!!2:calling wL


in writeLevel with  OX  outatom_counter= 20
len( OX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []
 currently queue= CX - OX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS70:CX, <Atom instance> ligcovalent:A:CYS70:OX)]
 processing queue entry:  CX - OX
in wBF with fromAtom= CX + startAtom= OX startAtom.used= 0
wBF: wrote  OX
self.outatom_counter= 21


writing and calling wL with nA= CX - 21
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 22
len( CX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []
 currently queue=
CX : OX : queue= []
wrote flex file ligcovalent_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: ligcovalent_flex.pdbqt
wrote rigid file: ligcovalent_rigid.pdbqt
4---done
setting PYTHONHOME environment
setting PYTHONHOME environment
!unable to use ligand.TORSDOF! torsdof always set to ligand.ndihe= 7
5---done
 concat 10 log files... done.
Job finished, good luck!
rm: 无法删除'chimera.com': 没有那个文件或目录
rm: 无法删除'tmp.mol2': 没有那个文件或目录
Done
Processing residue A:CYS162
[start] output filename is: ligcovalent_single.pdb
CHAIN A
Writing output filename: ligcovalent_single.pdb
1---ligcovalent.pdb prepared...
1.5--done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= fixed  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  fixed
merged  0  nonpolar hydrogens
end of base class init
using std outputfilename  fixed.pdbqt
wrote  fixed  to  fixed.pdbqt
2---done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= ligcovalent  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  ligcovalent
merged  21  nonpolar hydrogens
end of base class init
using std outputfilename  ligcovalent.pdbqt
wrote  ligcovalent  to  ligcovalent.pdbqt
3---done
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> fixed:A:CYS162 with 6 MolKit.molecule.Atom]
calling setAutoFlexFields with  fixed:A:CYS162
in setAutoFlexFields with  fixed:A:CYS162
len(rotatables)= 1
returning res.torscount= 1
res.root= CA
ntors= 1
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= fixed_flex.pdbqt
res_total= 1
in writeResidue with  fixed:A:CYS162
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS162:CA, <Atom instance> fixed:A:CYS162:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS162:CA, <Atom instance> fixed:A:CYS162:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS162:N, <Atom instance> fixed:A:CYS162:CA)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3


writing and calling wL with nA= SG - 3
wBF2: wrote  SG
!!!2:calling wL


in writeLevel with  SG  outatom_counter= 4
len( SG ).bonds= 1
skipping b= CB - SG
returning queue= []
newQ= []
 currently queue=
CA : CB : queue= []
wrote flex file fixed_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: fixed_flex.pdbqt
wrote rigid file: fixed_rigid.pdbqt
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> ligcovalent:A:CYS162 with 28 MolKit.molecule.Atom]
calling setAutoFlexFields with  ligcovalent:A:CYS162
in setAutoFlexFields with  ligcovalent:A:CYS162
len(rotatables)= 8
returning res.torscount= 7
res.root= CA
ntors= 7
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= ligcovalent_flex.pdbqt
res_total= 7
in writeResidue with  ligcovalent:A:CYS162
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS162:N, <Atom instance> ligcovalent:A:CYS162:CA)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS162:CA, <Atom instance> ligcovalent:A:CYS162:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS162:CA, <Atom instance> ligcovalent:A:CYS162:C)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3
 currently queue= CB - SG ,
CA : CB : queue= [(<Atom instance> ligcovalent:A:CYS162:CB, <Atom instance> ligcovalent:A:CYS162:SG)]
 processing queue entry:  CB - SG
in wBF with fromAtom= CB + startAtom= SG startAtom.used= 0
wBF: wrote  SG
self.outatom_counter= 4
 currently queue= SG - CX ,
CB : SG : queue= [(<Atom instance> ligcovalent:A:CYS162:SG, <Atom instance> ligcovalent:A:CYS162:CX)]
 processing queue entry:  SG - CX
in wBF with fromAtom= SG + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 5
 currently queue= CX - CX ,
SG : CX : queue= [(<Atom instance> ligcovalent:A:CYS162:CX, <Atom instance> ligcovalent:A:CYS162:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 6
 currently queue= CX - CX , CX - CX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS162:CX, <Atom instance> ligcovalent:A:CYS162:CX), (<Atom instance> ligcovalent:A:CYS162:CX, <Atom instance> ligcovalent:A:CYS162:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 7


writing and calling wL with nA= OX - 7
wBF2: wrote  OX
!!!2:calling wL


in writeLevel with  OX  outatom_counter= 8
len( OX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []


writing and calling wL with nA= NX - 8
wBF2: wrote  NX
!!!2:calling wL


in writeLevel with  NX  outatom_counter= 9
len( NX ).bonds= 3
processing b= CX - NX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= NX - CX
processing b= NX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 11
len( CX ).bonds= 3
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - NX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 13
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 14
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 15
len( CX ).bonds= 3
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
processing b= OX - CX  activeTors= 1
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
CX wL: queue= [(<Atom instance> ligcovalent:A:CYS162:CX, <Atom instance> ligcovalent:A:CYS162:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 16
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS162:CX, <Atom instance> ligcovalent:A:CYS162:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS162:CX, <Atom instance> ligcovalent:A:CYS162:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS162:CX, <Atom instance> ligcovalent:A:CYS162:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS162:CX, <Atom instance> ligcovalent:A:CYS162:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS162:CX, <Atom instance> ligcovalent:A:CYS162:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS162:CX, <Atom instance> ligcovalent:A:CYS162:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 16
len( CX ).bonds= 3
skipping b= CX - CX
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 17
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 18
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= []
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS162:CX, <Atom instance> ligcovalent:A:CYS162:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS162:CX, <Atom instance> ligcovalent:A:CYS162:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 18
len( CX ).bonds= 2
skipping b= NX - CX
skipping b= CX - CX
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS162:CX, <Atom instance> ligcovalent:A:CYS162:OX)]
newQ= [(<Atom instance> ligcovalent:A:CYS162:CX, <Atom instance> ligcovalent:A:CYS162:OX)]
@@@@len(newq)= 1
queue= [(<Atom instance> ligcovalent:A:CYS162:CX, <Atom instance> ligcovalent:A:CYS162:OX)]
 currently queue= CX - OX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS162:CX, <Atom instance> ligcovalent:A:CYS162:OX)]
 processing queue entry:  CX - OX
in wBF with fromAtom= CX + startAtom= OX startAtom.used= 0
wBF: wrote  OX
self.outatom_counter= 19


writing and calling wL with nA= CX - 19
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 20
len( CX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []
 currently queue=
CX : OX : queue= []
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 21


writing and calling wL with nA= CX - 21
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 22
len( CX ).bonds= 1
skipping b= CX - CX
returning queue= []
newQ= []
 currently queue=
CX : CX : queue= []
wrote flex file ligcovalent_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: ligcovalent_flex.pdbqt
wrote rigid file: ligcovalent_rigid.pdbqt
4---done
setting PYTHONHOME environment
setting PYTHONHOME environment
!unable to use ligand.TORSDOF! torsdof always set to ligand.ndihe= 7
5---done
 concat 10 log files... done.
Job finished, good luck!
rm: 无法删除'chimera.com': 没有那个文件或目录
rm: 无法删除'tmp.mol2': 没有那个文件或目录
Done
Processing residue A:CYS120
[start] output filename is: ligcovalent_single.pdb
CHAIN A
Writing output filename: ligcovalent_single.pdb
1---ligcovalent.pdb prepared...
1.5--done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= fixed  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  fixed
merged  0  nonpolar hydrogens
end of base class init
using std outputfilename  fixed.pdbqt
wrote  fixed  to  fixed.pdbqt
2---done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= ligcovalent  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  ligcovalent
merged  21  nonpolar hydrogens
end of base class init
using std outputfilename  ligcovalent.pdbqt
wrote  ligcovalent  to  ligcovalent.pdbqt
3---done
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> fixed:A:CYS120 with 6 MolKit.molecule.Atom]
calling setAutoFlexFields with  fixed:A:CYS120
in setAutoFlexFields with  fixed:A:CYS120
len(rotatables)= 1
returning res.torscount= 1
res.root= CA
ntors= 1
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= fixed_flex.pdbqt
res_total= 1
in writeResidue with  fixed:A:CYS120
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS120:CA, <Atom instance> fixed:A:CYS120:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS120:CA, <Atom instance> fixed:A:CYS120:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS120:N, <Atom instance> fixed:A:CYS120:CA)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3


writing and calling wL with nA= SG - 3
wBF2: wrote  SG
!!!2:calling wL


in writeLevel with  SG  outatom_counter= 4
len( SG ).bonds= 1
skipping b= CB - SG
returning queue= []
newQ= []
 currently queue=
CA : CB : queue= []
wrote flex file fixed_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: fixed_flex.pdbqt
wrote rigid file: fixed_rigid.pdbqt
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> ligcovalent:A:CYS120 with 28 MolKit.molecule.Atom]
calling setAutoFlexFields with  ligcovalent:A:CYS120
in setAutoFlexFields with  ligcovalent:A:CYS120
len(rotatables)= 8
returning res.torscount= 7
res.root= CA
ntors= 7
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= ligcovalent_flex.pdbqt
res_total= 7
in writeResidue with  ligcovalent:A:CYS120
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS120:CA, <Atom instance> ligcovalent:A:CYS120:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS120:CA, <Atom instance> ligcovalent:A:CYS120:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS120:N, <Atom instance> ligcovalent:A:CYS120:CA)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3
 currently queue= CB - SG ,
CA : CB : queue= [(<Atom instance> ligcovalent:A:CYS120:CB, <Atom instance> ligcovalent:A:CYS120:SG)]
 processing queue entry:  CB - SG
in wBF with fromAtom= CB + startAtom= SG startAtom.used= 0
wBF: wrote  SG
self.outatom_counter= 4
 currently queue= SG - CX ,
CB : SG : queue= [(<Atom instance> ligcovalent:A:CYS120:SG, <Atom instance> ligcovalent:A:CYS120:CX)]
 processing queue entry:  SG - CX
in wBF with fromAtom= SG + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 5
 currently queue= CX - CX ,
SG : CX : queue= [(<Atom instance> ligcovalent:A:CYS120:CX, <Atom instance> ligcovalent:A:CYS120:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 6
 currently queue= CX - CX , CX - CX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS120:CX, <Atom instance> ligcovalent:A:CYS120:CX), (<Atom instance> ligcovalent:A:CYS120:CX, <Atom instance> ligcovalent:A:CYS120:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 7


writing and calling wL with nA= CX - 7
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 8
len( CX ).bonds= 1
skipping b= CX - CX
returning queue= []
newQ= []
 currently queue=
CX : CX : queue= []
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 9


writing and calling wL with nA= NX - 9
wBF2: wrote  NX
!!!2:calling wL


in writeLevel with  NX  outatom_counter= 10
len( NX ).bonds= 3
processing b= CX - NX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
processing b= NX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= NX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 12
len( CX ).bonds= 3
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - NX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 14
len( CX ).bonds= 3
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 16
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 17
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= []
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 17
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 18
len( CX ).bonds= 3
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
processing b= OX - CX  activeTors= 1
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
CX wL: queue= [(<Atom instance> ligcovalent:A:CYS120:CX, <Atom instance> ligcovalent:A:CYS120:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 19
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS120:CX, <Atom instance> ligcovalent:A:CYS120:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS120:CX, <Atom instance> ligcovalent:A:CYS120:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS120:CX, <Atom instance> ligcovalent:A:CYS120:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS120:CX, <Atom instance> ligcovalent:A:CYS120:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS120:CX, <Atom instance> ligcovalent:A:CYS120:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS120:CX, <Atom instance> ligcovalent:A:CYS120:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 19
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS120:CX, <Atom instance> ligcovalent:A:CYS120:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS120:CX, <Atom instance> ligcovalent:A:CYS120:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 19
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= NX - CX
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS120:CX, <Atom instance> ligcovalent:A:CYS120:OX)]
newQ= [(<Atom instance> ligcovalent:A:CYS120:CX, <Atom instance> ligcovalent:A:CYS120:OX)]
@@@@len(newq)= 1
queue= [(<Atom instance> ligcovalent:A:CYS120:CX, <Atom instance> ligcovalent:A:CYS120:OX)]


writing and calling wL with nA= OX - 19
wBF2: wrote  OX
!!!2:calling wL


in writeLevel with  OX  outatom_counter= 20
len( OX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []
 currently queue= CX - OX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS120:CX, <Atom instance> ligcovalent:A:CYS120:OX)]
 processing queue entry:  CX - OX
in wBF with fromAtom= CX + startAtom= OX startAtom.used= 0
wBF: wrote  OX
self.outatom_counter= 21


writing and calling wL with nA= CX - 21
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 22
len( CX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []
 currently queue=
CX : OX : queue= []
wrote flex file ligcovalent_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: ligcovalent_flex.pdbqt
wrote rigid file: ligcovalent_rigid.pdbqt
4---done
setting PYTHONHOME environment
setting PYTHONHOME environment
!unable to use ligand.TORSDOF! torsdof always set to ligand.ndihe= 7
5---done
 concat 10 log files... done.
Job finished, good luck!
rm: 无法删除'chimera.com': 没有那个文件或目录
rm: 无法删除'tmp.mol2': 没有那个文件或目录
Done
Processing residue A:CYS162
[start] output filename is: ligcovalent_single.pdb
CHAIN A
Writing output filename: ligcovalent_single.pdb
1---ligcovalent.pdb prepared...
1.5--done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= fixed  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  fixed
merged  0  nonpolar hydrogens
end of base class init
using std outputfilename  fixed.pdbqt
wrote  fixed  to  fixed.pdbqt
2---done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= ligcovalent  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  ligcovalent
merged  21  nonpolar hydrogens
end of base class init
using std outputfilename  ligcovalent.pdbqt
wrote  ligcovalent  to  ligcovalent.pdbqt
3---done
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> fixed:A:CYS162 with 6 MolKit.molecule.Atom]
calling setAutoFlexFields with  fixed:A:CYS162
in setAutoFlexFields with  fixed:A:CYS162
len(rotatables)= 1
returning res.torscount= 1
res.root= CA
ntors= 1
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= fixed_flex.pdbqt
res_total= 1
in writeResidue with  fixed:A:CYS162
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS162:N, <Atom instance> fixed:A:CYS162:CA)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS162:CA, <Atom instance> fixed:A:CYS162:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS162:CA, <Atom instance> fixed:A:CYS162:CB)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3


writing and calling wL with nA= SG - 3
wBF2: wrote  SG
!!!2:calling wL


in writeLevel with  SG  outatom_counter= 4
len( SG ).bonds= 1
skipping b= CB - SG
returning queue= []
newQ= []
 currently queue=
CA : CB : queue= []
wrote flex file fixed_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: fixed_flex.pdbqt
wrote rigid file: fixed_rigid.pdbqt
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> ligcovalent:A:CYS162 with 28 MolKit.molecule.Atom]
calling setAutoFlexFields with  ligcovalent:A:CYS162
in setAutoFlexFields with  ligcovalent:A:CYS162
len(rotatables)= 8
returning res.torscount= 7
res.root= CA
ntors= 7
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= ligcovalent_flex.pdbqt
res_total= 7
in writeResidue with  ligcovalent:A:CYS162
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS162:N, <Atom instance> ligcovalent:A:CYS162:CA)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS162:CA, <Atom instance> ligcovalent:A:CYS162:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS162:CA, <Atom instance> ligcovalent:A:CYS162:CB)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3
 currently queue= CB - SG ,
CA : CB : queue= [(<Atom instance> ligcovalent:A:CYS162:CB, <Atom instance> ligcovalent:A:CYS162:SG)]
 processing queue entry:  CB - SG
in wBF with fromAtom= CB + startAtom= SG startAtom.used= 0
wBF: wrote  SG
self.outatom_counter= 4
 currently queue= SG - CX ,
CB : SG : queue= [(<Atom instance> ligcovalent:A:CYS162:SG, <Atom instance> ligcovalent:A:CYS162:CX)]
 processing queue entry:  SG - CX
in wBF with fromAtom= SG + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 5
 currently queue= CX - CX ,
SG : CX : queue= [(<Atom instance> ligcovalent:A:CYS162:CX, <Atom instance> ligcovalent:A:CYS162:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 6
 currently queue= CX - CX , CX - CX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS162:CX, <Atom instance> ligcovalent:A:CYS162:CX), (<Atom instance> ligcovalent:A:CYS162:CX, <Atom instance> ligcovalent:A:CYS162:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 7


writing and calling wL with nA= OX - 7
wBF2: wrote  OX
!!!2:calling wL


in writeLevel with  OX  outatom_counter= 8
len( OX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []


writing and calling wL with nA= NX - 8
wBF2: wrote  NX
!!!2:calling wL


in writeLevel with  NX  outatom_counter= 9
len( NX ).bonds= 3
skipping b= NX - CX
processing b= NX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
processing b= CX - NX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 11
len( CX ).bonds= 2
skipping b= NX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 12
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 13
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 14
len( CX ).bonds= 3
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 15
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 16
len( CX ).bonds= 3
processing b= OX - CX  activeTors= 1
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
CX wL: queue= [(<Atom instance> ligcovalent:A:CYS162:CX, <Atom instance> ligcovalent:A:CYS162:OX)]
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 17
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 18
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS162:CX, <Atom instance> ligcovalent:A:CYS162:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS162:CX, <Atom instance> ligcovalent:A:CYS162:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS162:CX, <Atom instance> ligcovalent:A:CYS162:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS162:CX, <Atom instance> ligcovalent:A:CYS162:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS162:CX, <Atom instance> ligcovalent:A:CYS162:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS162:CX, <Atom instance> ligcovalent:A:CYS162:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS162:CX, <Atom instance> ligcovalent:A:CYS162:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS162:CX, <Atom instance> ligcovalent:A:CYS162:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS162:CX, <Atom instance> ligcovalent:A:CYS162:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS162:CX, <Atom instance> ligcovalent:A:CYS162:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS162:CX, <Atom instance> ligcovalent:A:CYS162:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS162:CX, <Atom instance> ligcovalent:A:CYS162:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 18
len( CX ).bonds= 3
skipping b= CX - CX
skipping b= CX - NX
skipping b= CX - CX
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS162:CX, <Atom instance> ligcovalent:A:CYS162:OX)]
newQ= [(<Atom instance> ligcovalent:A:CYS162:CX, <Atom instance> ligcovalent:A:CYS162:OX)]
@@@@len(newq)= 1
queue= [(<Atom instance> ligcovalent:A:CYS162:CX, <Atom instance> ligcovalent:A:CYS162:OX)]
 currently queue= CX - OX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS162:CX, <Atom instance> ligcovalent:A:CYS162:OX)]
 processing queue entry:  CX - OX
in wBF with fromAtom= CX + startAtom= OX startAtom.used= 0
wBF: wrote  OX
self.outatom_counter= 19


writing and calling wL with nA= CX - 19
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 20
len( CX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []
 currently queue=
CX : OX : queue= []
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 21


writing and calling wL with nA= CX - 21
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 22
len( CX ).bonds= 1
skipping b= CX - CX
returning queue= []
newQ= []
 currently queue=
CX : CX : queue= []
wrote flex file ligcovalent_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: ligcovalent_flex.pdbqt
wrote rigid file: ligcovalent_rigid.pdbqt
4---done
setting PYTHONHOME environment
setting PYTHONHOME environment
!unable to use ligand.TORSDOF! torsdof always set to ligand.ndihe= 7
5---done
 concat 10 log files... done.
Job finished, good luck!
rm: 无法删除'chimera.com': 没有那个文件或目录
rm: 无法删除'tmp.mol2': 没有那个文件或目录
Done
Processing residue A:CYS620
[start] output filename is: ligcovalent_single.pdb
CHAIN A
Writing output filename: ligcovalent_single.pdb
1---ligcovalent.pdb prepared...
1.5--done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= fixed  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  fixed
merged  0  nonpolar hydrogens
end of base class init
using std outputfilename  fixed.pdbqt
wrote  fixed  to  fixed.pdbqt
2---done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= ligcovalent  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  ligcovalent
merged  21  nonpolar hydrogens
end of base class init
using std outputfilename  ligcovalent.pdbqt
wrote  ligcovalent  to  ligcovalent.pdbqt
3---done
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> fixed:A:CYS620 with 6 MolKit.molecule.Atom]
calling setAutoFlexFields with  fixed:A:CYS620
in setAutoFlexFields with  fixed:A:CYS620
len(rotatables)= 1
returning res.torscount= 1
res.root= CA
ntors= 1
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= fixed_flex.pdbqt
res_total= 1
in writeResidue with  fixed:A:CYS620
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS620:N, <Atom instance> fixed:A:CYS620:CA)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS620:CA, <Atom instance> fixed:A:CYS620:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS620:CA, <Atom instance> fixed:A:CYS620:C)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3


writing and calling wL with nA= SG - 3
wBF2: wrote  SG
!!!2:calling wL


in writeLevel with  SG  outatom_counter= 4
len( SG ).bonds= 1
skipping b= CB - SG
returning queue= []
newQ= []
 currently queue=
CA : CB : queue= []
wrote flex file fixed_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: fixed_flex.pdbqt
wrote rigid file: fixed_rigid.pdbqt
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> ligcovalent:A:CYS620 with 28 MolKit.molecule.Atom]
calling setAutoFlexFields with  ligcovalent:A:CYS620
in setAutoFlexFields with  ligcovalent:A:CYS620
len(rotatables)= 8
returning res.torscount= 7
res.root= CA
ntors= 7
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= ligcovalent_flex.pdbqt
res_total= 7
in writeResidue with  ligcovalent:A:CYS620
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS620:N, <Atom instance> ligcovalent:A:CYS620:CA)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS620:CA, <Atom instance> ligcovalent:A:CYS620:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS620:CA, <Atom instance> ligcovalent:A:CYS620:CB)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3
 currently queue= CB - SG ,
CA : CB : queue= [(<Atom instance> ligcovalent:A:CYS620:CB, <Atom instance> ligcovalent:A:CYS620:SG)]
 processing queue entry:  CB - SG
in wBF with fromAtom= CB + startAtom= SG startAtom.used= 0
wBF: wrote  SG
self.outatom_counter= 4
 currently queue= SG - CX ,
CB : SG : queue= [(<Atom instance> ligcovalent:A:CYS620:SG, <Atom instance> ligcovalent:A:CYS620:CX)]
 processing queue entry:  SG - CX
in wBF with fromAtom= SG + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 5
 currently queue= CX - CX ,
SG : CX : queue= [(<Atom instance> ligcovalent:A:CYS620:CX, <Atom instance> ligcovalent:A:CYS620:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 6
 currently queue= CX - CX , CX - CX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS620:CX, <Atom instance> ligcovalent:A:CYS620:CX), (<Atom instance> ligcovalent:A:CYS620:CX, <Atom instance> ligcovalent:A:CYS620:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 7


writing and calling wL with nA= CX - 7
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 8
len( CX ).bonds= 1
skipping b= CX - CX
returning queue= []
newQ= []
 currently queue=
CX : CX : queue= []
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 9


writing and calling wL with nA= OX - 9
wBF2: wrote  OX
!!!2:calling wL


in writeLevel with  OX  outatom_counter= 10
len( OX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []


writing and calling wL with nA= NX - 10
wBF2: wrote  NX
!!!2:calling wL


in writeLevel with  NX  outatom_counter= 11
len( NX ).bonds= 3
skipping b= NX - CX
processing b= NX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
processing b= CX - NX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 13
len( CX ).bonds= 2
skipping b= NX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 14
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 15
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 16
len( CX ).bonds= 3
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 17
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 18
len( CX ).bonds= 3
processing b= OX - CX  activeTors= 1
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
CX wL: queue= [(<Atom instance> ligcovalent:A:CYS620:CX, <Atom instance> ligcovalent:A:CYS620:OX)]
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 19
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 20
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS620:CX, <Atom instance> ligcovalent:A:CYS620:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS620:CX, <Atom instance> ligcovalent:A:CYS620:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS620:CX, <Atom instance> ligcovalent:A:CYS620:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS620:CX, <Atom instance> ligcovalent:A:CYS620:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS620:CX, <Atom instance> ligcovalent:A:CYS620:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS620:CX, <Atom instance> ligcovalent:A:CYS620:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS620:CX, <Atom instance> ligcovalent:A:CYS620:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS620:CX, <Atom instance> ligcovalent:A:CYS620:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS620:CX, <Atom instance> ligcovalent:A:CYS620:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS620:CX, <Atom instance> ligcovalent:A:CYS620:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS620:CX, <Atom instance> ligcovalent:A:CYS620:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS620:CX, <Atom instance> ligcovalent:A:CYS620:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 20
len( CX ).bonds= 3
skipping b= CX - CX
skipping b= CX - NX
skipping b= CX - CX
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS620:CX, <Atom instance> ligcovalent:A:CYS620:OX)]
newQ= [(<Atom instance> ligcovalent:A:CYS620:CX, <Atom instance> ligcovalent:A:CYS620:OX)]
@@@@len(newq)= 1
queue= [(<Atom instance> ligcovalent:A:CYS620:CX, <Atom instance> ligcovalent:A:CYS620:OX)]
 currently queue= CX - OX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS620:CX, <Atom instance> ligcovalent:A:CYS620:OX)]
 processing queue entry:  CX - OX
in wBF with fromAtom= CX + startAtom= OX startAtom.used= 0
wBF: wrote  OX
self.outatom_counter= 21


writing and calling wL with nA= CX - 21
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 22
len( CX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []
 currently queue=
CX : OX : queue= []
wrote flex file ligcovalent_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: ligcovalent_flex.pdbqt
wrote rigid file: ligcovalent_rigid.pdbqt
4---done
setting PYTHONHOME environment
setting PYTHONHOME environment
!unable to use ligand.TORSDOF! torsdof always set to ligand.ndihe= 7
5---done
 concat 10 log files... done.
Job finished, good luck!
rm: 无法删除'chimera.com': 没有那个文件或目录
rm: 无法删除'tmp.mol2': 没有那个文件或目录
Done
Processing residue A:CYS19
[start] output filename is: ligcovalent_single.pdb
CHAIN A
Writing output filename: ligcovalent_single.pdb
1---ligcovalent.pdb prepared...
1.5--done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= fixed  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  fixed
merged  0  nonpolar hydrogens
end of base class init
using std outputfilename  fixed.pdbqt
wrote  fixed  to  fixed.pdbqt
2---done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= ligcovalent  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  ligcovalent
merged  21  nonpolar hydrogens
end of base class init
using std outputfilename  ligcovalent.pdbqt
wrote  ligcovalent  to  ligcovalent.pdbqt
3---done
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> fixed:A:CYS19 with 6 MolKit.molecule.Atom]
calling setAutoFlexFields with  fixed:A:CYS19
in setAutoFlexFields with  fixed:A:CYS19
len(rotatables)= 1
returning res.torscount= 1
res.root= CA
ntors= 1
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= fixed_flex.pdbqt
res_total= 1
in writeResidue with  fixed:A:CYS19
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS19:CA, <Atom instance> fixed:A:CYS19:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS19:CA, <Atom instance> fixed:A:CYS19:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS19:N, <Atom instance> fixed:A:CYS19:CA)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3


writing and calling wL with nA= SG - 3
wBF2: wrote  SG
!!!2:calling wL


in writeLevel with  SG  outatom_counter= 4
len( SG ).bonds= 1
skipping b= CB - SG
returning queue= []
newQ= []
 currently queue=
CA : CB : queue= []
wrote flex file fixed_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: fixed_flex.pdbqt
wrote rigid file: fixed_rigid.pdbqt
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> ligcovalent:A:CYS19 with 28 MolKit.molecule.Atom]
calling setAutoFlexFields with  ligcovalent:A:CYS19
in setAutoFlexFields with  ligcovalent:A:CYS19
len(rotatables)= 8
returning res.torscount= 7
res.root= CA
ntors= 7
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= ligcovalent_flex.pdbqt
res_total= 7
in writeResidue with  ligcovalent:A:CYS19
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS19:CA, <Atom instance> ligcovalent:A:CYS19:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS19:CA, <Atom instance> ligcovalent:A:CYS19:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS19:N, <Atom instance> ligcovalent:A:CYS19:CA)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3
 currently queue= CB - SG ,
CA : CB : queue= [(<Atom instance> ligcovalent:A:CYS19:CB, <Atom instance> ligcovalent:A:CYS19:SG)]
 processing queue entry:  CB - SG
in wBF with fromAtom= CB + startAtom= SG startAtom.used= 0
wBF: wrote  SG
self.outatom_counter= 4
 currently queue= SG - CX ,
CB : SG : queue= [(<Atom instance> ligcovalent:A:CYS19:SG, <Atom instance> ligcovalent:A:CYS19:CX)]
 processing queue entry:  SG - CX
in wBF with fromAtom= SG + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 5
 currently queue= CX - CX ,
SG : CX : queue= [(<Atom instance> ligcovalent:A:CYS19:CX, <Atom instance> ligcovalent:A:CYS19:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 6
 currently queue= CX - CX , CX - CX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS19:CX, <Atom instance> ligcovalent:A:CYS19:CX), (<Atom instance> ligcovalent:A:CYS19:CX, <Atom instance> ligcovalent:A:CYS19:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 7


writing and calling wL with nA= OX - 7
wBF2: wrote  OX
!!!2:calling wL


in writeLevel with  OX  outatom_counter= 8
len( OX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []


writing and calling wL with nA= NX - 8
wBF2: wrote  NX
!!!2:calling wL


in writeLevel with  NX  outatom_counter= 9
len( NX ).bonds= 3
skipping b= NX - CX
processing b= NX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
processing b= CX - NX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 11
len( CX ).bonds= 2
skipping b= NX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 12
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 13
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 14
len( CX ).bonds= 3
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 15
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 16
len( CX ).bonds= 3
processing b= OX - CX  activeTors= 1
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
CX wL: queue= [(<Atom instance> ligcovalent:A:CYS19:CX, <Atom instance> ligcovalent:A:CYS19:OX)]
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 17
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 18
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS19:CX, <Atom instance> ligcovalent:A:CYS19:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS19:CX, <Atom instance> ligcovalent:A:CYS19:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS19:CX, <Atom instance> ligcovalent:A:CYS19:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS19:CX, <Atom instance> ligcovalent:A:CYS19:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS19:CX, <Atom instance> ligcovalent:A:CYS19:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS19:CX, <Atom instance> ligcovalent:A:CYS19:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS19:CX, <Atom instance> ligcovalent:A:CYS19:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS19:CX, <Atom instance> ligcovalent:A:CYS19:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS19:CX, <Atom instance> ligcovalent:A:CYS19:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS19:CX, <Atom instance> ligcovalent:A:CYS19:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS19:CX, <Atom instance> ligcovalent:A:CYS19:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS19:CX, <Atom instance> ligcovalent:A:CYS19:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 18
len( CX ).bonds= 3
skipping b= CX - CX
skipping b= CX - NX
skipping b= CX - CX
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS19:CX, <Atom instance> ligcovalent:A:CYS19:OX)]
newQ= [(<Atom instance> ligcovalent:A:CYS19:CX, <Atom instance> ligcovalent:A:CYS19:OX)]
@@@@len(newq)= 1
queue= [(<Atom instance> ligcovalent:A:CYS19:CX, <Atom instance> ligcovalent:A:CYS19:OX)]
 currently queue= CX - OX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS19:CX, <Atom instance> ligcovalent:A:CYS19:OX)]
 processing queue entry:  CX - OX
in wBF with fromAtom= CX + startAtom= OX startAtom.used= 0
wBF: wrote  OX
self.outatom_counter= 19


writing and calling wL with nA= CX - 19
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 20
len( CX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []
 currently queue=
CX : OX : queue= []
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 21


writing and calling wL with nA= CX - 21
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 22
len( CX ).bonds= 1
skipping b= CX - CX
returning queue= []
newQ= []
 currently queue=
CX : CX : queue= []
wrote flex file ligcovalent_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: ligcovalent_flex.pdbqt
wrote rigid file: ligcovalent_rigid.pdbqt
4---done
setting PYTHONHOME environment
setting PYTHONHOME environment
!unable to use ligand.TORSDOF! torsdof always set to ligand.ndihe= 7
5---done
 concat 10 log files... done.
Job finished, good luck!
rm: 无法删除'chimera.com': 没有那个文件或目录
rm: 无法删除'tmp.mol2': 没有那个文件或目录
Done
Processing residue A:CYS258
[start] output filename is: ligcovalent_single.pdb
CHAIN A
Writing output filename: ligcovalent_single.pdb
1---ligcovalent.pdb prepared...
1.5--done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= fixed  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  fixed
merged  0  nonpolar hydrogens
end of base class init
using std outputfilename  fixed.pdbqt
wrote  fixed  to  fixed.pdbqt
2---done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= ligcovalent  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  ligcovalent
merged  21  nonpolar hydrogens
end of base class init
using std outputfilename  ligcovalent.pdbqt
wrote  ligcovalent  to  ligcovalent.pdbqt
3---done
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> fixed:A:CYS258 with 6 MolKit.molecule.Atom]
calling setAutoFlexFields with  fixed:A:CYS258
in setAutoFlexFields with  fixed:A:CYS258
len(rotatables)= 1
returning res.torscount= 1
res.root= CA
ntors= 1
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= fixed_flex.pdbqt
res_total= 1
in writeResidue with  fixed:A:CYS258
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS258:CA, <Atom instance> fixed:A:CYS258:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS258:CA, <Atom instance> fixed:A:CYS258:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS258:N, <Atom instance> fixed:A:CYS258:CA)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3


writing and calling wL with nA= SG - 3
wBF2: wrote  SG
!!!2:calling wL


in writeLevel with  SG  outatom_counter= 4
len( SG ).bonds= 1
skipping b= CB - SG
returning queue= []
newQ= []
 currently queue=
CA : CB : queue= []
wrote flex file fixed_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: fixed_flex.pdbqt
wrote rigid file: fixed_rigid.pdbqt
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> ligcovalent:A:CYS258 with 28 MolKit.molecule.Atom]
calling setAutoFlexFields with  ligcovalent:A:CYS258
in setAutoFlexFields with  ligcovalent:A:CYS258
len(rotatables)= 8
returning res.torscount= 7
res.root= CA
ntors= 7
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= ligcovalent_flex.pdbqt
res_total= 7
in writeResidue with  ligcovalent:A:CYS258
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS258:N, <Atom instance> ligcovalent:A:CYS258:CA)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS258:CA, <Atom instance> ligcovalent:A:CYS258:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS258:CA, <Atom instance> ligcovalent:A:CYS258:C)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3
 currently queue= CB - SG ,
CA : CB : queue= [(<Atom instance> ligcovalent:A:CYS258:CB, <Atom instance> ligcovalent:A:CYS258:SG)]
 processing queue entry:  CB - SG
in wBF with fromAtom= CB + startAtom= SG startAtom.used= 0
wBF: wrote  SG
self.outatom_counter= 4
 currently queue= SG - CX ,
CB : SG : queue= [(<Atom instance> ligcovalent:A:CYS258:SG, <Atom instance> ligcovalent:A:CYS258:CX)]
 processing queue entry:  SG - CX
in wBF with fromAtom= SG + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 5
 currently queue= CX - CX ,
SG : CX : queue= [(<Atom instance> ligcovalent:A:CYS258:CX, <Atom instance> ligcovalent:A:CYS258:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 6
 currently queue= CX - CX , CX - CX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS258:CX, <Atom instance> ligcovalent:A:CYS258:CX), (<Atom instance> ligcovalent:A:CYS258:CX, <Atom instance> ligcovalent:A:CYS258:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 7


writing and calling wL with nA= CX - 7
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 8
len( CX ).bonds= 1
skipping b= CX - CX
returning queue= []
newQ= []
 currently queue=
CX : CX : queue= []
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 9


writing and calling wL with nA= OX - 9
wBF2: wrote  OX
!!!2:calling wL


in writeLevel with  OX  outatom_counter= 10
len( OX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []


writing and calling wL with nA= NX - 10
wBF2: wrote  NX
!!!2:calling wL


in writeLevel with  NX  outatom_counter= 11
len( NX ).bonds= 3
processing b= CX - NX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= NX - CX
processing b= NX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 13
len( CX ).bonds= 3
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - NX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 15
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 16
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 17
len( CX ).bonds= 3
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
processing b= OX - CX  activeTors= 1
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
CX wL: queue= [(<Atom instance> ligcovalent:A:CYS258:CX, <Atom instance> ligcovalent:A:CYS258:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 18
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS258:CX, <Atom instance> ligcovalent:A:CYS258:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS258:CX, <Atom instance> ligcovalent:A:CYS258:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS258:CX, <Atom instance> ligcovalent:A:CYS258:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS258:CX, <Atom instance> ligcovalent:A:CYS258:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS258:CX, <Atom instance> ligcovalent:A:CYS258:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS258:CX, <Atom instance> ligcovalent:A:CYS258:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 18
len( CX ).bonds= 3
skipping b= CX - CX
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 19
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 20
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= []
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS258:CX, <Atom instance> ligcovalent:A:CYS258:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS258:CX, <Atom instance> ligcovalent:A:CYS258:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 20
len( CX ).bonds= 2
skipping b= NX - CX
skipping b= CX - CX
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS258:CX, <Atom instance> ligcovalent:A:CYS258:OX)]
newQ= [(<Atom instance> ligcovalent:A:CYS258:CX, <Atom instance> ligcovalent:A:CYS258:OX)]
@@@@len(newq)= 1
queue= [(<Atom instance> ligcovalent:A:CYS258:CX, <Atom instance> ligcovalent:A:CYS258:OX)]
 currently queue= CX - OX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS258:CX, <Atom instance> ligcovalent:A:CYS258:OX)]
 processing queue entry:  CX - OX
in wBF with fromAtom= CX + startAtom= OX startAtom.used= 0
wBF: wrote  OX
self.outatom_counter= 21


writing and calling wL with nA= CX - 21
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 22
len( CX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []
 currently queue=
CX : OX : queue= []
wrote flex file ligcovalent_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: ligcovalent_flex.pdbqt
wrote rigid file: ligcovalent_rigid.pdbqt
4---done
setting PYTHONHOME environment
setting PYTHONHOME environment
!unable to use ligand.TORSDOF! torsdof always set to ligand.ndihe= 7
5---done
 concat 10 log files... done.
Job finished, good luck!
rm: 无法删除'chimera.com': 没有那个文件或目录
rm: 无法删除'tmp.mol2': 没有那个文件或目录
Done
Processing residue A:CYS195
[start] output filename is: ligcovalent_single.pdb
CHAIN A
Writing output filename: ligcovalent_single.pdb
1---ligcovalent.pdb prepared...
1.5--done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= fixed  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  fixed
merged  0  nonpolar hydrogens
end of base class init
using std outputfilename  fixed.pdbqt
wrote  fixed  to  fixed.pdbqt
2---done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= ligcovalent  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  ligcovalent
merged  21  nonpolar hydrogens
end of base class init
using std outputfilename  ligcovalent.pdbqt
wrote  ligcovalent  to  ligcovalent.pdbqt
3---done
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> fixed:A:CYS195 with 6 MolKit.molecule.Atom]
calling setAutoFlexFields with  fixed:A:CYS195
in setAutoFlexFields with  fixed:A:CYS195
len(rotatables)= 1
returning res.torscount= 1
res.root= CA
ntors= 1
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= fixed_flex.pdbqt
res_total= 1
in writeResidue with  fixed:A:CYS195
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS195:CA, <Atom instance> fixed:A:CYS195:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS195:CA, <Atom instance> fixed:A:CYS195:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS195:N, <Atom instance> fixed:A:CYS195:CA)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3


writing and calling wL with nA= SG - 3
wBF2: wrote  SG
!!!2:calling wL


in writeLevel with  SG  outatom_counter= 4
len( SG ).bonds= 1
skipping b= CB - SG
returning queue= []
newQ= []
 currently queue=
CA : CB : queue= []
wrote flex file fixed_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: fixed_flex.pdbqt
wrote rigid file: fixed_rigid.pdbqt
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> ligcovalent:A:CYS195 with 28 MolKit.molecule.Atom]
calling setAutoFlexFields with  ligcovalent:A:CYS195
in setAutoFlexFields with  ligcovalent:A:CYS195
len(rotatables)= 8
returning res.torscount= 7
res.root= CA
ntors= 7
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= ligcovalent_flex.pdbqt
res_total= 7
in writeResidue with  ligcovalent:A:CYS195
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS195:N, <Atom instance> ligcovalent:A:CYS195:CA)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS195:CA, <Atom instance> ligcovalent:A:CYS195:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS195:CA, <Atom instance> ligcovalent:A:CYS195:CB)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3
 currently queue= CB - SG ,
CA : CB : queue= [(<Atom instance> ligcovalent:A:CYS195:CB, <Atom instance> ligcovalent:A:CYS195:SG)]
 processing queue entry:  CB - SG
in wBF with fromAtom= CB + startAtom= SG startAtom.used= 0
wBF: wrote  SG
self.outatom_counter= 4
 currently queue= SG - CX ,
CB : SG : queue= [(<Atom instance> ligcovalent:A:CYS195:SG, <Atom instance> ligcovalent:A:CYS195:CX)]
 processing queue entry:  SG - CX
in wBF with fromAtom= SG + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 5
 currently queue= CX - CX ,
SG : CX : queue= [(<Atom instance> ligcovalent:A:CYS195:CX, <Atom instance> ligcovalent:A:CYS195:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 6
 currently queue= CX - CX , CX - CX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS195:CX, <Atom instance> ligcovalent:A:CYS195:CX), (<Atom instance> ligcovalent:A:CYS195:CX, <Atom instance> ligcovalent:A:CYS195:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 7


writing and calling wL with nA= OX - 7
wBF2: wrote  OX
!!!2:calling wL


in writeLevel with  OX  outatom_counter= 8
len( OX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []


writing and calling wL with nA= NX - 8
wBF2: wrote  NX
!!!2:calling wL


in writeLevel with  NX  outatom_counter= 9
len( NX ).bonds= 3
processing b= CX - NX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= NX - CX
processing b= NX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 11
len( CX ).bonds= 3
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - NX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 13
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 14
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 15
len( CX ).bonds= 3
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
processing b= OX - CX  activeTors= 1
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
CX wL: queue= [(<Atom instance> ligcovalent:A:CYS195:CX, <Atom instance> ligcovalent:A:CYS195:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 16
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS195:CX, <Atom instance> ligcovalent:A:CYS195:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS195:CX, <Atom instance> ligcovalent:A:CYS195:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS195:CX, <Atom instance> ligcovalent:A:CYS195:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS195:CX, <Atom instance> ligcovalent:A:CYS195:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS195:CX, <Atom instance> ligcovalent:A:CYS195:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS195:CX, <Atom instance> ligcovalent:A:CYS195:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 16
len( CX ).bonds= 3
skipping b= CX - CX
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 17
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 18
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= []
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS195:CX, <Atom instance> ligcovalent:A:CYS195:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS195:CX, <Atom instance> ligcovalent:A:CYS195:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 18
len( CX ).bonds= 2
skipping b= NX - CX
skipping b= CX - CX
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS195:CX, <Atom instance> ligcovalent:A:CYS195:OX)]
newQ= [(<Atom instance> ligcovalent:A:CYS195:CX, <Atom instance> ligcovalent:A:CYS195:OX)]
@@@@len(newq)= 1
queue= [(<Atom instance> ligcovalent:A:CYS195:CX, <Atom instance> ligcovalent:A:CYS195:OX)]
 currently queue= CX - OX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS195:CX, <Atom instance> ligcovalent:A:CYS195:OX)]
 processing queue entry:  CX - OX
in wBF with fromAtom= CX + startAtom= OX startAtom.used= 0
wBF: wrote  OX
self.outatom_counter= 19


writing and calling wL with nA= CX - 19
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 20
len( CX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []
 currently queue=
CX : OX : queue= []
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 21


writing and calling wL with nA= CX - 21
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 22
len( CX ).bonds= 1
skipping b= CX - CX
returning queue= []
newQ= []
 currently queue=
CX : CX : queue= []
wrote flex file ligcovalent_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: ligcovalent_flex.pdbqt
wrote rigid file: ligcovalent_rigid.pdbqt
4---done
setting PYTHONHOME environment
setting PYTHONHOME environment
!unable to use ligand.TORSDOF! torsdof always set to ligand.ndihe= 7
5---done
 concat 10 log files... done.
Job finished, good luck!
rm: 无法删除'chimera.com': 没有那个文件或目录
rm: 无法删除'tmp.mol2': 没有那个文件或目录
Done
Processing residue A:CYS327
[start] output filename is: ligcovalent_single.pdb
CHAIN A
Writing output filename: ligcovalent_single.pdb
1---ligcovalent.pdb prepared...
1.5--done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= fixed  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  fixed
merged  0  nonpolar hydrogens
end of base class init
using std outputfilename  fixed.pdbqt
wrote  fixed  to  fixed.pdbqt
2---done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= ligcovalent  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  ligcovalent
merged  21  nonpolar hydrogens
end of base class init
using std outputfilename  ligcovalent.pdbqt
wrote  ligcovalent  to  ligcovalent.pdbqt
3---done
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> fixed:A:CYS327 with 6 MolKit.molecule.Atom]
calling setAutoFlexFields with  fixed:A:CYS327
in setAutoFlexFields with  fixed:A:CYS327
len(rotatables)= 1
returning res.torscount= 1
res.root= CA
ntors= 1
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= fixed_flex.pdbqt
res_total= 1
in writeResidue with  fixed:A:CYS327
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS327:CA, <Atom instance> fixed:A:CYS327:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS327:CA, <Atom instance> fixed:A:CYS327:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS327:N, <Atom instance> fixed:A:CYS327:CA)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3


writing and calling wL with nA= SG - 3
wBF2: wrote  SG
!!!2:calling wL


in writeLevel with  SG  outatom_counter= 4
len( SG ).bonds= 1
skipping b= CB - SG
returning queue= []
newQ= []
 currently queue=
CA : CB : queue= []
wrote flex file fixed_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: fixed_flex.pdbqt
wrote rigid file: fixed_rigid.pdbqt
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> ligcovalent:A:CYS327 with 28 MolKit.molecule.Atom]
calling setAutoFlexFields with  ligcovalent:A:CYS327
in setAutoFlexFields with  ligcovalent:A:CYS327
len(rotatables)= 8
returning res.torscount= 7
res.root= CA
ntors= 7
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= ligcovalent_flex.pdbqt
res_total= 7
in writeResidue with  ligcovalent:A:CYS327
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS327:N, <Atom instance> ligcovalent:A:CYS327:CA)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS327:CA, <Atom instance> ligcovalent:A:CYS327:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS327:CA, <Atom instance> ligcovalent:A:CYS327:C)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3
 currently queue= CB - SG ,
CA : CB : queue= [(<Atom instance> ligcovalent:A:CYS327:CB, <Atom instance> ligcovalent:A:CYS327:SG)]
 processing queue entry:  CB - SG
in wBF with fromAtom= CB + startAtom= SG startAtom.used= 0
wBF: wrote  SG
self.outatom_counter= 4
 currently queue= SG - CX ,
CB : SG : queue= [(<Atom instance> ligcovalent:A:CYS327:SG, <Atom instance> ligcovalent:A:CYS327:CX)]
 processing queue entry:  SG - CX
in wBF with fromAtom= SG + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 5
 currently queue= CX - CX ,
SG : CX : queue= [(<Atom instance> ligcovalent:A:CYS327:CX, <Atom instance> ligcovalent:A:CYS327:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 6
 currently queue= CX - CX , CX - CX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS327:CX, <Atom instance> ligcovalent:A:CYS327:CX), (<Atom instance> ligcovalent:A:CYS327:CX, <Atom instance> ligcovalent:A:CYS327:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 7


writing and calling wL with nA= NX - 7
wBF2: wrote  NX
!!!2:calling wL


in writeLevel with  NX  outatom_counter= 8
len( NX ).bonds= 3
processing b= NX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= NX - CX
processing b= CX - NX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 10
len( CX ).bonds= 2
skipping b= NX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 11
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 12
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 13
len( CX ).bonds= 3
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 14
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 15
len( CX ).bonds= 3
processing b= OX - CX  activeTors= 1
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
CX wL: queue= [(<Atom instance> ligcovalent:A:CYS327:CX, <Atom instance> ligcovalent:A:CYS327:OX)]
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 16
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 17
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS327:CX, <Atom instance> ligcovalent:A:CYS327:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS327:CX, <Atom instance> ligcovalent:A:CYS327:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS327:CX, <Atom instance> ligcovalent:A:CYS327:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS327:CX, <Atom instance> ligcovalent:A:CYS327:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS327:CX, <Atom instance> ligcovalent:A:CYS327:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS327:CX, <Atom instance> ligcovalent:A:CYS327:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS327:CX, <Atom instance> ligcovalent:A:CYS327:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS327:CX, <Atom instance> ligcovalent:A:CYS327:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS327:CX, <Atom instance> ligcovalent:A:CYS327:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS327:CX, <Atom instance> ligcovalent:A:CYS327:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS327:CX, <Atom instance> ligcovalent:A:CYS327:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS327:CX, <Atom instance> ligcovalent:A:CYS327:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 17
len( CX ).bonds= 3
skipping b= CX - CX
skipping b= CX - NX
skipping b= CX - CX
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS327:CX, <Atom instance> ligcovalent:A:CYS327:OX)]
newQ= [(<Atom instance> ligcovalent:A:CYS327:CX, <Atom instance> ligcovalent:A:CYS327:OX)]
@@@@len(newq)= 1
queue= [(<Atom instance> ligcovalent:A:CYS327:CX, <Atom instance> ligcovalent:A:CYS327:OX)]


writing and calling wL with nA= OX - 17
wBF2: wrote  OX
!!!2:calling wL


in writeLevel with  OX  outatom_counter= 18
len( OX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []
 currently queue= CX - OX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS327:CX, <Atom instance> ligcovalent:A:CYS327:OX)]
 processing queue entry:  CX - OX
in wBF with fromAtom= CX + startAtom= OX startAtom.used= 0
wBF: wrote  OX
self.outatom_counter= 19


writing and calling wL with nA= CX - 19
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 20
len( CX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []
 currently queue=
CX : OX : queue= []
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 21


writing and calling wL with nA= CX - 21
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 22
len( CX ).bonds= 1
skipping b= CX - CX
returning queue= []
newQ= []
 currently queue=
CX : CX : queue= []
wrote flex file ligcovalent_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: ligcovalent_flex.pdbqt
wrote rigid file: ligcovalent_rigid.pdbqt
4---done
setting PYTHONHOME environment
setting PYTHONHOME environment
!unable to use ligand.TORSDOF! torsdof always set to ligand.ndihe= 7
5---done
 concat 10 log files... done.
Job finished, good luck!
rm: 无法删除'chimera.com': 没有那个文件或目录
rm: 无法删除'tmp.mol2': 没有那个文件或目录
Done
Processing residue A:CYS342
[start] output filename is: ligcovalent_single.pdb
CHAIN A
Writing output filename: ligcovalent_single.pdb
1---ligcovalent.pdb prepared...
1.5--done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= fixed  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  fixed
merged  0  nonpolar hydrogens
end of base class init
using std outputfilename  fixed.pdbqt
wrote  fixed  to  fixed.pdbqt
2---done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= ligcovalent  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  ligcovalent
merged  21  nonpolar hydrogens
end of base class init
using std outputfilename  ligcovalent.pdbqt
wrote  ligcovalent  to  ligcovalent.pdbqt
3---done
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> fixed:A:CYS342 with 6 MolKit.molecule.Atom]
calling setAutoFlexFields with  fixed:A:CYS342
in setAutoFlexFields with  fixed:A:CYS342
len(rotatables)= 1
returning res.torscount= 1
res.root= CA
ntors= 1
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= fixed_flex.pdbqt
res_total= 1
in writeResidue with  fixed:A:CYS342
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS342:N, <Atom instance> fixed:A:CYS342:CA)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS342:CA, <Atom instance> fixed:A:CYS342:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS342:CA, <Atom instance> fixed:A:CYS342:C)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3


writing and calling wL with nA= SG - 3
wBF2: wrote  SG
!!!2:calling wL


in writeLevel with  SG  outatom_counter= 4
len( SG ).bonds= 1
skipping b= CB - SG
returning queue= []
newQ= []
 currently queue=
CA : CB : queue= []
wrote flex file fixed_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: fixed_flex.pdbqt
wrote rigid file: fixed_rigid.pdbqt
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> ligcovalent:A:CYS342 with 28 MolKit.molecule.Atom]
calling setAutoFlexFields with  ligcovalent:A:CYS342
in setAutoFlexFields with  ligcovalent:A:CYS342
len(rotatables)= 8
returning res.torscount= 7
res.root= CA
ntors= 7
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= ligcovalent_flex.pdbqt
res_total= 7
in writeResidue with  ligcovalent:A:CYS342
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS342:CA, <Atom instance> ligcovalent:A:CYS342:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS342:CA, <Atom instance> ligcovalent:A:CYS342:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS342:N, <Atom instance> ligcovalent:A:CYS342:CA)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3
 currently queue= CB - SG ,
CA : CB : queue= [(<Atom instance> ligcovalent:A:CYS342:CB, <Atom instance> ligcovalent:A:CYS342:SG)]
 processing queue entry:  CB - SG
in wBF with fromAtom= CB + startAtom= SG startAtom.used= 0
wBF: wrote  SG
self.outatom_counter= 4
 currently queue= SG - CX ,
CB : SG : queue= [(<Atom instance> ligcovalent:A:CYS342:SG, <Atom instance> ligcovalent:A:CYS342:CX)]
 processing queue entry:  SG - CX
in wBF with fromAtom= SG + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 5
 currently queue= CX - CX ,
SG : CX : queue= [(<Atom instance> ligcovalent:A:CYS342:CX, <Atom instance> ligcovalent:A:CYS342:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 6
 currently queue= CX - CX , CX - CX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS342:CX, <Atom instance> ligcovalent:A:CYS342:CX), (<Atom instance> ligcovalent:A:CYS342:CX, <Atom instance> ligcovalent:A:CYS342:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 7


writing and calling wL with nA= NX - 7
wBF2: wrote  NX
!!!2:calling wL


in writeLevel with  NX  outatom_counter= 8
len( NX ).bonds= 3
processing b= CX - NX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
processing b= NX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= NX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 10
len( CX ).bonds= 3
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - NX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 12
len( CX ).bonds= 3
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 14
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 15
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= []
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 15
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 16
len( CX ).bonds= 3
processing b= OX - CX  activeTors= 1
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
CX wL: queue= [(<Atom instance> ligcovalent:A:CYS342:CX, <Atom instance> ligcovalent:A:CYS342:OX)]
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 17
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS342:CX, <Atom instance> ligcovalent:A:CYS342:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS342:CX, <Atom instance> ligcovalent:A:CYS342:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS342:CX, <Atom instance> ligcovalent:A:CYS342:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS342:CX, <Atom instance> ligcovalent:A:CYS342:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS342:CX, <Atom instance> ligcovalent:A:CYS342:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS342:CX, <Atom instance> ligcovalent:A:CYS342:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 17
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS342:CX, <Atom instance> ligcovalent:A:CYS342:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS342:CX, <Atom instance> ligcovalent:A:CYS342:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 17
len( CX ).bonds= 2
skipping b= NX - CX
skipping b= CX - CX
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS342:CX, <Atom instance> ligcovalent:A:CYS342:OX)]
newQ= [(<Atom instance> ligcovalent:A:CYS342:CX, <Atom instance> ligcovalent:A:CYS342:OX)]
@@@@len(newq)= 1
queue= [(<Atom instance> ligcovalent:A:CYS342:CX, <Atom instance> ligcovalent:A:CYS342:OX)]


writing and calling wL with nA= OX - 17
wBF2: wrote  OX
!!!2:calling wL


in writeLevel with  OX  outatom_counter= 18
len( OX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []
 currently queue= CX - OX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS342:CX, <Atom instance> ligcovalent:A:CYS342:OX)]
 processing queue entry:  CX - OX
in wBF with fromAtom= CX + startAtom= OX startAtom.used= 0
wBF: wrote  OX
self.outatom_counter= 19


writing and calling wL with nA= CX - 19
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 20
len( CX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []
 currently queue=
CX : OX : queue= []
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 21


writing and calling wL with nA= CX - 21
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 22
len( CX ).bonds= 1
skipping b= CX - CX
returning queue= []
newQ= []
 currently queue=
CX : CX : queue= []
wrote flex file ligcovalent_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: ligcovalent_flex.pdbqt
wrote rigid file: ligcovalent_rigid.pdbqt
4---done
setting PYTHONHOME environment
setting PYTHONHOME environment
!unable to use ligand.TORSDOF! torsdof always set to ligand.ndihe= 7
5---done
 concat 10 log files... done.
Job finished, good luck!
rm: 无法删除'chimera.com': 没有那个文件或目录
rm: 无法删除'tmp.mol2': 没有那个文件或目录
Done
Processing residue A:CYS21
[start] output filename is: ligcovalent_single.pdb
CHAIN A
Writing output filename: ligcovalent_single.pdb
1---ligcovalent.pdb prepared...
1.5--done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= fixed  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  fixed
merged  0  nonpolar hydrogens
end of base class init
using std outputfilename  fixed.pdbqt
wrote  fixed  to  fixed.pdbqt
2---done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= ligcovalent  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  ligcovalent
merged  21  nonpolar hydrogens
end of base class init
using std outputfilename  ligcovalent.pdbqt
wrote  ligcovalent  to  ligcovalent.pdbqt
3---done
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> fixed:A:CYS21 with 6 MolKit.molecule.Atom]
calling setAutoFlexFields with  fixed:A:CYS21
in setAutoFlexFields with  fixed:A:CYS21
len(rotatables)= 1
returning res.torscount= 1
res.root= CA
ntors= 1
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= fixed_flex.pdbqt
res_total= 1
in writeResidue with  fixed:A:CYS21
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS21:N, <Atom instance> fixed:A:CYS21:CA)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS21:CA, <Atom instance> fixed:A:CYS21:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS21:CA, <Atom instance> fixed:A:CYS21:C)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3


writing and calling wL with nA= SG - 3
wBF2: wrote  SG
!!!2:calling wL


in writeLevel with  SG  outatom_counter= 4
len( SG ).bonds= 1
skipping b= CB - SG
returning queue= []
newQ= []
 currently queue=
CA : CB : queue= []
wrote flex file fixed_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: fixed_flex.pdbqt
wrote rigid file: fixed_rigid.pdbqt
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> ligcovalent:A:CYS21 with 28 MolKit.molecule.Atom]
calling setAutoFlexFields with  ligcovalent:A:CYS21
in setAutoFlexFields with  ligcovalent:A:CYS21
len(rotatables)= 8
returning res.torscount= 7
res.root= CA
ntors= 7
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= ligcovalent_flex.pdbqt
res_total= 7
in writeResidue with  ligcovalent:A:CYS21
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS21:N, <Atom instance> ligcovalent:A:CYS21:CA)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS21:CA, <Atom instance> ligcovalent:A:CYS21:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS21:CA, <Atom instance> ligcovalent:A:CYS21:CB)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3
 currently queue= CB - SG ,
CA : CB : queue= [(<Atom instance> ligcovalent:A:CYS21:CB, <Atom instance> ligcovalent:A:CYS21:SG)]
 processing queue entry:  CB - SG
in wBF with fromAtom= CB + startAtom= SG startAtom.used= 0
wBF: wrote  SG
self.outatom_counter= 4
 currently queue= SG - CX ,
CB : SG : queue= [(<Atom instance> ligcovalent:A:CYS21:SG, <Atom instance> ligcovalent:A:CYS21:CX)]
 processing queue entry:  SG - CX
in wBF with fromAtom= SG + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 5
 currently queue= CX - CX ,
SG : CX : queue= [(<Atom instance> ligcovalent:A:CYS21:CX, <Atom instance> ligcovalent:A:CYS21:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 6
 currently queue= CX - CX , CX - CX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS21:CX, <Atom instance> ligcovalent:A:CYS21:CX), (<Atom instance> ligcovalent:A:CYS21:CX, <Atom instance> ligcovalent:A:CYS21:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 7


writing and calling wL with nA= CX - 7
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 8
len( CX ).bonds= 1
skipping b= CX - CX
returning queue= []
newQ= []
 currently queue=
CX : CX : queue= []
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 9


writing and calling wL with nA= NX - 9
wBF2: wrote  NX
!!!2:calling wL


in writeLevel with  NX  outatom_counter= 10
len( NX ).bonds= 3
skipping b= NX - CX
processing b= NX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
processing b= CX - NX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 12
len( CX ).bonds= 2
skipping b= NX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 13
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 14
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 15
len( CX ).bonds= 3
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 16
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 17
len( CX ).bonds= 3
processing b= OX - CX  activeTors= 1
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
CX wL: queue= [(<Atom instance> ligcovalent:A:CYS21:CX, <Atom instance> ligcovalent:A:CYS21:OX)]
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 18
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 19
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS21:CX, <Atom instance> ligcovalent:A:CYS21:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS21:CX, <Atom instance> ligcovalent:A:CYS21:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS21:CX, <Atom instance> ligcovalent:A:CYS21:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS21:CX, <Atom instance> ligcovalent:A:CYS21:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS21:CX, <Atom instance> ligcovalent:A:CYS21:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS21:CX, <Atom instance> ligcovalent:A:CYS21:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS21:CX, <Atom instance> ligcovalent:A:CYS21:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS21:CX, <Atom instance> ligcovalent:A:CYS21:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS21:CX, <Atom instance> ligcovalent:A:CYS21:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS21:CX, <Atom instance> ligcovalent:A:CYS21:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS21:CX, <Atom instance> ligcovalent:A:CYS21:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS21:CX, <Atom instance> ligcovalent:A:CYS21:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 19
len( CX ).bonds= 3
skipping b= CX - CX
skipping b= CX - CX
skipping b= CX - NX
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS21:CX, <Atom instance> ligcovalent:A:CYS21:OX)]
newQ= [(<Atom instance> ligcovalent:A:CYS21:CX, <Atom instance> ligcovalent:A:CYS21:OX)]
@@@@len(newq)= 1
queue= [(<Atom instance> ligcovalent:A:CYS21:CX, <Atom instance> ligcovalent:A:CYS21:OX)]


writing and calling wL with nA= OX - 19
wBF2: wrote  OX
!!!2:calling wL


in writeLevel with  OX  outatom_counter= 20
len( OX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []
 currently queue= CX - OX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS21:CX, <Atom instance> ligcovalent:A:CYS21:OX)]
 processing queue entry:  CX - OX
in wBF with fromAtom= CX + startAtom= OX startAtom.used= 0
wBF: wrote  OX
self.outatom_counter= 21


writing and calling wL with nA= CX - 21
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 22
len( CX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []
 currently queue=
CX : OX : queue= []
wrote flex file ligcovalent_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: ligcovalent_flex.pdbqt
wrote rigid file: ligcovalent_rigid.pdbqt
4---done
setting PYTHONHOME environment
setting PYTHONHOME environment
!unable to use ligand.TORSDOF! torsdof always set to ligand.ndihe= 7
5---done
 concat 10 log files... done.
Job finished, good luck!
rm: 无法删除'chimera.com': 没有那个文件或目录
rm: 无法删除'tmp.mol2': 没有那个文件或目录
Done
Processing residue A:CYS15
[start] output filename is: ligcovalent_single.pdb
CHAIN A
Writing output filename: ligcovalent_single.pdb
1---ligcovalent.pdb prepared...
1.5--done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= fixed  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  fixed
merged  0  nonpolar hydrogens
end of base class init
using std outputfilename  fixed.pdbqt
wrote  fixed  to  fixed.pdbqt
2---done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= ligcovalent  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  ligcovalent
merged  21  nonpolar hydrogens
end of base class init
using std outputfilename  ligcovalent.pdbqt
wrote  ligcovalent  to  ligcovalent.pdbqt
3---done
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> fixed:A:CYS15 with 6 MolKit.molecule.Atom]
calling setAutoFlexFields with  fixed:A:CYS15
in setAutoFlexFields with  fixed:A:CYS15
len(rotatables)= 1
returning res.torscount= 1
res.root= CA
ntors= 1
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= fixed_flex.pdbqt
res_total= 1
in writeResidue with  fixed:A:CYS15
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS15:N, <Atom instance> fixed:A:CYS15:CA)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS15:CA, <Atom instance> fixed:A:CYS15:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS15:CA, <Atom instance> fixed:A:CYS15:CB)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3


writing and calling wL with nA= SG - 3
wBF2: wrote  SG
!!!2:calling wL


in writeLevel with  SG  outatom_counter= 4
len( SG ).bonds= 1
skipping b= CB - SG
returning queue= []
newQ= []
 currently queue=
CA : CB : queue= []
wrote flex file fixed_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: fixed_flex.pdbqt
wrote rigid file: fixed_rigid.pdbqt
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> ligcovalent:A:CYS15 with 28 MolKit.molecule.Atom]
calling setAutoFlexFields with  ligcovalent:A:CYS15
in setAutoFlexFields with  ligcovalent:A:CYS15
len(rotatables)= 8
returning res.torscount= 7
res.root= CA
ntors= 7
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= ligcovalent_flex.pdbqt
res_total= 7
in writeResidue with  ligcovalent:A:CYS15
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS15:CA, <Atom instance> ligcovalent:A:CYS15:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS15:CA, <Atom instance> ligcovalent:A:CYS15:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS15:N, <Atom instance> ligcovalent:A:CYS15:CA)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3
 currently queue= CB - SG ,
CA : CB : queue= [(<Atom instance> ligcovalent:A:CYS15:CB, <Atom instance> ligcovalent:A:CYS15:SG)]
 processing queue entry:  CB - SG
in wBF with fromAtom= CB + startAtom= SG startAtom.used= 0
wBF: wrote  SG
self.outatom_counter= 4
 currently queue= SG - CX ,
CB : SG : queue= [(<Atom instance> ligcovalent:A:CYS15:SG, <Atom instance> ligcovalent:A:CYS15:CX)]
 processing queue entry:  SG - CX
in wBF with fromAtom= SG + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 5
 currently queue= CX - CX ,
SG : CX : queue= [(<Atom instance> ligcovalent:A:CYS15:CX, <Atom instance> ligcovalent:A:CYS15:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 6
 currently queue= CX - CX , CX - CX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS15:CX, <Atom instance> ligcovalent:A:CYS15:CX), (<Atom instance> ligcovalent:A:CYS15:CX, <Atom instance> ligcovalent:A:CYS15:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 7


writing and calling wL with nA= OX - 7
wBF2: wrote  OX
!!!2:calling wL


in writeLevel with  OX  outatom_counter= 8
len( OX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []


writing and calling wL with nA= NX - 8
wBF2: wrote  NX
!!!2:calling wL


in writeLevel with  NX  outatom_counter= 9
len( NX ).bonds= 3
skipping b= NX - CX
processing b= NX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
processing b= CX - NX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 11
len( CX ).bonds= 2
skipping b= NX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 12
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 13
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 14
len( CX ).bonds= 3
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 15
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 16
len( CX ).bonds= 3
processing b= OX - CX  activeTors= 1
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
CX wL: queue= [(<Atom instance> ligcovalent:A:CYS15:CX, <Atom instance> ligcovalent:A:CYS15:OX)]
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 17
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 18
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS15:CX, <Atom instance> ligcovalent:A:CYS15:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS15:CX, <Atom instance> ligcovalent:A:CYS15:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS15:CX, <Atom instance> ligcovalent:A:CYS15:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS15:CX, <Atom instance> ligcovalent:A:CYS15:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS15:CX, <Atom instance> ligcovalent:A:CYS15:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS15:CX, <Atom instance> ligcovalent:A:CYS15:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS15:CX, <Atom instance> ligcovalent:A:CYS15:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS15:CX, <Atom instance> ligcovalent:A:CYS15:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS15:CX, <Atom instance> ligcovalent:A:CYS15:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS15:CX, <Atom instance> ligcovalent:A:CYS15:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS15:CX, <Atom instance> ligcovalent:A:CYS15:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS15:CX, <Atom instance> ligcovalent:A:CYS15:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 18
len( CX ).bonds= 3
skipping b= CX - CX
skipping b= CX - CX
skipping b= CX - NX
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS15:CX, <Atom instance> ligcovalent:A:CYS15:OX)]
newQ= [(<Atom instance> ligcovalent:A:CYS15:CX, <Atom instance> ligcovalent:A:CYS15:OX)]
@@@@len(newq)= 1
queue= [(<Atom instance> ligcovalent:A:CYS15:CX, <Atom instance> ligcovalent:A:CYS15:OX)]
 currently queue= CX - OX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS15:CX, <Atom instance> ligcovalent:A:CYS15:OX)]
 processing queue entry:  CX - OX
in wBF with fromAtom= CX + startAtom= OX startAtom.used= 0
wBF: wrote  OX
self.outatom_counter= 19


writing and calling wL with nA= CX - 19
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 20
len( CX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []
 currently queue=
CX : OX : queue= []
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 21


writing and calling wL with nA= CX - 21
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 22
len( CX ).bonds= 1
skipping b= CX - CX
returning queue= []
newQ= []
 currently queue=
CX : CX : queue= []
wrote flex file ligcovalent_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: ligcovalent_flex.pdbqt
wrote rigid file: ligcovalent_rigid.pdbqt
4---done
setting PYTHONHOME environment
setting PYTHONHOME environment
!unable to use ligand.TORSDOF! torsdof always set to ligand.ndihe= 7
5---done
 concat 10 log files... done.
Job finished, good luck!
rm: 无法删除'chimera.com': 没有那个文件或目录
rm: 无法删除'tmp.mol2': 没有那个文件或目录
Done
Processing residue A:CYS254
[start] output filename is: ligcovalent_single.pdb
CHAIN A
Writing output filename: ligcovalent_single.pdb
1---ligcovalent.pdb prepared...
1.5--done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= fixed  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  fixed
merged  0  nonpolar hydrogens
end of base class init
using std outputfilename  fixed.pdbqt
wrote  fixed  to  fixed.pdbqt
2---done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= ligcovalent  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  ligcovalent
merged  21  nonpolar hydrogens
end of base class init
using std outputfilename  ligcovalent.pdbqt
wrote  ligcovalent  to  ligcovalent.pdbqt
3---done
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> fixed:A:CYS254 with 6 MolKit.molecule.Atom]
calling setAutoFlexFields with  fixed:A:CYS254
in setAutoFlexFields with  fixed:A:CYS254
len(rotatables)= 1
returning res.torscount= 1
res.root= CA
ntors= 1
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= fixed_flex.pdbqt
res_total= 1
in writeResidue with  fixed:A:CYS254
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS254:N, <Atom instance> fixed:A:CYS254:CA)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS254:CA, <Atom instance> fixed:A:CYS254:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS254:CA, <Atom instance> fixed:A:CYS254:C)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3


writing and calling wL with nA= SG - 3
wBF2: wrote  SG
!!!2:calling wL


in writeLevel with  SG  outatom_counter= 4
len( SG ).bonds= 1
skipping b= CB - SG
returning queue= []
newQ= []
 currently queue=
CA : CB : queue= []
wrote flex file fixed_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: fixed_flex.pdbqt
wrote rigid file: fixed_rigid.pdbqt
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> ligcovalent:A:CYS254 with 28 MolKit.molecule.Atom]
calling setAutoFlexFields with  ligcovalent:A:CYS254
in setAutoFlexFields with  ligcovalent:A:CYS254
len(rotatables)= 8
returning res.torscount= 7
res.root= CA
ntors= 7
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= ligcovalent_flex.pdbqt
res_total= 7
in writeResidue with  ligcovalent:A:CYS254
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS254:CA, <Atom instance> ligcovalent:A:CYS254:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS254:CA, <Atom instance> ligcovalent:A:CYS254:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS254:N, <Atom instance> ligcovalent:A:CYS254:CA)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3
 currently queue= CB - SG ,
CA : CB : queue= [(<Atom instance> ligcovalent:A:CYS254:CB, <Atom instance> ligcovalent:A:CYS254:SG)]
 processing queue entry:  CB - SG
in wBF with fromAtom= CB + startAtom= SG startAtom.used= 0
wBF: wrote  SG
self.outatom_counter= 4
 currently queue= SG - CX ,
CB : SG : queue= [(<Atom instance> ligcovalent:A:CYS254:SG, <Atom instance> ligcovalent:A:CYS254:CX)]
 processing queue entry:  SG - CX
in wBF with fromAtom= SG + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 5
 currently queue= CX - CX ,
SG : CX : queue= [(<Atom instance> ligcovalent:A:CYS254:CX, <Atom instance> ligcovalent:A:CYS254:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 6
 currently queue= CX - CX , CX - CX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS254:CX, <Atom instance> ligcovalent:A:CYS254:CX), (<Atom instance> ligcovalent:A:CYS254:CX, <Atom instance> ligcovalent:A:CYS254:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 7


writing and calling wL with nA= NX - 7
wBF2: wrote  NX
!!!2:calling wL


in writeLevel with  NX  outatom_counter= 8
len( NX ).bonds= 3
processing b= CX - NX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
processing b= NX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= NX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 10
len( CX ).bonds= 3
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - NX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 12
len( CX ).bonds= 3
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 14
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 15
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= []
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 15
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 16
len( CX ).bonds= 3
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
processing b= OX - CX  activeTors= 1
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
CX wL: queue= [(<Atom instance> ligcovalent:A:CYS254:CX, <Atom instance> ligcovalent:A:CYS254:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 17
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS254:CX, <Atom instance> ligcovalent:A:CYS254:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS254:CX, <Atom instance> ligcovalent:A:CYS254:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS254:CX, <Atom instance> ligcovalent:A:CYS254:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS254:CX, <Atom instance> ligcovalent:A:CYS254:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS254:CX, <Atom instance> ligcovalent:A:CYS254:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS254:CX, <Atom instance> ligcovalent:A:CYS254:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 17
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS254:CX, <Atom instance> ligcovalent:A:CYS254:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS254:CX, <Atom instance> ligcovalent:A:CYS254:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 17
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= NX - CX
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS254:CX, <Atom instance> ligcovalent:A:CYS254:OX)]
newQ= [(<Atom instance> ligcovalent:A:CYS254:CX, <Atom instance> ligcovalent:A:CYS254:OX)]
@@@@len(newq)= 1
queue= [(<Atom instance> ligcovalent:A:CYS254:CX, <Atom instance> ligcovalent:A:CYS254:OX)]


writing and calling wL with nA= OX - 17
wBF2: wrote  OX
!!!2:calling wL


in writeLevel with  OX  outatom_counter= 18
len( OX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []
 currently queue= CX - OX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS254:CX, <Atom instance> ligcovalent:A:CYS254:OX)]
 processing queue entry:  CX - OX
in wBF with fromAtom= CX + startAtom= OX startAtom.used= 0
wBF: wrote  OX
self.outatom_counter= 19


writing and calling wL with nA= CX - 19
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 20
len( CX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []
 currently queue=
CX : OX : queue= []
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 21


writing and calling wL with nA= CX - 21
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 22
len( CX ).bonds= 1
skipping b= CX - CX
returning queue= []
newQ= []
 currently queue=
CX : CX : queue= []
wrote flex file ligcovalent_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: ligcovalent_flex.pdbqt
wrote rigid file: ligcovalent_rigid.pdbqt
4---done
setting PYTHONHOME environment
setting PYTHONHOME environment
!unable to use ligand.TORSDOF! torsdof always set to ligand.ndihe= 7
5---done
 concat 10 log files... done.
Job finished, good luck!
rm: 无法删除'chimera.com': 没有那个文件或目录
rm: 无法删除'tmp.mol2': 没有那个文件或目录
Done
Processing residue A:CYS281
[start] output filename is: ligcovalent_single.pdb
CHAIN A
Writing output filename: ligcovalent_single.pdb
1---ligcovalent.pdb prepared...
1.5--done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= fixed  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  fixed
merged  0  nonpolar hydrogens
end of base class init
using std outputfilename  fixed.pdbqt
wrote  fixed  to  fixed.pdbqt
2---done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= ligcovalent  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  ligcovalent
merged  21  nonpolar hydrogens
end of base class init
using std outputfilename  ligcovalent.pdbqt
wrote  ligcovalent  to  ligcovalent.pdbqt
3---done
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> fixed:A:CYS281 with 6 MolKit.molecule.Atom]
calling setAutoFlexFields with  fixed:A:CYS281
in setAutoFlexFields with  fixed:A:CYS281
len(rotatables)= 1
returning res.torscount= 1
res.root= CA
ntors= 1
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= fixed_flex.pdbqt
res_total= 1
in writeResidue with  fixed:A:CYS281
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS281:CA, <Atom instance> fixed:A:CYS281:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS281:CA, <Atom instance> fixed:A:CYS281:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS281:N, <Atom instance> fixed:A:CYS281:CA)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3


writing and calling wL with nA= SG - 3
wBF2: wrote  SG
!!!2:calling wL


in writeLevel with  SG  outatom_counter= 4
len( SG ).bonds= 1
skipping b= CB - SG
returning queue= []
newQ= []
 currently queue=
CA : CB : queue= []
wrote flex file fixed_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: fixed_flex.pdbqt
wrote rigid file: fixed_rigid.pdbqt
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> ligcovalent:A:CYS281 with 28 MolKit.molecule.Atom]
calling setAutoFlexFields with  ligcovalent:A:CYS281
in setAutoFlexFields with  ligcovalent:A:CYS281
len(rotatables)= 8
returning res.torscount= 7
res.root= CA
ntors= 7
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= ligcovalent_flex.pdbqt
res_total= 7
in writeResidue with  ligcovalent:A:CYS281
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS281:CA, <Atom instance> ligcovalent:A:CYS281:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS281:CA, <Atom instance> ligcovalent:A:CYS281:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS281:N, <Atom instance> ligcovalent:A:CYS281:CA)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3
 currently queue= CB - SG ,
CA : CB : queue= [(<Atom instance> ligcovalent:A:CYS281:CB, <Atom instance> ligcovalent:A:CYS281:SG)]
 processing queue entry:  CB - SG
in wBF with fromAtom= CB + startAtom= SG startAtom.used= 0
wBF: wrote  SG
self.outatom_counter= 4
 currently queue= SG - CX ,
CB : SG : queue= [(<Atom instance> ligcovalent:A:CYS281:SG, <Atom instance> ligcovalent:A:CYS281:CX)]
 processing queue entry:  SG - CX
in wBF with fromAtom= SG + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 5
 currently queue= CX - CX ,
SG : CX : queue= [(<Atom instance> ligcovalent:A:CYS281:CX, <Atom instance> ligcovalent:A:CYS281:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 6
 currently queue= CX - CX , CX - CX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS281:CX, <Atom instance> ligcovalent:A:CYS281:CX), (<Atom instance> ligcovalent:A:CYS281:CX, <Atom instance> ligcovalent:A:CYS281:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 7


writing and calling wL with nA= OX - 7
wBF2: wrote  OX
!!!2:calling wL


in writeLevel with  OX  outatom_counter= 8
len( OX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []


writing and calling wL with nA= NX - 8
wBF2: wrote  NX
!!!2:calling wL


in writeLevel with  NX  outatom_counter= 9
len( NX ).bonds= 3
skipping b= NX - CX
processing b= NX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
processing b= CX - NX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 11
len( CX ).bonds= 2
skipping b= NX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 12
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 13
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 14
len( CX ).bonds= 3
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 15
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 16
len( CX ).bonds= 3
processing b= OX - CX  activeTors= 1
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
CX wL: queue= [(<Atom instance> ligcovalent:A:CYS281:CX, <Atom instance> ligcovalent:A:CYS281:OX)]
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 17
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 18
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS281:CX, <Atom instance> ligcovalent:A:CYS281:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS281:CX, <Atom instance> ligcovalent:A:CYS281:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS281:CX, <Atom instance> ligcovalent:A:CYS281:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS281:CX, <Atom instance> ligcovalent:A:CYS281:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS281:CX, <Atom instance> ligcovalent:A:CYS281:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS281:CX, <Atom instance> ligcovalent:A:CYS281:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS281:CX, <Atom instance> ligcovalent:A:CYS281:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS281:CX, <Atom instance> ligcovalent:A:CYS281:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS281:CX, <Atom instance> ligcovalent:A:CYS281:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS281:CX, <Atom instance> ligcovalent:A:CYS281:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS281:CX, <Atom instance> ligcovalent:A:CYS281:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS281:CX, <Atom instance> ligcovalent:A:CYS281:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 18
len( CX ).bonds= 3
skipping b= CX - CX
skipping b= CX - CX
skipping b= CX - NX
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS281:CX, <Atom instance> ligcovalent:A:CYS281:OX)]
newQ= [(<Atom instance> ligcovalent:A:CYS281:CX, <Atom instance> ligcovalent:A:CYS281:OX)]
@@@@len(newq)= 1
queue= [(<Atom instance> ligcovalent:A:CYS281:CX, <Atom instance> ligcovalent:A:CYS281:OX)]
 currently queue= CX - OX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS281:CX, <Atom instance> ligcovalent:A:CYS281:OX)]
 processing queue entry:  CX - OX
in wBF with fromAtom= CX + startAtom= OX startAtom.used= 0
wBF: wrote  OX
self.outatom_counter= 19


writing and calling wL with nA= CX - 19
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 20
len( CX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []
 currently queue=
CX : OX : queue= []
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 21


writing and calling wL with nA= CX - 21
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 22
len( CX ).bonds= 1
skipping b= CX - CX
returning queue= []
newQ= []
 currently queue=
CX : CX : queue= []
wrote flex file ligcovalent_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: ligcovalent_flex.pdbqt
wrote rigid file: ligcovalent_rigid.pdbqt
4---done
setting PYTHONHOME environment
setting PYTHONHOME environment
!unable to use ligand.TORSDOF! torsdof always set to ligand.ndihe= 7
5---done
 concat 10 log files... done.
Job finished, good luck!
rm: 无法删除'chimera.com': 没有那个文件或目录
rm: 无法删除'tmp.mol2': 没有那个文件或目录
Done
Processing residue A:CYS295
[start] output filename is: ligcovalent_single.pdb
CHAIN A
Writing output filename: ligcovalent_single.pdb
1---ligcovalent.pdb prepared...
1.5--done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= fixed  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  fixed
merged  0  nonpolar hydrogens
end of base class init
using std outputfilename  fixed.pdbqt
wrote  fixed  to  fixed.pdbqt
2---done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= ligcovalent  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  ligcovalent
merged  21  nonpolar hydrogens
end of base class init
using std outputfilename  ligcovalent.pdbqt
wrote  ligcovalent  to  ligcovalent.pdbqt
3---done
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> fixed:A:CYS295 with 6 MolKit.molecule.Atom]
calling setAutoFlexFields with  fixed:A:CYS295
in setAutoFlexFields with  fixed:A:CYS295
len(rotatables)= 1
returning res.torscount= 1
res.root= CA
ntors= 1
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= fixed_flex.pdbqt
res_total= 1
in writeResidue with  fixed:A:CYS295
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS295:N, <Atom instance> fixed:A:CYS295:CA)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS295:CA, <Atom instance> fixed:A:CYS295:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS295:CA, <Atom instance> fixed:A:CYS295:CB)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3


writing and calling wL with nA= SG - 3
wBF2: wrote  SG
!!!2:calling wL


in writeLevel with  SG  outatom_counter= 4
len( SG ).bonds= 1
skipping b= CB - SG
returning queue= []
newQ= []
 currently queue=
CA : CB : queue= []
wrote flex file fixed_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: fixed_flex.pdbqt
wrote rigid file: fixed_rigid.pdbqt
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> ligcovalent:A:CYS295 with 28 MolKit.molecule.Atom]
calling setAutoFlexFields with  ligcovalent:A:CYS295
in setAutoFlexFields with  ligcovalent:A:CYS295
len(rotatables)= 8
returning res.torscount= 7
res.root= CA
ntors= 7
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= ligcovalent_flex.pdbqt
res_total= 7
in writeResidue with  ligcovalent:A:CYS295
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS295:CA, <Atom instance> ligcovalent:A:CYS295:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS295:CA, <Atom instance> ligcovalent:A:CYS295:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS295:N, <Atom instance> ligcovalent:A:CYS295:CA)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3
 currently queue= CB - SG ,
CA : CB : queue= [(<Atom instance> ligcovalent:A:CYS295:CB, <Atom instance> ligcovalent:A:CYS295:SG)]
 processing queue entry:  CB - SG
in wBF with fromAtom= CB + startAtom= SG startAtom.used= 0
wBF: wrote  SG
self.outatom_counter= 4
 currently queue= SG - CX ,
CB : SG : queue= [(<Atom instance> ligcovalent:A:CYS295:SG, <Atom instance> ligcovalent:A:CYS295:CX)]
 processing queue entry:  SG - CX
in wBF with fromAtom= SG + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 5
 currently queue= CX - CX ,
SG : CX : queue= [(<Atom instance> ligcovalent:A:CYS295:CX, <Atom instance> ligcovalent:A:CYS295:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 6
 currently queue= CX - CX , CX - CX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS295:CX, <Atom instance> ligcovalent:A:CYS295:CX), (<Atom instance> ligcovalent:A:CYS295:CX, <Atom instance> ligcovalent:A:CYS295:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 7


writing and calling wL with nA= CX - 7
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 8
len( CX ).bonds= 1
skipping b= CX - CX
returning queue= []
newQ= []
 currently queue=
CX : CX : queue= []
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 9


writing and calling wL with nA= NX - 9
wBF2: wrote  NX
!!!2:calling wL


in writeLevel with  NX  outatom_counter= 10
len( NX ).bonds= 3
processing b= CX - NX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
processing b= NX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= NX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 12
len( CX ).bonds= 3
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - NX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 14
len( CX ).bonds= 3
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 16
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 17
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= []
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 17
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 18
len( CX ).bonds= 3
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
processing b= OX - CX  activeTors= 1
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
CX wL: queue= [(<Atom instance> ligcovalent:A:CYS295:CX, <Atom instance> ligcovalent:A:CYS295:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 19
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS295:CX, <Atom instance> ligcovalent:A:CYS295:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS295:CX, <Atom instance> ligcovalent:A:CYS295:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS295:CX, <Atom instance> ligcovalent:A:CYS295:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS295:CX, <Atom instance> ligcovalent:A:CYS295:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS295:CX, <Atom instance> ligcovalent:A:CYS295:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS295:CX, <Atom instance> ligcovalent:A:CYS295:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 19
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS295:CX, <Atom instance> ligcovalent:A:CYS295:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS295:CX, <Atom instance> ligcovalent:A:CYS295:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 19
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= NX - CX
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS295:CX, <Atom instance> ligcovalent:A:CYS295:OX)]
newQ= [(<Atom instance> ligcovalent:A:CYS295:CX, <Atom instance> ligcovalent:A:CYS295:OX)]
@@@@len(newq)= 1
queue= [(<Atom instance> ligcovalent:A:CYS295:CX, <Atom instance> ligcovalent:A:CYS295:OX)]


writing and calling wL with nA= OX - 19
wBF2: wrote  OX
!!!2:calling wL


in writeLevel with  OX  outatom_counter= 20
len( OX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []
 currently queue= CX - OX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS295:CX, <Atom instance> ligcovalent:A:CYS295:OX)]
 processing queue entry:  CX - OX
in wBF with fromAtom= CX + startAtom= OX startAtom.used= 0
wBF: wrote  OX
self.outatom_counter= 21


writing and calling wL with nA= CX - 21
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 22
len( CX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []
 currently queue=
CX : OX : queue= []
wrote flex file ligcovalent_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: ligcovalent_flex.pdbqt
wrote rigid file: ligcovalent_rigid.pdbqt
4---done
setting PYTHONHOME environment
setting PYTHONHOME environment
!unable to use ligand.TORSDOF! torsdof always set to ligand.ndihe= 7
5---done
 concat 10 log files... done.
Job finished, good luck!
rm: 无法删除'chimera.com': 没有那个文件或目录
rm: 无法删除'tmp.mol2': 没有那个文件或目录
Done
Processing residue A:CYS48
[start] output filename is: ligcovalent_single.pdb
CHAIN A
Writing output filename: ligcovalent_single.pdb
1---ligcovalent.pdb prepared...
1.5--done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= fixed  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  fixed
merged  0  nonpolar hydrogens
end of base class init
using std outputfilename  fixed.pdbqt
wrote  fixed  to  fixed.pdbqt
2---done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= ligcovalent  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  ligcovalent
merged  21  nonpolar hydrogens
end of base class init
using std outputfilename  ligcovalent.pdbqt
wrote  ligcovalent  to  ligcovalent.pdbqt
3---done
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> fixed:A:CYS48 with 6 MolKit.molecule.Atom]
calling setAutoFlexFields with  fixed:A:CYS48
in setAutoFlexFields with  fixed:A:CYS48
len(rotatables)= 1
returning res.torscount= 1
res.root= CA
ntors= 1
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= fixed_flex.pdbqt
res_total= 1
in writeResidue with  fixed:A:CYS48
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS48:N, <Atom instance> fixed:A:CYS48:CA)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS48:CA, <Atom instance> fixed:A:CYS48:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS48:CA, <Atom instance> fixed:A:CYS48:C)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3


writing and calling wL with nA= SG - 3
wBF2: wrote  SG
!!!2:calling wL


in writeLevel with  SG  outatom_counter= 4
len( SG ).bonds= 1
skipping b= CB - SG
returning queue= []
newQ= []
 currently queue=
CA : CB : queue= []
wrote flex file fixed_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: fixed_flex.pdbqt
wrote rigid file: fixed_rigid.pdbqt
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> ligcovalent:A:CYS48 with 28 MolKit.molecule.Atom]
calling setAutoFlexFields with  ligcovalent:A:CYS48
in setAutoFlexFields with  ligcovalent:A:CYS48
len(rotatables)= 8
returning res.torscount= 7
res.root= CA
ntors= 7
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= ligcovalent_flex.pdbqt
res_total= 7
in writeResidue with  ligcovalent:A:CYS48
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS48:CA, <Atom instance> ligcovalent:A:CYS48:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS48:CA, <Atom instance> ligcovalent:A:CYS48:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS48:N, <Atom instance> ligcovalent:A:CYS48:CA)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3
 currently queue= CB - SG ,
CA : CB : queue= [(<Atom instance> ligcovalent:A:CYS48:CB, <Atom instance> ligcovalent:A:CYS48:SG)]
 processing queue entry:  CB - SG
in wBF with fromAtom= CB + startAtom= SG startAtom.used= 0
wBF: wrote  SG
self.outatom_counter= 4
 currently queue= SG - CX ,
CB : SG : queue= [(<Atom instance> ligcovalent:A:CYS48:SG, <Atom instance> ligcovalent:A:CYS48:CX)]
 processing queue entry:  SG - CX
in wBF with fromAtom= SG + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 5
 currently queue= CX - CX ,
SG : CX : queue= [(<Atom instance> ligcovalent:A:CYS48:CX, <Atom instance> ligcovalent:A:CYS48:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 6
 currently queue= CX - CX , CX - CX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS48:CX, <Atom instance> ligcovalent:A:CYS48:CX), (<Atom instance> ligcovalent:A:CYS48:CX, <Atom instance> ligcovalent:A:CYS48:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 7


writing and calling wL with nA= OX - 7
wBF2: wrote  OX
!!!2:calling wL


in writeLevel with  OX  outatom_counter= 8
len( OX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []


writing and calling wL with nA= NX - 8
wBF2: wrote  NX
!!!2:calling wL


in writeLevel with  NX  outatom_counter= 9
len( NX ).bonds= 3
skipping b= NX - CX
processing b= NX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
processing b= CX - NX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 11
len( CX ).bonds= 2
skipping b= NX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 12
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 13
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 14
len( CX ).bonds= 3
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 15
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 16
len( CX ).bonds= 3
processing b= OX - CX  activeTors= 1
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
CX wL: queue= [(<Atom instance> ligcovalent:A:CYS48:CX, <Atom instance> ligcovalent:A:CYS48:OX)]
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 17
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 18
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS48:CX, <Atom instance> ligcovalent:A:CYS48:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS48:CX, <Atom instance> ligcovalent:A:CYS48:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS48:CX, <Atom instance> ligcovalent:A:CYS48:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS48:CX, <Atom instance> ligcovalent:A:CYS48:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS48:CX, <Atom instance> ligcovalent:A:CYS48:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS48:CX, <Atom instance> ligcovalent:A:CYS48:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS48:CX, <Atom instance> ligcovalent:A:CYS48:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS48:CX, <Atom instance> ligcovalent:A:CYS48:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS48:CX, <Atom instance> ligcovalent:A:CYS48:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS48:CX, <Atom instance> ligcovalent:A:CYS48:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS48:CX, <Atom instance> ligcovalent:A:CYS48:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS48:CX, <Atom instance> ligcovalent:A:CYS48:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 18
len( CX ).bonds= 3
skipping b= CX - CX
skipping b= CX - CX
skipping b= CX - NX
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS48:CX, <Atom instance> ligcovalent:A:CYS48:OX)]
newQ= [(<Atom instance> ligcovalent:A:CYS48:CX, <Atom instance> ligcovalent:A:CYS48:OX)]
@@@@len(newq)= 1
queue= [(<Atom instance> ligcovalent:A:CYS48:CX, <Atom instance> ligcovalent:A:CYS48:OX)]
 currently queue= CX - OX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS48:CX, <Atom instance> ligcovalent:A:CYS48:OX)]
 processing queue entry:  CX - OX
in wBF with fromAtom= CX + startAtom= OX startAtom.used= 0
wBF: wrote  OX
self.outatom_counter= 19


writing and calling wL with nA= CX - 19
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 20
len( CX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []
 currently queue=
CX : OX : queue= []
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 21


writing and calling wL with nA= CX - 21
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 22
len( CX ).bonds= 1
skipping b= CX - CX
returning queue= []
newQ= []
 currently queue=
CX : CX : queue= []
wrote flex file ligcovalent_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: ligcovalent_flex.pdbqt
wrote rigid file: ligcovalent_rigid.pdbqt
4---done
setting PYTHONHOME environment
setting PYTHONHOME environment
!unable to use ligand.TORSDOF! torsdof always set to ligand.ndihe= 7
5---done
 concat 10 log files... done.
Job finished, good luck!
rm: 无法删除'chimera.com': 没有那个文件或目录
rm: 无法删除'tmp.mol2': 没有那个文件或目录
Done
Processing residue A:CYS111
[start] output filename is: ligcovalent_single.pdb
CHAIN A
Writing output filename: ligcovalent_single.pdb
1---ligcovalent.pdb prepared...
1.5--done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= fixed  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  fixed
merged  0  nonpolar hydrogens
end of base class init
using std outputfilename  fixed.pdbqt
wrote  fixed  to  fixed.pdbqt
2---done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= ligcovalent  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  ligcovalent
merged  21  nonpolar hydrogens
end of base class init
using std outputfilename  ligcovalent.pdbqt
wrote  ligcovalent  to  ligcovalent.pdbqt
3---done
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> fixed:A:CYS111 with 6 MolKit.molecule.Atom]
calling setAutoFlexFields with  fixed:A:CYS111
in setAutoFlexFields with  fixed:A:CYS111
len(rotatables)= 1
returning res.torscount= 1
res.root= CA
ntors= 1
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= fixed_flex.pdbqt
res_total= 1
in writeResidue with  fixed:A:CYS111
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS111:N, <Atom instance> fixed:A:CYS111:CA)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS111:CA, <Atom instance> fixed:A:CYS111:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS111:CA, <Atom instance> fixed:A:CYS111:C)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3


writing and calling wL with nA= SG - 3
wBF2: wrote  SG
!!!2:calling wL


in writeLevel with  SG  outatom_counter= 4
len( SG ).bonds= 1
skipping b= CB - SG
returning queue= []
newQ= []
 currently queue=
CA : CB : queue= []
wrote flex file fixed_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: fixed_flex.pdbqt
wrote rigid file: fixed_rigid.pdbqt
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> ligcovalent:A:CYS111 with 28 MolKit.molecule.Atom]
calling setAutoFlexFields with  ligcovalent:A:CYS111
in setAutoFlexFields with  ligcovalent:A:CYS111
len(rotatables)= 8
returning res.torscount= 7
res.root= CA
ntors= 7
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= ligcovalent_flex.pdbqt
res_total= 7
in writeResidue with  ligcovalent:A:CYS111
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS111:CA, <Atom instance> ligcovalent:A:CYS111:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS111:CA, <Atom instance> ligcovalent:A:CYS111:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS111:N, <Atom instance> ligcovalent:A:CYS111:CA)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3
 currently queue= CB - SG ,
CA : CB : queue= [(<Atom instance> ligcovalent:A:CYS111:CB, <Atom instance> ligcovalent:A:CYS111:SG)]
 processing queue entry:  CB - SG
in wBF with fromAtom= CB + startAtom= SG startAtom.used= 0
wBF: wrote  SG
self.outatom_counter= 4
 currently queue= SG - CX ,
CB : SG : queue= [(<Atom instance> ligcovalent:A:CYS111:SG, <Atom instance> ligcovalent:A:CYS111:CX)]
 processing queue entry:  SG - CX
in wBF with fromAtom= SG + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 5
 currently queue= CX - CX ,
SG : CX : queue= [(<Atom instance> ligcovalent:A:CYS111:CX, <Atom instance> ligcovalent:A:CYS111:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 6
 currently queue= CX - CX , CX - CX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS111:CX, <Atom instance> ligcovalent:A:CYS111:CX), (<Atom instance> ligcovalent:A:CYS111:CX, <Atom instance> ligcovalent:A:CYS111:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 7


writing and calling wL with nA= OX - 7
wBF2: wrote  OX
!!!2:calling wL


in writeLevel with  OX  outatom_counter= 8
len( OX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []


writing and calling wL with nA= NX - 8
wBF2: wrote  NX
!!!2:calling wL


in writeLevel with  NX  outatom_counter= 9
len( NX ).bonds= 3
processing b= NX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= NX - CX
processing b= CX - NX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 11
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= NX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 12
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 13
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 14
len( CX ).bonds= 3
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 15
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 16
len( CX ).bonds= 3
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
processing b= OX - CX  activeTors= 1
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
CX wL: queue= [(<Atom instance> ligcovalent:A:CYS111:CX, <Atom instance> ligcovalent:A:CYS111:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 17
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 18
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS111:CX, <Atom instance> ligcovalent:A:CYS111:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS111:CX, <Atom instance> ligcovalent:A:CYS111:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS111:CX, <Atom instance> ligcovalent:A:CYS111:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS111:CX, <Atom instance> ligcovalent:A:CYS111:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS111:CX, <Atom instance> ligcovalent:A:CYS111:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS111:CX, <Atom instance> ligcovalent:A:CYS111:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS111:CX, <Atom instance> ligcovalent:A:CYS111:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS111:CX, <Atom instance> ligcovalent:A:CYS111:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS111:CX, <Atom instance> ligcovalent:A:CYS111:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS111:CX, <Atom instance> ligcovalent:A:CYS111:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS111:CX, <Atom instance> ligcovalent:A:CYS111:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS111:CX, <Atom instance> ligcovalent:A:CYS111:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 18
len( CX ).bonds= 3
skipping b= CX - CX
skipping b= CX - NX
skipping b= CX - CX
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS111:CX, <Atom instance> ligcovalent:A:CYS111:OX)]
newQ= [(<Atom instance> ligcovalent:A:CYS111:CX, <Atom instance> ligcovalent:A:CYS111:OX)]
@@@@len(newq)= 1
queue= [(<Atom instance> ligcovalent:A:CYS111:CX, <Atom instance> ligcovalent:A:CYS111:OX)]
 currently queue= CX - OX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS111:CX, <Atom instance> ligcovalent:A:CYS111:OX)]
 processing queue entry:  CX - OX
in wBF with fromAtom= CX + startAtom= OX startAtom.used= 0
wBF: wrote  OX
self.outatom_counter= 19


writing and calling wL with nA= CX - 19
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 20
len( CX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []
 currently queue=
CX : OX : queue= []
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 21


writing and calling wL with nA= CX - 21
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 22
len( CX ).bonds= 1
skipping b= CX - CX
returning queue= []
newQ= []
 currently queue=
CX : CX : queue= []
wrote flex file ligcovalent_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: ligcovalent_flex.pdbqt
wrote rigid file: ligcovalent_rigid.pdbqt
4---done
setting PYTHONHOME environment
setting PYTHONHOME environment
!unable to use ligand.TORSDOF! torsdof always set to ligand.ndihe= 7
5---done
 concat 10 log files... done.
Job finished, good luck!
rm: 无法删除'chimera.com': 没有那个文件或目录
rm: 无法删除'tmp.mol2': 没有那个文件或目录
Done
Processing residue A:CYS369
[start] output filename is: ligcovalent_single.pdb
CHAIN A
Writing output filename: ligcovalent_single.pdb
1---ligcovalent.pdb prepared...
1.5--done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= fixed  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  fixed
merged  0  nonpolar hydrogens
end of base class init
using std outputfilename  fixed.pdbqt
wrote  fixed  to  fixed.pdbqt
2---done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= ligcovalent  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  ligcovalent
merged  21  nonpolar hydrogens
end of base class init
using std outputfilename  ligcovalent.pdbqt
wrote  ligcovalent  to  ligcovalent.pdbqt
3---done
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> fixed:A:CYS369 with 6 MolKit.molecule.Atom]
calling setAutoFlexFields with  fixed:A:CYS369
in setAutoFlexFields with  fixed:A:CYS369
len(rotatables)= 1
returning res.torscount= 1
res.root= CA
ntors= 1
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= fixed_flex.pdbqt
res_total= 1
in writeResidue with  fixed:A:CYS369
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS369:N, <Atom instance> fixed:A:CYS369:CA)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS369:CA, <Atom instance> fixed:A:CYS369:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS369:CA, <Atom instance> fixed:A:CYS369:CB)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3


writing and calling wL with nA= SG - 3
wBF2: wrote  SG
!!!2:calling wL


in writeLevel with  SG  outatom_counter= 4
len( SG ).bonds= 1
skipping b= CB - SG
returning queue= []
newQ= []
 currently queue=
CA : CB : queue= []
wrote flex file fixed_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: fixed_flex.pdbqt
wrote rigid file: fixed_rigid.pdbqt
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> ligcovalent:A:CYS369 with 28 MolKit.molecule.Atom]
calling setAutoFlexFields with  ligcovalent:A:CYS369
in setAutoFlexFields with  ligcovalent:A:CYS369
len(rotatables)= 8
returning res.torscount= 7
res.root= CA
ntors= 7
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= ligcovalent_flex.pdbqt
res_total= 7
in writeResidue with  ligcovalent:A:CYS369
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS369:CA, <Atom instance> ligcovalent:A:CYS369:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS369:CA, <Atom instance> ligcovalent:A:CYS369:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS369:N, <Atom instance> ligcovalent:A:CYS369:CA)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3
 currently queue= CB - SG ,
CA : CB : queue= [(<Atom instance> ligcovalent:A:CYS369:CB, <Atom instance> ligcovalent:A:CYS369:SG)]
 processing queue entry:  CB - SG
in wBF with fromAtom= CB + startAtom= SG startAtom.used= 0
wBF: wrote  SG
self.outatom_counter= 4
 currently queue= SG - CX ,
CB : SG : queue= [(<Atom instance> ligcovalent:A:CYS369:SG, <Atom instance> ligcovalent:A:CYS369:CX)]
 processing queue entry:  SG - CX
in wBF with fromAtom= SG + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 5
 currently queue= CX - CX ,
SG : CX : queue= [(<Atom instance> ligcovalent:A:CYS369:CX, <Atom instance> ligcovalent:A:CYS369:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 6
 currently queue= CX - CX , CX - CX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS369:CX, <Atom instance> ligcovalent:A:CYS369:CX), (<Atom instance> ligcovalent:A:CYS369:CX, <Atom instance> ligcovalent:A:CYS369:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 7


writing and calling wL with nA= OX - 7
wBF2: wrote  OX
!!!2:calling wL


in writeLevel with  OX  outatom_counter= 8
len( OX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []


writing and calling wL with nA= NX - 8
wBF2: wrote  NX
!!!2:calling wL


in writeLevel with  NX  outatom_counter= 9
len( NX ).bonds= 3
skipping b= NX - CX
processing b= NX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
processing b= CX - NX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 11
len( CX ).bonds= 2
skipping b= NX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 12
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 13
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 14
len( CX ).bonds= 3
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 15
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 16
len( CX ).bonds= 3
processing b= OX - CX  activeTors= 1
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
CX wL: queue= [(<Atom instance> ligcovalent:A:CYS369:CX, <Atom instance> ligcovalent:A:CYS369:OX)]
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 17
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 18
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS369:CX, <Atom instance> ligcovalent:A:CYS369:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS369:CX, <Atom instance> ligcovalent:A:CYS369:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS369:CX, <Atom instance> ligcovalent:A:CYS369:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS369:CX, <Atom instance> ligcovalent:A:CYS369:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS369:CX, <Atom instance> ligcovalent:A:CYS369:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS369:CX, <Atom instance> ligcovalent:A:CYS369:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS369:CX, <Atom instance> ligcovalent:A:CYS369:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS369:CX, <Atom instance> ligcovalent:A:CYS369:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS369:CX, <Atom instance> ligcovalent:A:CYS369:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS369:CX, <Atom instance> ligcovalent:A:CYS369:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS369:CX, <Atom instance> ligcovalent:A:CYS369:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS369:CX, <Atom instance> ligcovalent:A:CYS369:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 18
len( CX ).bonds= 3
skipping b= CX - CX
skipping b= CX - NX
skipping b= CX - CX
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS369:CX, <Atom instance> ligcovalent:A:CYS369:OX)]
newQ= [(<Atom instance> ligcovalent:A:CYS369:CX, <Atom instance> ligcovalent:A:CYS369:OX)]
@@@@len(newq)= 1
queue= [(<Atom instance> ligcovalent:A:CYS369:CX, <Atom instance> ligcovalent:A:CYS369:OX)]
 currently queue= CX - OX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS369:CX, <Atom instance> ligcovalent:A:CYS369:OX)]
 processing queue entry:  CX - OX
in wBF with fromAtom= CX + startAtom= OX startAtom.used= 0
wBF: wrote  OX
self.outatom_counter= 19


writing and calling wL with nA= CX - 19
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 20
len( CX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []
 currently queue=
CX : OX : queue= []
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 21


writing and calling wL with nA= CX - 21
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 22
len( CX ).bonds= 1
skipping b= CX - CX
returning queue= []
newQ= []
 currently queue=
CX : CX : queue= []
wrote flex file ligcovalent_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: ligcovalent_flex.pdbqt
wrote rigid file: ligcovalent_rigid.pdbqt
4---done
setting PYTHONHOME environment
setting PYTHONHOME environment
!unable to use ligand.TORSDOF! torsdof always set to ligand.ndihe= 7
5---done
 concat 10 log files... done.
Job finished, good luck!
rm: 无法删除'chimera.com': 没有那个文件或目录
rm: 无法删除'tmp.mol2': 没有那个文件或目录
Done
Processing residue A:CYS18
[start] output filename is: ligcovalent_single.pdb
CHAIN A
Writing output filename: ligcovalent_single.pdb
1---ligcovalent.pdb prepared...
1.5--done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= fixed  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  fixed
merged  0  nonpolar hydrogens
end of base class init
using std outputfilename  fixed.pdbqt
wrote  fixed  to  fixed.pdbqt
2---done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= ligcovalent  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  ligcovalent
merged  21  nonpolar hydrogens
end of base class init
using std outputfilename  ligcovalent.pdbqt
wrote  ligcovalent  to  ligcovalent.pdbqt
3---done
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> fixed:A:CYS18 with 6 MolKit.molecule.Atom]
calling setAutoFlexFields with  fixed:A:CYS18
in setAutoFlexFields with  fixed:A:CYS18
len(rotatables)= 1
returning res.torscount= 1
res.root= CA
ntors= 1
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= fixed_flex.pdbqt
res_total= 1
in writeResidue with  fixed:A:CYS18
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS18:CA, <Atom instance> fixed:A:CYS18:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS18:CA, <Atom instance> fixed:A:CYS18:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS18:N, <Atom instance> fixed:A:CYS18:CA)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3


writing and calling wL with nA= SG - 3
wBF2: wrote  SG
!!!2:calling wL


in writeLevel with  SG  outatom_counter= 4
len( SG ).bonds= 1
skipping b= CB - SG
returning queue= []
newQ= []
 currently queue=
CA : CB : queue= []
wrote flex file fixed_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: fixed_flex.pdbqt
wrote rigid file: fixed_rigid.pdbqt
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> ligcovalent:A:CYS18 with 28 MolKit.molecule.Atom]
calling setAutoFlexFields with  ligcovalent:A:CYS18
in setAutoFlexFields with  ligcovalent:A:CYS18
len(rotatables)= 8
returning res.torscount= 7
res.root= CA
ntors= 7
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= ligcovalent_flex.pdbqt
res_total= 7
in writeResidue with  ligcovalent:A:CYS18
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS18:CA, <Atom instance> ligcovalent:A:CYS18:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS18:CA, <Atom instance> ligcovalent:A:CYS18:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS18:N, <Atom instance> ligcovalent:A:CYS18:CA)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3
 currently queue= CB - SG ,
CA : CB : queue= [(<Atom instance> ligcovalent:A:CYS18:CB, <Atom instance> ligcovalent:A:CYS18:SG)]
 processing queue entry:  CB - SG
in wBF with fromAtom= CB + startAtom= SG startAtom.used= 0
wBF: wrote  SG
self.outatom_counter= 4
 currently queue= SG - CX ,
CB : SG : queue= [(<Atom instance> ligcovalent:A:CYS18:SG, <Atom instance> ligcovalent:A:CYS18:CX)]
 processing queue entry:  SG - CX
in wBF with fromAtom= SG + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 5
 currently queue= CX - CX ,
SG : CX : queue= [(<Atom instance> ligcovalent:A:CYS18:CX, <Atom instance> ligcovalent:A:CYS18:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 6
 currently queue= CX - CX , CX - CX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS18:CX, <Atom instance> ligcovalent:A:CYS18:CX), (<Atom instance> ligcovalent:A:CYS18:CX, <Atom instance> ligcovalent:A:CYS18:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 7


writing and calling wL with nA= CX - 7
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 8
len( CX ).bonds= 1
skipping b= CX - CX
returning queue= []
newQ= []
 currently queue=
CX : CX : queue= []
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 9


writing and calling wL with nA= NX - 9
wBF2: wrote  NX
!!!2:calling wL


in writeLevel with  NX  outatom_counter= 10
len( NX ).bonds= 3
processing b= CX - NX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
processing b= NX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= NX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 12
len( CX ).bonds= 3
skipping b= CX - NX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 14
len( CX ).bonds= 3
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 16
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 17
len( CX ).bonds= 3
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
processing b= OX - CX  activeTors= 1
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
CX wL: queue= [(<Atom instance> ligcovalent:A:CYS18:CX, <Atom instance> ligcovalent:A:CYS18:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 18
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS18:CX, <Atom instance> ligcovalent:A:CYS18:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS18:CX, <Atom instance> ligcovalent:A:CYS18:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS18:CX, <Atom instance> ligcovalent:A:CYS18:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS18:CX, <Atom instance> ligcovalent:A:CYS18:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 18
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 19
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS18:CX, <Atom instance> ligcovalent:A:CYS18:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS18:CX, <Atom instance> ligcovalent:A:CYS18:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 19
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS18:CX, <Atom instance> ligcovalent:A:CYS18:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS18:CX, <Atom instance> ligcovalent:A:CYS18:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 19
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= NX - CX
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS18:CX, <Atom instance> ligcovalent:A:CYS18:OX)]
newQ= [(<Atom instance> ligcovalent:A:CYS18:CX, <Atom instance> ligcovalent:A:CYS18:OX)]
@@@@len(newq)= 1
queue= [(<Atom instance> ligcovalent:A:CYS18:CX, <Atom instance> ligcovalent:A:CYS18:OX)]


writing and calling wL with nA= OX - 19
wBF2: wrote  OX
!!!2:calling wL


in writeLevel with  OX  outatom_counter= 20
len( OX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []
 currently queue= CX - OX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS18:CX, <Atom instance> ligcovalent:A:CYS18:OX)]
 processing queue entry:  CX - OX
in wBF with fromAtom= CX + startAtom= OX startAtom.used= 0
wBF: wrote  OX
self.outatom_counter= 21


writing and calling wL with nA= CX - 21
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 22
len( CX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []
 currently queue=
CX : OX : queue= []
wrote flex file ligcovalent_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: ligcovalent_flex.pdbqt
wrote rigid file: ligcovalent_rigid.pdbqt
4---done
setting PYTHONHOME environment
setting PYTHONHOME environment
!unable to use ligand.TORSDOF! torsdof always set to ligand.ndihe= 7
5---done
 concat 10 log files... done.
Job finished, good luck!
rm: 无法删除'chimera.com': 没有那个文件或目录
rm: 无法删除'tmp.mol2': 没有那个文件或目录
Done
Processing residue A:CYS483
[start] output filename is: ligcovalent_single.pdb
CHAIN A
Writing output filename: ligcovalent_single.pdb
1---ligcovalent.pdb prepared...
1.5--done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= fixed  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
Unable to assign MAP type to atom N
Sorry, there are no Gasteiger parameters available for atom fixed:A:HIS232:NE2
added gasteigercharges to  fixed
merged  0  nonpolar hydrogens
end of base class init
using std outputfilename  fixed.pdbqt
wrote  fixed  to  fixed.pdbqt
2---done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= ligcovalent  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  ligcovalent
merged  21  nonpolar hydrogens
end of base class init
using std outputfilename  ligcovalent.pdbqt
wrote  ligcovalent  to  ligcovalent.pdbqt
3---done
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> fixed:A:CYS483 with 6 MolKit.molecule.Atom]
calling setAutoFlexFields with  fixed:A:CYS483
in setAutoFlexFields with  fixed:A:CYS483
Unable to assign XYZ type to atom N
len(rotatables)= 1
returning res.torscount= 1
res.root= CA
ntors= 1
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= fixed_flex.pdbqt
res_total= 1
in writeResidue with  fixed:A:CYS483
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS483:N, <Atom instance> fixed:A:CYS483:CA)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS483:CA, <Atom instance> fixed:A:CYS483:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS483:CA, <Atom instance> fixed:A:CYS483:CB)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3


writing and calling wL with nA= SG - 3
wBF2: wrote  SG
!!!2:calling wL


in writeLevel with  SG  outatom_counter= 4
len( SG ).bonds= 1
skipping b= CB - SG
returning queue= []
newQ= []
 currently queue=
CA : CB : queue= []
wrote flex file fixed_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: fixed_flex.pdbqt
wrote rigid file: fixed_rigid.pdbqt
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> ligcovalent:A:CYS483 with 28 MolKit.molecule.Atom]
calling setAutoFlexFields with  ligcovalent:A:CYS483
in setAutoFlexFields with  ligcovalent:A:CYS483
len(rotatables)= 8
returning res.torscount= 7
res.root= CA
ntors= 7
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= ligcovalent_flex.pdbqt
res_total= 7
in writeResidue with  ligcovalent:A:CYS483
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS483:N, <Atom instance> ligcovalent:A:CYS483:CA)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS483:CA, <Atom instance> ligcovalent:A:CYS483:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS483:CA, <Atom instance> ligcovalent:A:CYS483:C)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3
 currently queue= CB - SG ,
CA : CB : queue= [(<Atom instance> ligcovalent:A:CYS483:CB, <Atom instance> ligcovalent:A:CYS483:SG)]
 processing queue entry:  CB - SG
in wBF with fromAtom= CB + startAtom= SG startAtom.used= 0
wBF: wrote  SG
self.outatom_counter= 4
 currently queue= SG - CX ,
CB : SG : queue= [(<Atom instance> ligcovalent:A:CYS483:SG, <Atom instance> ligcovalent:A:CYS483:CX)]
 processing queue entry:  SG - CX
in wBF with fromAtom= SG + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 5
 currently queue= CX - CX ,
SG : CX : queue= [(<Atom instance> ligcovalent:A:CYS483:CX, <Atom instance> ligcovalent:A:CYS483:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 6
 currently queue= CX - CX , CX - CX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS483:CX, <Atom instance> ligcovalent:A:CYS483:CX), (<Atom instance> ligcovalent:A:CYS483:CX, <Atom instance> ligcovalent:A:CYS483:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 7


writing and calling wL with nA= CX - 7
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 8
len( CX ).bonds= 1
skipping b= CX - CX
returning queue= []
newQ= []
 currently queue=
CX : CX : queue= []
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 9


writing and calling wL with nA= OX - 9
wBF2: wrote  OX
!!!2:calling wL


in writeLevel with  OX  outatom_counter= 10
len( OX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []


writing and calling wL with nA= NX - 10
wBF2: wrote  NX
!!!2:calling wL


in writeLevel with  NX  outatom_counter= 11
len( NX ).bonds= 3
processing b= CX - NX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= NX - CX
processing b= NX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 13
len( CX ).bonds= 3
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - NX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 15
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 16
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 17
len( CX ).bonds= 3
processing b= OX - CX  activeTors= 1
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
CX wL: queue= [(<Atom instance> ligcovalent:A:CYS483:CX, <Atom instance> ligcovalent:A:CYS483:OX)]
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 18
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS483:CX, <Atom instance> ligcovalent:A:CYS483:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS483:CX, <Atom instance> ligcovalent:A:CYS483:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS483:CX, <Atom instance> ligcovalent:A:CYS483:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS483:CX, <Atom instance> ligcovalent:A:CYS483:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS483:CX, <Atom instance> ligcovalent:A:CYS483:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS483:CX, <Atom instance> ligcovalent:A:CYS483:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 18
len( CX ).bonds= 3
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 19
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 20
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= []
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS483:CX, <Atom instance> ligcovalent:A:CYS483:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS483:CX, <Atom instance> ligcovalent:A:CYS483:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 20
len( CX ).bonds= 2
skipping b= NX - CX
skipping b= CX - CX
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS483:CX, <Atom instance> ligcovalent:A:CYS483:OX)]
newQ= [(<Atom instance> ligcovalent:A:CYS483:CX, <Atom instance> ligcovalent:A:CYS483:OX)]
@@@@len(newq)= 1
queue= [(<Atom instance> ligcovalent:A:CYS483:CX, <Atom instance> ligcovalent:A:CYS483:OX)]
 currently queue= CX - OX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS483:CX, <Atom instance> ligcovalent:A:CYS483:OX)]
 processing queue entry:  CX - OX
in wBF with fromAtom= CX + startAtom= OX startAtom.used= 0
wBF: wrote  OX
self.outatom_counter= 21


writing and calling wL with nA= CX - 21
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 22
len( CX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []
 currently queue=
CX : OX : queue= []
wrote flex file ligcovalent_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: ligcovalent_flex.pdbqt
wrote rigid file: ligcovalent_rigid.pdbqt
4---done
setting PYTHONHOME environment
setting PYTHONHOME environment
!unable to use ligand.TORSDOF! torsdof always set to ligand.ndihe= 7
5---done
 concat 10 log files... done.
Job finished, good luck!
rm: 无法删除'chimera.com': 没有那个文件或目录
rm: 无法删除'tmp.mol2': 没有那个文件或目录
Done
Processing residue A:CYS127
[start] output filename is: ligcovalent_single.pdb
CHAIN A
Writing output filename: ligcovalent_single.pdb
1---ligcovalent.pdb prepared...
1.5--done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= fixed  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  fixed
merged  0  nonpolar hydrogens
end of base class init
using std outputfilename  fixed.pdbqt
wrote  fixed  to  fixed.pdbqt
2---done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= ligcovalent  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  ligcovalent
merged  21  nonpolar hydrogens
end of base class init
using std outputfilename  ligcovalent.pdbqt
wrote  ligcovalent  to  ligcovalent.pdbqt
3---done
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> fixed:A:CYS127 with 6 MolKit.molecule.Atom]
calling setAutoFlexFields with  fixed:A:CYS127
in setAutoFlexFields with  fixed:A:CYS127
len(rotatables)= 1
returning res.torscount= 1
res.root= CA
ntors= 1
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= fixed_flex.pdbqt
res_total= 1
in writeResidue with  fixed:A:CYS127
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS127:CA, <Atom instance> fixed:A:CYS127:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS127:CA, <Atom instance> fixed:A:CYS127:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS127:N, <Atom instance> fixed:A:CYS127:CA)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3


writing and calling wL with nA= SG - 3
wBF2: wrote  SG
!!!2:calling wL


in writeLevel with  SG  outatom_counter= 4
len( SG ).bonds= 1
skipping b= CB - SG
returning queue= []
newQ= []
 currently queue=
CA : CB : queue= []
wrote flex file fixed_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: fixed_flex.pdbqt
wrote rigid file: fixed_rigid.pdbqt
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> ligcovalent:A:CYS127 with 28 MolKit.molecule.Atom]
calling setAutoFlexFields with  ligcovalent:A:CYS127
in setAutoFlexFields with  ligcovalent:A:CYS127
len(rotatables)= 8
returning res.torscount= 7
res.root= CA
ntors= 7
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= ligcovalent_flex.pdbqt
res_total= 7
in writeResidue with  ligcovalent:A:CYS127
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS127:CA, <Atom instance> ligcovalent:A:CYS127:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS127:CA, <Atom instance> ligcovalent:A:CYS127:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS127:N, <Atom instance> ligcovalent:A:CYS127:CA)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3
 currently queue= CB - SG ,
CA : CB : queue= [(<Atom instance> ligcovalent:A:CYS127:CB, <Atom instance> ligcovalent:A:CYS127:SG)]
 processing queue entry:  CB - SG
in wBF with fromAtom= CB + startAtom= SG startAtom.used= 0
wBF: wrote  SG
self.outatom_counter= 4
 currently queue= SG - CX ,
CB : SG : queue= [(<Atom instance> ligcovalent:A:CYS127:SG, <Atom instance> ligcovalent:A:CYS127:CX)]
 processing queue entry:  SG - CX
in wBF with fromAtom= SG + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 5
 currently queue= CX - CX ,
SG : CX : queue= [(<Atom instance> ligcovalent:A:CYS127:CX, <Atom instance> ligcovalent:A:CYS127:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 6
 currently queue= CX - CX , CX - CX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS127:CX, <Atom instance> ligcovalent:A:CYS127:CX), (<Atom instance> ligcovalent:A:CYS127:CX, <Atom instance> ligcovalent:A:CYS127:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 7


writing and calling wL with nA= CX - 7
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 8
len( CX ).bonds= 1
skipping b= CX - CX
returning queue= []
newQ= []
 currently queue=
CX : CX : queue= []
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 9


writing and calling wL with nA= NX - 9
wBF2: wrote  NX
!!!2:calling wL


in writeLevel with  NX  outatom_counter= 10
len( NX ).bonds= 3
processing b= CX - NX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
processing b= NX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= NX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 12
len( CX ).bonds= 3
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - NX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 14
len( CX ).bonds= 3
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 16
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 17
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= []
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 17
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 18
len( CX ).bonds= 3
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
processing b= OX - CX  activeTors= 1
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
CX wL: queue= [(<Atom instance> ligcovalent:A:CYS127:CX, <Atom instance> ligcovalent:A:CYS127:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 19
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS127:CX, <Atom instance> ligcovalent:A:CYS127:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS127:CX, <Atom instance> ligcovalent:A:CYS127:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS127:CX, <Atom instance> ligcovalent:A:CYS127:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS127:CX, <Atom instance> ligcovalent:A:CYS127:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS127:CX, <Atom instance> ligcovalent:A:CYS127:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS127:CX, <Atom instance> ligcovalent:A:CYS127:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 19
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS127:CX, <Atom instance> ligcovalent:A:CYS127:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS127:CX, <Atom instance> ligcovalent:A:CYS127:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 19
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= NX - CX
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS127:CX, <Atom instance> ligcovalent:A:CYS127:OX)]
newQ= [(<Atom instance> ligcovalent:A:CYS127:CX, <Atom instance> ligcovalent:A:CYS127:OX)]
@@@@len(newq)= 1
queue= [(<Atom instance> ligcovalent:A:CYS127:CX, <Atom instance> ligcovalent:A:CYS127:OX)]


writing and calling wL with nA= OX - 19
wBF2: wrote  OX
!!!2:calling wL


in writeLevel with  OX  outatom_counter= 20
len( OX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []
 currently queue= CX - OX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS127:CX, <Atom instance> ligcovalent:A:CYS127:OX)]
 processing queue entry:  CX - OX
in wBF with fromAtom= CX + startAtom= OX startAtom.used= 0
wBF: wrote  OX
self.outatom_counter= 21


writing and calling wL with nA= CX - 21
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 22
len( CX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []
 currently queue=
CX : OX : queue= []
wrote flex file ligcovalent_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: ligcovalent_flex.pdbqt
wrote rigid file: ligcovalent_rigid.pdbqt
4---done
setting PYTHONHOME environment
setting PYTHONHOME environment
!unable to use ligand.TORSDOF! torsdof always set to ligand.ndihe= 7
5---done
 concat 10 log files... done.
Job finished, good luck!
rm: 无法删除'chimera.com': 没有那个文件或目录
rm: 无法删除'tmp.mol2': 没有那个文件或目录
Done
Processing residue A:CYS207
[start] output filename is: ligcovalent_single.pdb
CHAIN A
Writing output filename: ligcovalent_single.pdb
1---ligcovalent.pdb prepared...
1.5--done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= fixed  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  fixed
merged  0  nonpolar hydrogens
end of base class init
using std outputfilename  fixed.pdbqt
wrote  fixed  to  fixed.pdbqt
2---done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= ligcovalent  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  ligcovalent
merged  21  nonpolar hydrogens
end of base class init
using std outputfilename  ligcovalent.pdbqt
wrote  ligcovalent  to  ligcovalent.pdbqt
3---done
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> fixed:A:CYS207 with 6 MolKit.molecule.Atom]
calling setAutoFlexFields with  fixed:A:CYS207
in setAutoFlexFields with  fixed:A:CYS207
len(rotatables)= 1
returning res.torscount= 1
res.root= CA
ntors= 1
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= fixed_flex.pdbqt
res_total= 1
in writeResidue with  fixed:A:CYS207
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS207:N, <Atom instance> fixed:A:CYS207:CA)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS207:CA, <Atom instance> fixed:A:CYS207:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS207:CA, <Atom instance> fixed:A:CYS207:CB)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3


writing and calling wL with nA= SG - 3
wBF2: wrote  SG
!!!2:calling wL


in writeLevel with  SG  outatom_counter= 4
len( SG ).bonds= 1
skipping b= CB - SG
returning queue= []
newQ= []
 currently queue=
CA : CB : queue= []
wrote flex file fixed_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: fixed_flex.pdbqt
wrote rigid file: fixed_rigid.pdbqt
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> ligcovalent:A:CYS207 with 28 MolKit.molecule.Atom]
calling setAutoFlexFields with  ligcovalent:A:CYS207
in setAutoFlexFields with  ligcovalent:A:CYS207
len(rotatables)= 8
returning res.torscount= 7
res.root= CA
ntors= 7
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= ligcovalent_flex.pdbqt
res_total= 7
in writeResidue with  ligcovalent:A:CYS207
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS207:CA, <Atom instance> ligcovalent:A:CYS207:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS207:CA, <Atom instance> ligcovalent:A:CYS207:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS207:N, <Atom instance> ligcovalent:A:CYS207:CA)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3
 currently queue= CB - SG ,
CA : CB : queue= [(<Atom instance> ligcovalent:A:CYS207:CB, <Atom instance> ligcovalent:A:CYS207:SG)]
 processing queue entry:  CB - SG
in wBF with fromAtom= CB + startAtom= SG startAtom.used= 0
wBF: wrote  SG
self.outatom_counter= 4
 currently queue= SG - CX ,
CB : SG : queue= [(<Atom instance> ligcovalent:A:CYS207:SG, <Atom instance> ligcovalent:A:CYS207:CX)]
 processing queue entry:  SG - CX
in wBF with fromAtom= SG + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 5
 currently queue= CX - CX ,
SG : CX : queue= [(<Atom instance> ligcovalent:A:CYS207:CX, <Atom instance> ligcovalent:A:CYS207:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 6
 currently queue= CX - CX , CX - CX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS207:CX, <Atom instance> ligcovalent:A:CYS207:CX), (<Atom instance> ligcovalent:A:CYS207:CX, <Atom instance> ligcovalent:A:CYS207:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 7


writing and calling wL with nA= CX - 7
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 8
len( CX ).bonds= 1
skipping b= CX - CX
returning queue= []
newQ= []
 currently queue=
CX : CX : queue= []
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 9


writing and calling wL with nA= NX - 9
wBF2: wrote  NX
!!!2:calling wL


in writeLevel with  NX  outatom_counter= 10
len( NX ).bonds= 3
processing b= NX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= NX - CX
processing b= CX - NX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 12
len( CX ).bonds= 2
skipping b= NX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 13
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 14
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 15
len( CX ).bonds= 3
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 16
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 17
len( CX ).bonds= 3
processing b= OX - CX  activeTors= 1
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
CX wL: queue= [(<Atom instance> ligcovalent:A:CYS207:CX, <Atom instance> ligcovalent:A:CYS207:OX)]
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 18
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 19
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS207:CX, <Atom instance> ligcovalent:A:CYS207:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS207:CX, <Atom instance> ligcovalent:A:CYS207:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS207:CX, <Atom instance> ligcovalent:A:CYS207:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS207:CX, <Atom instance> ligcovalent:A:CYS207:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS207:CX, <Atom instance> ligcovalent:A:CYS207:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS207:CX, <Atom instance> ligcovalent:A:CYS207:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS207:CX, <Atom instance> ligcovalent:A:CYS207:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS207:CX, <Atom instance> ligcovalent:A:CYS207:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS207:CX, <Atom instance> ligcovalent:A:CYS207:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS207:CX, <Atom instance> ligcovalent:A:CYS207:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS207:CX, <Atom instance> ligcovalent:A:CYS207:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS207:CX, <Atom instance> ligcovalent:A:CYS207:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 19
len( CX ).bonds= 3
skipping b= CX - CX
skipping b= CX - NX
skipping b= CX - CX
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS207:CX, <Atom instance> ligcovalent:A:CYS207:OX)]
newQ= [(<Atom instance> ligcovalent:A:CYS207:CX, <Atom instance> ligcovalent:A:CYS207:OX)]
@@@@len(newq)= 1
queue= [(<Atom instance> ligcovalent:A:CYS207:CX, <Atom instance> ligcovalent:A:CYS207:OX)]


writing and calling wL with nA= OX - 19
wBF2: wrote  OX
!!!2:calling wL


in writeLevel with  OX  outatom_counter= 20
len( OX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []
 currently queue= CX - OX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS207:CX, <Atom instance> ligcovalent:A:CYS207:OX)]
 processing queue entry:  CX - OX
in wBF with fromAtom= CX + startAtom= OX startAtom.used= 0
wBF: wrote  OX
self.outatom_counter= 21


writing and calling wL with nA= CX - 21
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 22
len( CX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []
 currently queue=
CX : OX : queue= []
wrote flex file ligcovalent_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: ligcovalent_flex.pdbqt
wrote rigid file: ligcovalent_rigid.pdbqt
4---done
setting PYTHONHOME environment
setting PYTHONHOME environment
!unable to use ligand.TORSDOF! torsdof always set to ligand.ndihe= 7
5---done
 concat 10 log files... done.
Job finished, good luck!
rm: 无法删除'chimera.com': 没有那个文件或目录
rm: 无法删除'tmp.mol2': 没有那个文件或目录
Done
Processing residue A:CYS78
[start] output filename is: ligcovalent_single.pdb
CHAIN A
Writing output filename: ligcovalent_single.pdb
1---ligcovalent.pdb prepared...
1.5--done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= fixed  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  fixed
merged  0  nonpolar hydrogens
end of base class init
using std outputfilename  fixed.pdbqt
wrote  fixed  to  fixed.pdbqt
2---done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= ligcovalent  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  ligcovalent
merged  21  nonpolar hydrogens
end of base class init
using std outputfilename  ligcovalent.pdbqt
wrote  ligcovalent  to  ligcovalent.pdbqt
3---done
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> fixed:A:CYS78 with 6 MolKit.molecule.Atom]
calling setAutoFlexFields with  fixed:A:CYS78
in setAutoFlexFields with  fixed:A:CYS78
len(rotatables)= 1
returning res.torscount= 1
res.root= CA
ntors= 1
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= fixed_flex.pdbqt
res_total= 1
in writeResidue with  fixed:A:CYS78
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS78:N, <Atom instance> fixed:A:CYS78:CA)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS78:CA, <Atom instance> fixed:A:CYS78:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS78:CA, <Atom instance> fixed:A:CYS78:C)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3


writing and calling wL with nA= SG - 3
wBF2: wrote  SG
!!!2:calling wL


in writeLevel with  SG  outatom_counter= 4
len( SG ).bonds= 1
skipping b= CB - SG
returning queue= []
newQ= []
 currently queue=
CA : CB : queue= []
wrote flex file fixed_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: fixed_flex.pdbqt
wrote rigid file: fixed_rigid.pdbqt
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> ligcovalent:A:CYS78 with 28 MolKit.molecule.Atom]
calling setAutoFlexFields with  ligcovalent:A:CYS78
in setAutoFlexFields with  ligcovalent:A:CYS78
len(rotatables)= 8
returning res.torscount= 7
res.root= CA
ntors= 7
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= ligcovalent_flex.pdbqt
res_total= 7
in writeResidue with  ligcovalent:A:CYS78
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS78:CA, <Atom instance> ligcovalent:A:CYS78:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS78:CA, <Atom instance> ligcovalent:A:CYS78:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS78:N, <Atom instance> ligcovalent:A:CYS78:CA)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3
 currently queue= CB - SG ,
CA : CB : queue= [(<Atom instance> ligcovalent:A:CYS78:CB, <Atom instance> ligcovalent:A:CYS78:SG)]
 processing queue entry:  CB - SG
in wBF with fromAtom= CB + startAtom= SG startAtom.used= 0
wBF: wrote  SG
self.outatom_counter= 4
 currently queue= SG - CX ,
CB : SG : queue= [(<Atom instance> ligcovalent:A:CYS78:SG, <Atom instance> ligcovalent:A:CYS78:CX)]
 processing queue entry:  SG - CX
in wBF with fromAtom= SG + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 5
 currently queue= CX - CX ,
SG : CX : queue= [(<Atom instance> ligcovalent:A:CYS78:CX, <Atom instance> ligcovalent:A:CYS78:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 6
 currently queue= CX - CX , CX - CX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS78:CX, <Atom instance> ligcovalent:A:CYS78:CX), (<Atom instance> ligcovalent:A:CYS78:CX, <Atom instance> ligcovalent:A:CYS78:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 7


writing and calling wL with nA= OX - 7
wBF2: wrote  OX
!!!2:calling wL


in writeLevel with  OX  outatom_counter= 8
len( OX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []


writing and calling wL with nA= NX - 8
wBF2: wrote  NX
!!!2:calling wL


in writeLevel with  NX  outatom_counter= 9
len( NX ).bonds= 3
skipping b= NX - CX
processing b= NX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
processing b= CX - NX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 11
len( CX ).bonds= 2
skipping b= NX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 12
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 13
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 14
len( CX ).bonds= 3
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 15
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 16
len( CX ).bonds= 3
processing b= OX - CX  activeTors= 1
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
CX wL: queue= [(<Atom instance> ligcovalent:A:CYS78:CX, <Atom instance> ligcovalent:A:CYS78:OX)]
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 17
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 18
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS78:CX, <Atom instance> ligcovalent:A:CYS78:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS78:CX, <Atom instance> ligcovalent:A:CYS78:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS78:CX, <Atom instance> ligcovalent:A:CYS78:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS78:CX, <Atom instance> ligcovalent:A:CYS78:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS78:CX, <Atom instance> ligcovalent:A:CYS78:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS78:CX, <Atom instance> ligcovalent:A:CYS78:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS78:CX, <Atom instance> ligcovalent:A:CYS78:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS78:CX, <Atom instance> ligcovalent:A:CYS78:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS78:CX, <Atom instance> ligcovalent:A:CYS78:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS78:CX, <Atom instance> ligcovalent:A:CYS78:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS78:CX, <Atom instance> ligcovalent:A:CYS78:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS78:CX, <Atom instance> ligcovalent:A:CYS78:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 18
len( CX ).bonds= 3
skipping b= CX - CX
skipping b= CX - NX
skipping b= CX - CX
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS78:CX, <Atom instance> ligcovalent:A:CYS78:OX)]
newQ= [(<Atom instance> ligcovalent:A:CYS78:CX, <Atom instance> ligcovalent:A:CYS78:OX)]
@@@@len(newq)= 1
queue= [(<Atom instance> ligcovalent:A:CYS78:CX, <Atom instance> ligcovalent:A:CYS78:OX)]
 currently queue= CX - OX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS78:CX, <Atom instance> ligcovalent:A:CYS78:OX)]
 processing queue entry:  CX - OX
in wBF with fromAtom= CX + startAtom= OX startAtom.used= 0
wBF: wrote  OX
self.outatom_counter= 19


writing and calling wL with nA= CX - 19
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 20
len( CX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []
 currently queue=
CX : OX : queue= []
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 21


writing and calling wL with nA= CX - 21
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 22
len( CX ).bonds= 1
skipping b= CX - CX
returning queue= []
newQ= []
 currently queue=
CX : CX : queue= []
wrote flex file ligcovalent_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: ligcovalent_flex.pdbqt
wrote rigid file: ligcovalent_rigid.pdbqt
4---done
setting PYTHONHOME environment
setting PYTHONHOME environment
!unable to use ligand.TORSDOF! torsdof always set to ligand.ndihe= 7
5---done
 concat 10 log files... done.
Job finished, good luck!
rm: 无法删除'chimera.com': 没有那个文件或目录
rm: 无法删除'tmp.mol2': 没有那个文件或目录
Done
Processing residue A:CYS99
[start] output filename is: ligcovalent_single.pdb
CHAIN A
Writing output filename: ligcovalent_single.pdb
1---ligcovalent.pdb prepared...
1.5--done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= fixed  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  fixed
merged  0  nonpolar hydrogens
end of base class init
using std outputfilename  fixed.pdbqt
wrote  fixed  to  fixed.pdbqt
2---done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= ligcovalent  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  ligcovalent
merged  21  nonpolar hydrogens
end of base class init
using std outputfilename  ligcovalent.pdbqt
wrote  ligcovalent  to  ligcovalent.pdbqt
3---done
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> fixed:A:CYS99 with 6 MolKit.molecule.Atom]
calling setAutoFlexFields with  fixed:A:CYS99
in setAutoFlexFields with  fixed:A:CYS99
len(rotatables)= 1
returning res.torscount= 1
res.root= CA
ntors= 1
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= fixed_flex.pdbqt
res_total= 1
in writeResidue with  fixed:A:CYS99
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS99:N, <Atom instance> fixed:A:CYS99:CA)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS99:CA, <Atom instance> fixed:A:CYS99:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS99:CA, <Atom instance> fixed:A:CYS99:C)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3


writing and calling wL with nA= SG - 3
wBF2: wrote  SG
!!!2:calling wL


in writeLevel with  SG  outatom_counter= 4
len( SG ).bonds= 1
skipping b= CB - SG
returning queue= []
newQ= []
 currently queue=
CA : CB : queue= []
wrote flex file fixed_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: fixed_flex.pdbqt
wrote rigid file: fixed_rigid.pdbqt
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> ligcovalent:A:CYS99 with 28 MolKit.molecule.Atom]
calling setAutoFlexFields with  ligcovalent:A:CYS99
in setAutoFlexFields with  ligcovalent:A:CYS99
len(rotatables)= 8
returning res.torscount= 7
res.root= CA
ntors= 7
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= ligcovalent_flex.pdbqt
res_total= 7
in writeResidue with  ligcovalent:A:CYS99
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS99:N, <Atom instance> ligcovalent:A:CYS99:CA)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS99:CA, <Atom instance> ligcovalent:A:CYS99:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS99:CA, <Atom instance> ligcovalent:A:CYS99:C)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3
 currently queue= CB - SG ,
CA : CB : queue= [(<Atom instance> ligcovalent:A:CYS99:CB, <Atom instance> ligcovalent:A:CYS99:SG)]
 processing queue entry:  CB - SG
in wBF with fromAtom= CB + startAtom= SG startAtom.used= 0
wBF: wrote  SG
self.outatom_counter= 4
 currently queue= SG - CX ,
CB : SG : queue= [(<Atom instance> ligcovalent:A:CYS99:SG, <Atom instance> ligcovalent:A:CYS99:CX)]
 processing queue entry:  SG - CX
in wBF with fromAtom= SG + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 5
 currently queue= CX - CX ,
SG : CX : queue= [(<Atom instance> ligcovalent:A:CYS99:CX, <Atom instance> ligcovalent:A:CYS99:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 6
 currently queue= CX - CX , CX - CX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS99:CX, <Atom instance> ligcovalent:A:CYS99:CX), (<Atom instance> ligcovalent:A:CYS99:CX, <Atom instance> ligcovalent:A:CYS99:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 7


writing and calling wL with nA= OX - 7
wBF2: wrote  OX
!!!2:calling wL


in writeLevel with  OX  outatom_counter= 8
len( OX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []


writing and calling wL with nA= NX - 8
wBF2: wrote  NX
!!!2:calling wL


in writeLevel with  NX  outatom_counter= 9
len( NX ).bonds= 3
skipping b= NX - CX
processing b= NX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
processing b= CX - NX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 11
len( CX ).bonds= 2
skipping b= NX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 12
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 13
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 14
len( CX ).bonds= 3
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 15
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 16
len( CX ).bonds= 3
processing b= OX - CX  activeTors= 1
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
CX wL: queue= [(<Atom instance> ligcovalent:A:CYS99:CX, <Atom instance> ligcovalent:A:CYS99:OX)]
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 17
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 18
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS99:CX, <Atom instance> ligcovalent:A:CYS99:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS99:CX, <Atom instance> ligcovalent:A:CYS99:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS99:CX, <Atom instance> ligcovalent:A:CYS99:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS99:CX, <Atom instance> ligcovalent:A:CYS99:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS99:CX, <Atom instance> ligcovalent:A:CYS99:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS99:CX, <Atom instance> ligcovalent:A:CYS99:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS99:CX, <Atom instance> ligcovalent:A:CYS99:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS99:CX, <Atom instance> ligcovalent:A:CYS99:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS99:CX, <Atom instance> ligcovalent:A:CYS99:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS99:CX, <Atom instance> ligcovalent:A:CYS99:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS99:CX, <Atom instance> ligcovalent:A:CYS99:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS99:CX, <Atom instance> ligcovalent:A:CYS99:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 18
len( CX ).bonds= 3
skipping b= CX - CX
skipping b= CX - NX
skipping b= CX - CX
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS99:CX, <Atom instance> ligcovalent:A:CYS99:OX)]
newQ= [(<Atom instance> ligcovalent:A:CYS99:CX, <Atom instance> ligcovalent:A:CYS99:OX)]
@@@@len(newq)= 1
queue= [(<Atom instance> ligcovalent:A:CYS99:CX, <Atom instance> ligcovalent:A:CYS99:OX)]
 currently queue= CX - OX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS99:CX, <Atom instance> ligcovalent:A:CYS99:OX)]
 processing queue entry:  CX - OX
in wBF with fromAtom= CX + startAtom= OX startAtom.used= 0
wBF: wrote  OX
self.outatom_counter= 19


writing and calling wL with nA= CX - 19
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 20
len( CX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []
 currently queue=
CX : OX : queue= []
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 21


writing and calling wL with nA= CX - 21
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 22
len( CX ).bonds= 1
skipping b= CX - CX
returning queue= []
newQ= []
 currently queue=
CX : CX : queue= []
wrote flex file ligcovalent_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: ligcovalent_flex.pdbqt
wrote rigid file: ligcovalent_rigid.pdbqt
4---done
setting PYTHONHOME environment
setting PYTHONHOME environment
!unable to use ligand.TORSDOF! torsdof always set to ligand.ndihe= 7
5---done
 concat 10 log files... done.
Job finished, good luck!
rm: 无法删除'chimera.com': 没有那个文件或目录
rm: 无法删除'tmp.mol2': 没有那个文件或目录
Done
Processing residue A:CYS34
[start] output filename is: ligcovalent_single.pdb
CHAIN A
Writing output filename: ligcovalent_single.pdb
1---ligcovalent.pdb prepared...
1.5--done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= fixed  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  fixed
merged  0  nonpolar hydrogens
end of base class init
using std outputfilename  fixed.pdbqt
wrote  fixed  to  fixed.pdbqt
2---done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= ligcovalent  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  ligcovalent
merged  21  nonpolar hydrogens
end of base class init
using std outputfilename  ligcovalent.pdbqt
wrote  ligcovalent  to  ligcovalent.pdbqt
3---done
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> fixed:A:CYS34 with 6 MolKit.molecule.Atom]
calling setAutoFlexFields with  fixed:A:CYS34
in setAutoFlexFields with  fixed:A:CYS34
len(rotatables)= 2
returning res.torscount= 2
res.root= CA
ntors= 2
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= fixed_flex.pdbqt
res_total= 2
in writeResidue with  fixed:A:CYS34
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS34:N, <Atom instance> fixed:A:CYS34:CA)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS34:CA, <Atom instance> fixed:A:CYS34:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS34:CA, <Atom instance> fixed:A:CYS34:C)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3
 currently queue= CB - SG ,
CA : CB : queue= [(<Atom instance> fixed:A:CYS34:CB, <Atom instance> fixed:A:CYS34:SG)]
 processing queue entry:  CB - SG
in wBF with fromAtom= CB + startAtom= SG startAtom.used= 0
wBF: wrote  SG
self.outatom_counter= 4
 currently queue=
CB : SG : queue= []
wrote flex file fixed_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: fixed_flex.pdbqt
wrote rigid file: fixed_rigid.pdbqt
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> ligcovalent:A:CYS34 with 28 MolKit.molecule.Atom]
calling setAutoFlexFields with  ligcovalent:A:CYS34
in setAutoFlexFields with  ligcovalent:A:CYS34
len(rotatables)= 8
returning res.torscount= 7
res.root= CA
ntors= 7
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= ligcovalent_flex.pdbqt
res_total= 7
in writeResidue with  ligcovalent:A:CYS34
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS34:N, <Atom instance> ligcovalent:A:CYS34:CA)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS34:CA, <Atom instance> ligcovalent:A:CYS34:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS34:CA, <Atom instance> ligcovalent:A:CYS34:CB)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3
 currently queue= CB - SG ,
CA : CB : queue= [(<Atom instance> ligcovalent:A:CYS34:CB, <Atom instance> ligcovalent:A:CYS34:SG)]
 processing queue entry:  CB - SG
in wBF with fromAtom= CB + startAtom= SG startAtom.used= 0
wBF: wrote  SG
self.outatom_counter= 4
 currently queue= SG - CX ,
CB : SG : queue= [(<Atom instance> ligcovalent:A:CYS34:SG, <Atom instance> ligcovalent:A:CYS34:CX)]
 processing queue entry:  SG - CX
in wBF with fromAtom= SG + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 5
 currently queue= CX - CX ,
SG : CX : queue= [(<Atom instance> ligcovalent:A:CYS34:CX, <Atom instance> ligcovalent:A:CYS34:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 6
 currently queue= CX - CX , CX - CX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS34:CX, <Atom instance> ligcovalent:A:CYS34:CX), (<Atom instance> ligcovalent:A:CYS34:CX, <Atom instance> ligcovalent:A:CYS34:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 7


writing and calling wL with nA= OX - 7
wBF2: wrote  OX
!!!2:calling wL


in writeLevel with  OX  outatom_counter= 8
len( OX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []


writing and calling wL with nA= NX - 8
wBF2: wrote  NX
!!!2:calling wL


in writeLevel with  NX  outatom_counter= 9
len( NX ).bonds= 3
processing b= NX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= NX - CX
processing b= CX - NX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 11
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= NX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 12
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 13
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 14
len( CX ).bonds= 3
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 15
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 16
len( CX ).bonds= 3
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
processing b= OX - CX  activeTors= 1
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
CX wL: queue= [(<Atom instance> ligcovalent:A:CYS34:CX, <Atom instance> ligcovalent:A:CYS34:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 17
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 18
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS34:CX, <Atom instance> ligcovalent:A:CYS34:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS34:CX, <Atom instance> ligcovalent:A:CYS34:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS34:CX, <Atom instance> ligcovalent:A:CYS34:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS34:CX, <Atom instance> ligcovalent:A:CYS34:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS34:CX, <Atom instance> ligcovalent:A:CYS34:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS34:CX, <Atom instance> ligcovalent:A:CYS34:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS34:CX, <Atom instance> ligcovalent:A:CYS34:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS34:CX, <Atom instance> ligcovalent:A:CYS34:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS34:CX, <Atom instance> ligcovalent:A:CYS34:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS34:CX, <Atom instance> ligcovalent:A:CYS34:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS34:CX, <Atom instance> ligcovalent:A:CYS34:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS34:CX, <Atom instance> ligcovalent:A:CYS34:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 18
len( CX ).bonds= 3
skipping b= CX - CX
skipping b= CX - NX
skipping b= CX - CX
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS34:CX, <Atom instance> ligcovalent:A:CYS34:OX)]
newQ= [(<Atom instance> ligcovalent:A:CYS34:CX, <Atom instance> ligcovalent:A:CYS34:OX)]
@@@@len(newq)= 1
queue= [(<Atom instance> ligcovalent:A:CYS34:CX, <Atom instance> ligcovalent:A:CYS34:OX)]
 currently queue= CX - OX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS34:CX, <Atom instance> ligcovalent:A:CYS34:OX)]
 processing queue entry:  CX - OX
in wBF with fromAtom= CX + startAtom= OX startAtom.used= 0
wBF: wrote  OX
self.outatom_counter= 19


writing and calling wL with nA= CX - 19
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 20
len( CX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []
 currently queue=
CX : OX : queue= []
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 21


writing and calling wL with nA= CX - 21
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 22
len( CX ).bonds= 1
skipping b= CX - CX
returning queue= []
newQ= []
 currently queue=
CX : CX : queue= []
wrote flex file ligcovalent_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: ligcovalent_flex.pdbqt
wrote rigid file: ligcovalent_rigid.pdbqt
4---done
setting PYTHONHOME environment
setting PYTHONHOME environment
!unable to use ligand.TORSDOF! torsdof always set to ligand.ndihe= 7
5---done
 concat 10 log files... done.
Job finished, good luck!
rm: 无法删除'chimera.com': 没有那个文件或目录
rm: 无法删除'tmp.mol2': 没有那个文件或目录
Done
Processing residue A:CYS285
[start] output filename is: ligcovalent_single.pdb
CHAIN A
Writing output filename: ligcovalent_single.pdb
1---ligcovalent.pdb prepared...
1.5--done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= fixed  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  fixed
merged  0  nonpolar hydrogens
end of base class init
using std outputfilename  fixed.pdbqt
wrote  fixed  to  fixed.pdbqt
2---done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= ligcovalent  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  ligcovalent
merged  21  nonpolar hydrogens
end of base class init
using std outputfilename  ligcovalent.pdbqt
wrote  ligcovalent  to  ligcovalent.pdbqt
3---done
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> fixed:A:CYS285 with 6 MolKit.molecule.Atom]
calling setAutoFlexFields with  fixed:A:CYS285
in setAutoFlexFields with  fixed:A:CYS285
len(rotatables)= 1
returning res.torscount= 1
res.root= CA
ntors= 1
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= fixed_flex.pdbqt
res_total= 1
in writeResidue with  fixed:A:CYS285
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS285:CA, <Atom instance> fixed:A:CYS285:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS285:CA, <Atom instance> fixed:A:CYS285:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS285:N, <Atom instance> fixed:A:CYS285:CA)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3


writing and calling wL with nA= SG - 3
wBF2: wrote  SG
!!!2:calling wL


in writeLevel with  SG  outatom_counter= 4
len( SG ).bonds= 1
skipping b= CB - SG
returning queue= []
newQ= []
 currently queue=
CA : CB : queue= []
wrote flex file fixed_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: fixed_flex.pdbqt
wrote rigid file: fixed_rigid.pdbqt
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> ligcovalent:A:CYS285 with 28 MolKit.molecule.Atom]
calling setAutoFlexFields with  ligcovalent:A:CYS285
in setAutoFlexFields with  ligcovalent:A:CYS285
len(rotatables)= 8
returning res.torscount= 7
res.root= CA
ntors= 7
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= ligcovalent_flex.pdbqt
res_total= 7
in writeResidue with  ligcovalent:A:CYS285
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS285:N, <Atom instance> ligcovalent:A:CYS285:CA)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS285:CA, <Atom instance> ligcovalent:A:CYS285:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS285:CA, <Atom instance> ligcovalent:A:CYS285:C)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3
 currently queue= CB - SG ,
CA : CB : queue= [(<Atom instance> ligcovalent:A:CYS285:CB, <Atom instance> ligcovalent:A:CYS285:SG)]
 processing queue entry:  CB - SG
in wBF with fromAtom= CB + startAtom= SG startAtom.used= 0
wBF: wrote  SG
self.outatom_counter= 4
 currently queue= SG - CX ,
CB : SG : queue= [(<Atom instance> ligcovalent:A:CYS285:SG, <Atom instance> ligcovalent:A:CYS285:CX)]
 processing queue entry:  SG - CX
in wBF with fromAtom= SG + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 5
 currently queue= CX - CX ,
SG : CX : queue= [(<Atom instance> ligcovalent:A:CYS285:CX, <Atom instance> ligcovalent:A:CYS285:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 6
 currently queue= CX - CX , CX - CX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS285:CX, <Atom instance> ligcovalent:A:CYS285:CX), (<Atom instance> ligcovalent:A:CYS285:CX, <Atom instance> ligcovalent:A:CYS285:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 7


writing and calling wL with nA= OX - 7
wBF2: wrote  OX
!!!2:calling wL


in writeLevel with  OX  outatom_counter= 8
len( OX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []


writing and calling wL with nA= NX - 8
wBF2: wrote  NX
!!!2:calling wL


in writeLevel with  NX  outatom_counter= 9
len( NX ).bonds= 3
processing b= CX - NX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= NX - CX
processing b= NX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 11
len( CX ).bonds= 3
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - NX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 13
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 14
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 15
len( CX ).bonds= 3
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
processing b= OX - CX  activeTors= 1
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
CX wL: queue= [(<Atom instance> ligcovalent:A:CYS285:CX, <Atom instance> ligcovalent:A:CYS285:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 16
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS285:CX, <Atom instance> ligcovalent:A:CYS285:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS285:CX, <Atom instance> ligcovalent:A:CYS285:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS285:CX, <Atom instance> ligcovalent:A:CYS285:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS285:CX, <Atom instance> ligcovalent:A:CYS285:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS285:CX, <Atom instance> ligcovalent:A:CYS285:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS285:CX, <Atom instance> ligcovalent:A:CYS285:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 16
len( CX ).bonds= 3
skipping b= CX - CX
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 17
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 18
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= []
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS285:CX, <Atom instance> ligcovalent:A:CYS285:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS285:CX, <Atom instance> ligcovalent:A:CYS285:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 18
len( CX ).bonds= 2
skipping b= NX - CX
skipping b= CX - CX
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS285:CX, <Atom instance> ligcovalent:A:CYS285:OX)]
newQ= [(<Atom instance> ligcovalent:A:CYS285:CX, <Atom instance> ligcovalent:A:CYS285:OX)]
@@@@len(newq)= 1
queue= [(<Atom instance> ligcovalent:A:CYS285:CX, <Atom instance> ligcovalent:A:CYS285:OX)]
 currently queue= CX - OX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS285:CX, <Atom instance> ligcovalent:A:CYS285:OX)]
 processing queue entry:  CX - OX
in wBF with fromAtom= CX + startAtom= OX startAtom.used= 0
wBF: wrote  OX
self.outatom_counter= 19


writing and calling wL with nA= CX - 19
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 20
len( CX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []
 currently queue=
CX : OX : queue= []
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 21


writing and calling wL with nA= CX - 21
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 22
len( CX ).bonds= 1
skipping b= CX - CX
returning queue= []
newQ= []
 currently queue=
CX : CX : queue= []
wrote flex file ligcovalent_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: ligcovalent_flex.pdbqt
wrote rigid file: ligcovalent_rigid.pdbqt
4---done
setting PYTHONHOME environment
setting PYTHONHOME environment
!unable to use ligand.TORSDOF! torsdof always set to ligand.ndihe= 7
5---done
 concat 10 log files... done.
Job finished, good luck!
rm: 无法删除'chimera.com': 没有那个文件或目录
rm: 无法删除'tmp.mol2': 没有那个文件或目录
Done
Processing residue A:CYS174
[start] output filename is: ligcovalent_single.pdb
CHAIN A
Writing output filename: ligcovalent_single.pdb
1---ligcovalent.pdb prepared...
1.5--done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= fixed  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  fixed
merged  0  nonpolar hydrogens
end of base class init
using std outputfilename  fixed.pdbqt
wrote  fixed  to  fixed.pdbqt
2---done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= ligcovalent  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  ligcovalent
merged  21  nonpolar hydrogens
end of base class init
using std outputfilename  ligcovalent.pdbqt
wrote  ligcovalent  to  ligcovalent.pdbqt
3---done
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> fixed:A:CYS174 with 6 MolKit.molecule.Atom]
calling setAutoFlexFields with  fixed:A:CYS174
in setAutoFlexFields with  fixed:A:CYS174
len(rotatables)= 1
returning res.torscount= 1
res.root= CA
ntors= 1
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= fixed_flex.pdbqt
res_total= 1
in writeResidue with  fixed:A:CYS174
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS174:N, <Atom instance> fixed:A:CYS174:CA)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS174:CA, <Atom instance> fixed:A:CYS174:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS174:CA, <Atom instance> fixed:A:CYS174:C)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3


writing and calling wL with nA= SG - 3
wBF2: wrote  SG
!!!2:calling wL


in writeLevel with  SG  outatom_counter= 4
len( SG ).bonds= 1
skipping b= CB - SG
returning queue= []
newQ= []
 currently queue=
CA : CB : queue= []
wrote flex file fixed_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: fixed_flex.pdbqt
wrote rigid file: fixed_rigid.pdbqt
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> ligcovalent:A:CYS174 with 28 MolKit.molecule.Atom]
calling setAutoFlexFields with  ligcovalent:A:CYS174
in setAutoFlexFields with  ligcovalent:A:CYS174
len(rotatables)= 8
returning res.torscount= 7
res.root= CA
ntors= 7
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= ligcovalent_flex.pdbqt
res_total= 7
in writeResidue with  ligcovalent:A:CYS174
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS174:N, <Atom instance> ligcovalent:A:CYS174:CA)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS174:CA, <Atom instance> ligcovalent:A:CYS174:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS174:CA, <Atom instance> ligcovalent:A:CYS174:C)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3
 currently queue= CB - SG ,
CA : CB : queue= [(<Atom instance> ligcovalent:A:CYS174:CB, <Atom instance> ligcovalent:A:CYS174:SG)]
 processing queue entry:  CB - SG
in wBF with fromAtom= CB + startAtom= SG startAtom.used= 0
wBF: wrote  SG
self.outatom_counter= 4
 currently queue= SG - CX ,
CB : SG : queue= [(<Atom instance> ligcovalent:A:CYS174:SG, <Atom instance> ligcovalent:A:CYS174:CX)]
 processing queue entry:  SG - CX
in wBF with fromAtom= SG + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 5
 currently queue= CX - CX ,
SG : CX : queue= [(<Atom instance> ligcovalent:A:CYS174:CX, <Atom instance> ligcovalent:A:CYS174:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 6
 currently queue= CX - CX , CX - CX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS174:CX, <Atom instance> ligcovalent:A:CYS174:CX), (<Atom instance> ligcovalent:A:CYS174:CX, <Atom instance> ligcovalent:A:CYS174:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 7


writing and calling wL with nA= NX - 7
wBF2: wrote  NX
!!!2:calling wL


in writeLevel with  NX  outatom_counter= 8
len( NX ).bonds= 3
processing b= NX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= NX - CX
processing b= CX - NX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 10
len( CX ).bonds= 2
skipping b= NX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 11
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 12
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 13
len( CX ).bonds= 3
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 14
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 15
len( CX ).bonds= 3
processing b= OX - CX  activeTors= 1
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
CX wL: queue= [(<Atom instance> ligcovalent:A:CYS174:CX, <Atom instance> ligcovalent:A:CYS174:OX)]
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 16
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 17
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS174:CX, <Atom instance> ligcovalent:A:CYS174:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS174:CX, <Atom instance> ligcovalent:A:CYS174:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS174:CX, <Atom instance> ligcovalent:A:CYS174:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS174:CX, <Atom instance> ligcovalent:A:CYS174:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS174:CX, <Atom instance> ligcovalent:A:CYS174:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS174:CX, <Atom instance> ligcovalent:A:CYS174:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS174:CX, <Atom instance> ligcovalent:A:CYS174:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS174:CX, <Atom instance> ligcovalent:A:CYS174:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS174:CX, <Atom instance> ligcovalent:A:CYS174:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS174:CX, <Atom instance> ligcovalent:A:CYS174:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS174:CX, <Atom instance> ligcovalent:A:CYS174:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS174:CX, <Atom instance> ligcovalent:A:CYS174:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 17
len( CX ).bonds= 3
skipping b= CX - CX
skipping b= CX - NX
skipping b= CX - CX
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS174:CX, <Atom instance> ligcovalent:A:CYS174:OX)]
newQ= [(<Atom instance> ligcovalent:A:CYS174:CX, <Atom instance> ligcovalent:A:CYS174:OX)]
@@@@len(newq)= 1
queue= [(<Atom instance> ligcovalent:A:CYS174:CX, <Atom instance> ligcovalent:A:CYS174:OX)]


writing and calling wL with nA= OX - 17
wBF2: wrote  OX
!!!2:calling wL


in writeLevel with  OX  outatom_counter= 18
len( OX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []
 currently queue= CX - OX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS174:CX, <Atom instance> ligcovalent:A:CYS174:OX)]
 processing queue entry:  CX - OX
in wBF with fromAtom= CX + startAtom= OX startAtom.used= 0
wBF: wrote  OX
self.outatom_counter= 19


writing and calling wL with nA= CX - 19
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 20
len( CX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []
 currently queue=
CX : OX : queue= []
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 21


writing and calling wL with nA= CX - 21
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 22
len( CX ).bonds= 1
skipping b= CX - CX
returning queue= []
newQ= []
 currently queue=
CX : CX : queue= []
wrote flex file ligcovalent_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: ligcovalent_flex.pdbqt
wrote rigid file: ligcovalent_rigid.pdbqt
4---done
setting PYTHONHOME environment
setting PYTHONHOME environment
!unable to use ligand.TORSDOF! torsdof always set to ligand.ndihe= 7
5---done
 concat 10 log files... done.
Job finished, good luck!
rm: 无法删除'chimera.com': 没有那个文件或目录
rm: 无法删除'tmp.mol2': 没有那个文件或目录
Done
Processing residue A:CYS214
[start] output filename is: ligcovalent_single.pdb
CHAIN A
Writing output filename: ligcovalent_single.pdb
1---ligcovalent.pdb prepared...
1.5--done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= fixed  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  fixed
merged  0  nonpolar hydrogens
end of base class init
using std outputfilename  fixed.pdbqt
wrote  fixed  to  fixed.pdbqt
2---done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= ligcovalent  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  ligcovalent
merged  21  nonpolar hydrogens
end of base class init
using std outputfilename  ligcovalent.pdbqt
wrote  ligcovalent  to  ligcovalent.pdbqt
3---done
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> fixed:A:CYS214 with 6 MolKit.molecule.Atom]
calling setAutoFlexFields with  fixed:A:CYS214
in setAutoFlexFields with  fixed:A:CYS214
len(rotatables)= 1
returning res.torscount= 1
res.root= CA
ntors= 1
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= fixed_flex.pdbqt
res_total= 1
in writeResidue with  fixed:A:CYS214
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS214:CA, <Atom instance> fixed:A:CYS214:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS214:CA, <Atom instance> fixed:A:CYS214:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS214:N, <Atom instance> fixed:A:CYS214:CA)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3


writing and calling wL with nA= SG - 3
wBF2: wrote  SG
!!!2:calling wL


in writeLevel with  SG  outatom_counter= 4
len( SG ).bonds= 1
skipping b= CB - SG
returning queue= []
newQ= []
 currently queue=
CA : CB : queue= []
wrote flex file fixed_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: fixed_flex.pdbqt
wrote rigid file: fixed_rigid.pdbqt
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> ligcovalent:A:CYS214 with 28 MolKit.molecule.Atom]
calling setAutoFlexFields with  ligcovalent:A:CYS214
in setAutoFlexFields with  ligcovalent:A:CYS214
len(rotatables)= 8
returning res.torscount= 7
res.root= CA
ntors= 7
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= ligcovalent_flex.pdbqt
res_total= 7
in writeResidue with  ligcovalent:A:CYS214
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS214:N, <Atom instance> ligcovalent:A:CYS214:CA)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS214:CA, <Atom instance> ligcovalent:A:CYS214:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS214:CA, <Atom instance> ligcovalent:A:CYS214:C)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3
 currently queue= CB - SG ,
CA : CB : queue= [(<Atom instance> ligcovalent:A:CYS214:CB, <Atom instance> ligcovalent:A:CYS214:SG)]
 processing queue entry:  CB - SG
in wBF with fromAtom= CB + startAtom= SG startAtom.used= 0
wBF: wrote  SG
self.outatom_counter= 4
 currently queue= SG - CX ,
CB : SG : queue= [(<Atom instance> ligcovalent:A:CYS214:SG, <Atom instance> ligcovalent:A:CYS214:CX)]
 processing queue entry:  SG - CX
in wBF with fromAtom= SG + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 5
 currently queue= CX - CX ,
SG : CX : queue= [(<Atom instance> ligcovalent:A:CYS214:CX, <Atom instance> ligcovalent:A:CYS214:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 6
 currently queue= CX - CX , CX - CX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS214:CX, <Atom instance> ligcovalent:A:CYS214:CX), (<Atom instance> ligcovalent:A:CYS214:CX, <Atom instance> ligcovalent:A:CYS214:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 7


writing and calling wL with nA= OX - 7
wBF2: wrote  OX
!!!2:calling wL


in writeLevel with  OX  outatom_counter= 8
len( OX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []


writing and calling wL with nA= NX - 8
wBF2: wrote  NX
!!!2:calling wL


in writeLevel with  NX  outatom_counter= 9
len( NX ).bonds= 3
skipping b= NX - CX
processing b= NX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
processing b= CX - NX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 11
len( CX ).bonds= 2
skipping b= NX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 12
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 13
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 14
len( CX ).bonds= 3
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 15
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 16
len( CX ).bonds= 3
processing b= OX - CX  activeTors= 1
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
CX wL: queue= [(<Atom instance> ligcovalent:A:CYS214:CX, <Atom instance> ligcovalent:A:CYS214:OX)]
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 17
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 18
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS214:CX, <Atom instance> ligcovalent:A:CYS214:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS214:CX, <Atom instance> ligcovalent:A:CYS214:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS214:CX, <Atom instance> ligcovalent:A:CYS214:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS214:CX, <Atom instance> ligcovalent:A:CYS214:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS214:CX, <Atom instance> ligcovalent:A:CYS214:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS214:CX, <Atom instance> ligcovalent:A:CYS214:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS214:CX, <Atom instance> ligcovalent:A:CYS214:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS214:CX, <Atom instance> ligcovalent:A:CYS214:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS214:CX, <Atom instance> ligcovalent:A:CYS214:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS214:CX, <Atom instance> ligcovalent:A:CYS214:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS214:CX, <Atom instance> ligcovalent:A:CYS214:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS214:CX, <Atom instance> ligcovalent:A:CYS214:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 18
len( CX ).bonds= 3
skipping b= CX - CX
skipping b= CX - NX
skipping b= CX - CX
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS214:CX, <Atom instance> ligcovalent:A:CYS214:OX)]
newQ= [(<Atom instance> ligcovalent:A:CYS214:CX, <Atom instance> ligcovalent:A:CYS214:OX)]
@@@@len(newq)= 1
queue= [(<Atom instance> ligcovalent:A:CYS214:CX, <Atom instance> ligcovalent:A:CYS214:OX)]
 currently queue= CX - OX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS214:CX, <Atom instance> ligcovalent:A:CYS214:OX)]
 processing queue entry:  CX - OX
in wBF with fromAtom= CX + startAtom= OX startAtom.used= 0
wBF: wrote  OX
self.outatom_counter= 19


writing and calling wL with nA= CX - 19
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 20
len( CX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []
 currently queue=
CX : OX : queue= []
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 21


writing and calling wL with nA= CX - 21
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 22
len( CX ).bonds= 1
skipping b= CX - CX
returning queue= []
newQ= []
 currently queue=
CX : CX : queue= []
wrote flex file ligcovalent_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: ligcovalent_flex.pdbqt
wrote rigid file: ligcovalent_rigid.pdbqt
4---done
setting PYTHONHOME environment
setting PYTHONHOME environment
!unable to use ligand.TORSDOF! torsdof always set to ligand.ndihe= 7
5---done
 concat 10 log files... done.
Job finished, good luck!
rm: 无法删除'chimera.com': 没有那个文件或目录
rm: 无法删除'tmp.mol2': 没有那个文件或目录
Done
Processing residue A:CYS66
[start] output filename is: ligcovalent_single.pdb
CHAIN A
Writing output filename: ligcovalent_single.pdb
1---ligcovalent.pdb prepared...
1.5--done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= fixed  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  fixed
merged  0  nonpolar hydrogens
end of base class init
using std outputfilename  fixed.pdbqt
wrote  fixed  to  fixed.pdbqt
2---done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= ligcovalent  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  ligcovalent
merged  21  nonpolar hydrogens
end of base class init
using std outputfilename  ligcovalent.pdbqt
wrote  ligcovalent  to  ligcovalent.pdbqt
3---done
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> fixed:A:CYS66 with 6 MolKit.molecule.Atom]
calling setAutoFlexFields with  fixed:A:CYS66
in setAutoFlexFields with  fixed:A:CYS66
len(rotatables)= 1
returning res.torscount= 1
res.root= CA
ntors= 1
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= fixed_flex.pdbqt
res_total= 1
in writeResidue with  fixed:A:CYS66
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS66:N, <Atom instance> fixed:A:CYS66:CA)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS66:CA, <Atom instance> fixed:A:CYS66:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS66:CA, <Atom instance> fixed:A:CYS66:CB)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3


writing and calling wL with nA= SG - 3
wBF2: wrote  SG
!!!2:calling wL


in writeLevel with  SG  outatom_counter= 4
len( SG ).bonds= 1
skipping b= CB - SG
returning queue= []
newQ= []
 currently queue=
CA : CB : queue= []
wrote flex file fixed_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: fixed_flex.pdbqt
wrote rigid file: fixed_rigid.pdbqt
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> ligcovalent:A:CYS66 with 28 MolKit.molecule.Atom]
calling setAutoFlexFields with  ligcovalent:A:CYS66
in setAutoFlexFields with  ligcovalent:A:CYS66
len(rotatables)= 8
returning res.torscount= 7
res.root= CA
ntors= 7
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= ligcovalent_flex.pdbqt
res_total= 7
in writeResidue with  ligcovalent:A:CYS66
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS66:N, <Atom instance> ligcovalent:A:CYS66:CA)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS66:CA, <Atom instance> ligcovalent:A:CYS66:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS66:CA, <Atom instance> ligcovalent:A:CYS66:C)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3
 currently queue= CB - SG ,
CA : CB : queue= [(<Atom instance> ligcovalent:A:CYS66:CB, <Atom instance> ligcovalent:A:CYS66:SG)]
 processing queue entry:  CB - SG
in wBF with fromAtom= CB + startAtom= SG startAtom.used= 0
wBF: wrote  SG
self.outatom_counter= 4
 currently queue= SG - CX ,
CB : SG : queue= [(<Atom instance> ligcovalent:A:CYS66:SG, <Atom instance> ligcovalent:A:CYS66:CX)]
 processing queue entry:  SG - CX
in wBF with fromAtom= SG + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 5
 currently queue= CX - CX ,
SG : CX : queue= [(<Atom instance> ligcovalent:A:CYS66:CX, <Atom instance> ligcovalent:A:CYS66:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 6
 currently queue= CX - CX , CX - CX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS66:CX, <Atom instance> ligcovalent:A:CYS66:CX), (<Atom instance> ligcovalent:A:CYS66:CX, <Atom instance> ligcovalent:A:CYS66:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 7


writing and calling wL with nA= OX - 7
wBF2: wrote  OX
!!!2:calling wL


in writeLevel with  OX  outatom_counter= 8
len( OX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []


writing and calling wL with nA= NX - 8
wBF2: wrote  NX
!!!2:calling wL


in writeLevel with  NX  outatom_counter= 9
len( NX ).bonds= 3
skipping b= NX - CX
processing b= NX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
processing b= CX - NX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 11
len( CX ).bonds= 2
skipping b= NX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 12
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 13
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 14
len( CX ).bonds= 3
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 15
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 16
len( CX ).bonds= 3
processing b= OX - CX  activeTors= 1
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
CX wL: queue= [(<Atom instance> ligcovalent:A:CYS66:CX, <Atom instance> ligcovalent:A:CYS66:OX)]
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 17
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 18
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS66:CX, <Atom instance> ligcovalent:A:CYS66:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS66:CX, <Atom instance> ligcovalent:A:CYS66:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS66:CX, <Atom instance> ligcovalent:A:CYS66:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS66:CX, <Atom instance> ligcovalent:A:CYS66:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS66:CX, <Atom instance> ligcovalent:A:CYS66:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS66:CX, <Atom instance> ligcovalent:A:CYS66:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS66:CX, <Atom instance> ligcovalent:A:CYS66:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS66:CX, <Atom instance> ligcovalent:A:CYS66:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS66:CX, <Atom instance> ligcovalent:A:CYS66:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS66:CX, <Atom instance> ligcovalent:A:CYS66:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS66:CX, <Atom instance> ligcovalent:A:CYS66:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS66:CX, <Atom instance> ligcovalent:A:CYS66:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 18
len( CX ).bonds= 3
skipping b= CX - CX
skipping b= CX - CX
skipping b= CX - NX
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS66:CX, <Atom instance> ligcovalent:A:CYS66:OX)]
newQ= [(<Atom instance> ligcovalent:A:CYS66:CX, <Atom instance> ligcovalent:A:CYS66:OX)]
@@@@len(newq)= 1
queue= [(<Atom instance> ligcovalent:A:CYS66:CX, <Atom instance> ligcovalent:A:CYS66:OX)]
 currently queue= CX - OX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS66:CX, <Atom instance> ligcovalent:A:CYS66:OX)]
 processing queue entry:  CX - OX
in wBF with fromAtom= CX + startAtom= OX startAtom.used= 0
wBF: wrote  OX
self.outatom_counter= 19


writing and calling wL with nA= CX - 19
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 20
len( CX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []
 currently queue=
CX : OX : queue= []
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 21


writing and calling wL with nA= CX - 21
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 22
len( CX ).bonds= 1
skipping b= CX - CX
returning queue= []
newQ= []
 currently queue=
CX : CX : queue= []
wrote flex file ligcovalent_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: ligcovalent_flex.pdbqt
wrote rigid file: ligcovalent_rigid.pdbqt
4---done
setting PYTHONHOME environment
setting PYTHONHOME environment
!unable to use ligand.TORSDOF! torsdof always set to ligand.ndihe= 7
5---done
 concat 10 log files... done.
Job finished, good luck!
rm: 无法删除'chimera.com': 没有那个文件或目录
rm: 无法删除'tmp.mol2': 没有那个文件或目录
Done
Processing residue A:CYS446
[start] output filename is: ligcovalent_single.pdb
CHAIN A
Writing output filename: ligcovalent_single.pdb
1---ligcovalent.pdb prepared...
1.5--done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= fixed  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  fixed
merged  0  nonpolar hydrogens
end of base class init
using std outputfilename  fixed.pdbqt
wrote  fixed  to  fixed.pdbqt
2---done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= ligcovalent  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  ligcovalent
merged  21  nonpolar hydrogens
end of base class init
using std outputfilename  ligcovalent.pdbqt
wrote  ligcovalent  to  ligcovalent.pdbqt
3---done
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> fixed:A:CYS446 with 6 MolKit.molecule.Atom]
calling setAutoFlexFields with  fixed:A:CYS446
in setAutoFlexFields with  fixed:A:CYS446
len(rotatables)= 1
returning res.torscount= 1
res.root= CA
ntors= 1
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= fixed_flex.pdbqt
res_total= 1
in writeResidue with  fixed:A:CYS446
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS446:N, <Atom instance> fixed:A:CYS446:CA)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS446:CA, <Atom instance> fixed:A:CYS446:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS446:CA, <Atom instance> fixed:A:CYS446:CB)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3


writing and calling wL with nA= SG - 3
wBF2: wrote  SG
!!!2:calling wL


in writeLevel with  SG  outatom_counter= 4
len( SG ).bonds= 1
skipping b= CB - SG
returning queue= []
newQ= []
 currently queue=
CA : CB : queue= []
wrote flex file fixed_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: fixed_flex.pdbqt
wrote rigid file: fixed_rigid.pdbqt
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> ligcovalent:A:CYS446 with 28 MolKit.molecule.Atom]
calling setAutoFlexFields with  ligcovalent:A:CYS446
in setAutoFlexFields with  ligcovalent:A:CYS446
len(rotatables)= 8
returning res.torscount= 7
res.root= CA
ntors= 7
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= ligcovalent_flex.pdbqt
res_total= 7
in writeResidue with  ligcovalent:A:CYS446
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS446:N, <Atom instance> ligcovalent:A:CYS446:CA)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS446:CA, <Atom instance> ligcovalent:A:CYS446:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS446:CA, <Atom instance> ligcovalent:A:CYS446:C)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3
 currently queue= CB - SG ,
CA : CB : queue= [(<Atom instance> ligcovalent:A:CYS446:CB, <Atom instance> ligcovalent:A:CYS446:SG)]
 processing queue entry:  CB - SG
in wBF with fromAtom= CB + startAtom= SG startAtom.used= 0
wBF: wrote  SG
self.outatom_counter= 4
 currently queue= SG - CX ,
CB : SG : queue= [(<Atom instance> ligcovalent:A:CYS446:SG, <Atom instance> ligcovalent:A:CYS446:CX)]
 processing queue entry:  SG - CX
in wBF with fromAtom= SG + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 5
 currently queue= CX - CX ,
SG : CX : queue= [(<Atom instance> ligcovalent:A:CYS446:CX, <Atom instance> ligcovalent:A:CYS446:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 6
 currently queue= CX - CX , CX - CX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS446:CX, <Atom instance> ligcovalent:A:CYS446:CX), (<Atom instance> ligcovalent:A:CYS446:CX, <Atom instance> ligcovalent:A:CYS446:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 7


writing and calling wL with nA= CX - 7
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 8
len( CX ).bonds= 1
skipping b= CX - CX
returning queue= []
newQ= []
 currently queue=
CX : CX : queue= []
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 9


writing and calling wL with nA= NX - 9
wBF2: wrote  NX
!!!2:calling wL


in writeLevel with  NX  outatom_counter= 10
len( NX ).bonds= 3
processing b= CX - NX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= NX - CX
processing b= NX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 12
len( CX ).bonds= 3
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - NX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 14
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 15
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 16
len( CX ).bonds= 3
processing b= OX - CX  activeTors= 1
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
CX wL: queue= [(<Atom instance> ligcovalent:A:CYS446:CX, <Atom instance> ligcovalent:A:CYS446:OX)]
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 17
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS446:CX, <Atom instance> ligcovalent:A:CYS446:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS446:CX, <Atom instance> ligcovalent:A:CYS446:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS446:CX, <Atom instance> ligcovalent:A:CYS446:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS446:CX, <Atom instance> ligcovalent:A:CYS446:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS446:CX, <Atom instance> ligcovalent:A:CYS446:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS446:CX, <Atom instance> ligcovalent:A:CYS446:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 17
len( CX ).bonds= 3
skipping b= CX - CX
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 18
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 19
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= []
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS446:CX, <Atom instance> ligcovalent:A:CYS446:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS446:CX, <Atom instance> ligcovalent:A:CYS446:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 19
len( CX ).bonds= 2
skipping b= NX - CX
skipping b= CX - CX
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS446:CX, <Atom instance> ligcovalent:A:CYS446:OX)]
newQ= [(<Atom instance> ligcovalent:A:CYS446:CX, <Atom instance> ligcovalent:A:CYS446:OX)]
@@@@len(newq)= 1
queue= [(<Atom instance> ligcovalent:A:CYS446:CX, <Atom instance> ligcovalent:A:CYS446:OX)]


writing and calling wL with nA= OX - 19
wBF2: wrote  OX
!!!2:calling wL


in writeLevel with  OX  outatom_counter= 20
len( OX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []
 currently queue= CX - OX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS446:CX, <Atom instance> ligcovalent:A:CYS446:OX)]
 processing queue entry:  CX - OX
in wBF with fromAtom= CX + startAtom= OX startAtom.used= 0
wBF: wrote  OX
self.outatom_counter= 21


writing and calling wL with nA= CX - 21
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 22
len( CX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []
 currently queue=
CX : OX : queue= []
wrote flex file ligcovalent_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: ligcovalent_flex.pdbqt
wrote rigid file: ligcovalent_rigid.pdbqt
4---done
setting PYTHONHOME environment
setting PYTHONHOME environment
!unable to use ligand.TORSDOF! torsdof always set to ligand.ndihe= 7
5---done
 concat 10 log files... done.
Job finished, good luck!
rm: 无法删除'chimera.com': 没有那个文件或目录
rm: 无法删除'tmp.mol2': 没有那个文件或目录
Done
Processing residue A:CYS31
[start] output filename is: ligcovalent_single.pdb
CHAIN A
Writing output filename: ligcovalent_single.pdb
1---ligcovalent.pdb prepared...
1.5--done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= fixed  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  fixed
merged  0  nonpolar hydrogens
end of base class init
using std outputfilename  fixed.pdbqt
wrote  fixed  to  fixed.pdbqt
2---done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= ligcovalent  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  ligcovalent
merged  21  nonpolar hydrogens
end of base class init
using std outputfilename  ligcovalent.pdbqt
wrote  ligcovalent  to  ligcovalent.pdbqt
3---done
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> fixed:A:CYS31 with 6 MolKit.molecule.Atom]
calling setAutoFlexFields with  fixed:A:CYS31
in setAutoFlexFields with  fixed:A:CYS31
len(rotatables)= 1
returning res.torscount= 1
res.root= CA
ntors= 1
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= fixed_flex.pdbqt
res_total= 1
in writeResidue with  fixed:A:CYS31
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS31:CA, <Atom instance> fixed:A:CYS31:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS31:CA, <Atom instance> fixed:A:CYS31:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS31:N, <Atom instance> fixed:A:CYS31:CA)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3


writing and calling wL with nA= SG - 3
wBF2: wrote  SG
!!!2:calling wL


in writeLevel with  SG  outatom_counter= 4
len( SG ).bonds= 1
skipping b= CB - SG
returning queue= []
newQ= []
 currently queue=
CA : CB : queue= []
wrote flex file fixed_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: fixed_flex.pdbqt
wrote rigid file: fixed_rigid.pdbqt
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> ligcovalent:A:CYS31 with 28 MolKit.molecule.Atom]
calling setAutoFlexFields with  ligcovalent:A:CYS31
in setAutoFlexFields with  ligcovalent:A:CYS31
len(rotatables)= 8
returning res.torscount= 7
res.root= CA
ntors= 7
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= ligcovalent_flex.pdbqt
res_total= 7
in writeResidue with  ligcovalent:A:CYS31
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS31:N, <Atom instance> ligcovalent:A:CYS31:CA)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS31:CA, <Atom instance> ligcovalent:A:CYS31:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS31:CA, <Atom instance> ligcovalent:A:CYS31:CB)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3
 currently queue= CB - SG ,
CA : CB : queue= [(<Atom instance> ligcovalent:A:CYS31:CB, <Atom instance> ligcovalent:A:CYS31:SG)]
 processing queue entry:  CB - SG
in wBF with fromAtom= CB + startAtom= SG startAtom.used= 0
wBF: wrote  SG
self.outatom_counter= 4
 currently queue= SG - CX ,
CB : SG : queue= [(<Atom instance> ligcovalent:A:CYS31:SG, <Atom instance> ligcovalent:A:CYS31:CX)]
 processing queue entry:  SG - CX
in wBF with fromAtom= SG + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 5
 currently queue= CX - CX ,
SG : CX : queue= [(<Atom instance> ligcovalent:A:CYS31:CX, <Atom instance> ligcovalent:A:CYS31:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 6
 currently queue= CX - CX , CX - CX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS31:CX, <Atom instance> ligcovalent:A:CYS31:CX), (<Atom instance> ligcovalent:A:CYS31:CX, <Atom instance> ligcovalent:A:CYS31:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 7


writing and calling wL with nA= OX - 7
wBF2: wrote  OX
!!!2:calling wL


in writeLevel with  OX  outatom_counter= 8
len( OX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []


writing and calling wL with nA= NX - 8
wBF2: wrote  NX
!!!2:calling wL


in writeLevel with  NX  outatom_counter= 9
len( NX ).bonds= 3
processing b= CX - NX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= NX - CX
processing b= NX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 11
len( CX ).bonds= 3
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - NX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 13
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 14
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 15
len( CX ).bonds= 3
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
processing b= OX - CX  activeTors= 1
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
CX wL: queue= [(<Atom instance> ligcovalent:A:CYS31:CX, <Atom instance> ligcovalent:A:CYS31:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 16
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS31:CX, <Atom instance> ligcovalent:A:CYS31:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS31:CX, <Atom instance> ligcovalent:A:CYS31:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS31:CX, <Atom instance> ligcovalent:A:CYS31:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS31:CX, <Atom instance> ligcovalent:A:CYS31:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS31:CX, <Atom instance> ligcovalent:A:CYS31:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS31:CX, <Atom instance> ligcovalent:A:CYS31:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 16
len( CX ).bonds= 3
skipping b= CX - CX
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 17
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 18
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= []
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS31:CX, <Atom instance> ligcovalent:A:CYS31:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS31:CX, <Atom instance> ligcovalent:A:CYS31:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 18
len( CX ).bonds= 2
skipping b= NX - CX
skipping b= CX - CX
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS31:CX, <Atom instance> ligcovalent:A:CYS31:OX)]
newQ= [(<Atom instance> ligcovalent:A:CYS31:CX, <Atom instance> ligcovalent:A:CYS31:OX)]
@@@@len(newq)= 1
queue= [(<Atom instance> ligcovalent:A:CYS31:CX, <Atom instance> ligcovalent:A:CYS31:OX)]
 currently queue= CX - OX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS31:CX, <Atom instance> ligcovalent:A:CYS31:OX)]
 processing queue entry:  CX - OX
in wBF with fromAtom= CX + startAtom= OX startAtom.used= 0
wBF: wrote  OX
self.outatom_counter= 19


writing and calling wL with nA= CX - 19
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 20
len( CX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []
 currently queue=
CX : OX : queue= []
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 21


writing and calling wL with nA= CX - 21
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 22
len( CX ).bonds= 1
skipping b= CX - CX
returning queue= []
newQ= []
 currently queue=
CX : CX : queue= []
wrote flex file ligcovalent_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: ligcovalent_flex.pdbqt
wrote rigid file: ligcovalent_rigid.pdbqt
4---done
setting PYTHONHOME environment
setting PYTHONHOME environment
!unable to use ligand.TORSDOF! torsdof always set to ligand.ndihe= 7
5---done
 concat 10 log files... done.
Job finished, good luck!
rm: 无法删除'chimera.com': 没有那个文件或目录
rm: 无法删除'tmp.mol2': 没有那个文件或目录
Done
Processing residue A:CYS184
[start] output filename is: ligcovalent_single.pdb
CHAIN A
Writing output filename: ligcovalent_single.pdb
1---ligcovalent.pdb prepared...
1.5--done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= fixed  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
Unable to assign MAP type to atom N
Sorry, there are no Gasteiger parameters available for atom fixed:A:HIS847:NE2
added gasteigercharges to  fixed
merged  0  nonpolar hydrogens
end of base class init
using std outputfilename  fixed.pdbqt
wrote  fixed  to  fixed.pdbqt
2---done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= ligcovalent  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  ligcovalent
merged  21  nonpolar hydrogens
end of base class init
using std outputfilename  ligcovalent.pdbqt
wrote  ligcovalent  to  ligcovalent.pdbqt
3---done
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> fixed:A:CYS184 with 6 MolKit.molecule.Atom]
calling setAutoFlexFields with  fixed:A:CYS184
in setAutoFlexFields with  fixed:A:CYS184
Unable to assign XYZ type to atom N
len(rotatables)= 1
returning res.torscount= 1
res.root= CA
ntors= 1
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= fixed_flex.pdbqt
res_total= 1
in writeResidue with  fixed:A:CYS184
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS184:CA, <Atom instance> fixed:A:CYS184:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS184:CA, <Atom instance> fixed:A:CYS184:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS184:N, <Atom instance> fixed:A:CYS184:CA)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3


writing and calling wL with nA= SG - 3
wBF2: wrote  SG
!!!2:calling wL


in writeLevel with  SG  outatom_counter= 4
len( SG ).bonds= 1
skipping b= CB - SG
returning queue= []
newQ= []
 currently queue=
CA : CB : queue= []
wrote flex file fixed_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: fixed_flex.pdbqt
wrote rigid file: fixed_rigid.pdbqt
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> ligcovalent:A:CYS184 with 28 MolKit.molecule.Atom]
calling setAutoFlexFields with  ligcovalent:A:CYS184
in setAutoFlexFields with  ligcovalent:A:CYS184
len(rotatables)= 8
returning res.torscount= 7
res.root= CA
ntors= 7
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= ligcovalent_flex.pdbqt
res_total= 7
in writeResidue with  ligcovalent:A:CYS184
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS184:CA, <Atom instance> ligcovalent:A:CYS184:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS184:CA, <Atom instance> ligcovalent:A:CYS184:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS184:N, <Atom instance> ligcovalent:A:CYS184:CA)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3
 currently queue= CB - SG ,
CA : CB : queue= [(<Atom instance> ligcovalent:A:CYS184:CB, <Atom instance> ligcovalent:A:CYS184:SG)]
 processing queue entry:  CB - SG
in wBF with fromAtom= CB + startAtom= SG startAtom.used= 0
wBF: wrote  SG
self.outatom_counter= 4
 currently queue= SG - CX ,
CB : SG : queue= [(<Atom instance> ligcovalent:A:CYS184:SG, <Atom instance> ligcovalent:A:CYS184:CX)]
 processing queue entry:  SG - CX
in wBF with fromAtom= SG + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 5
 currently queue= CX - CX ,
SG : CX : queue= [(<Atom instance> ligcovalent:A:CYS184:CX, <Atom instance> ligcovalent:A:CYS184:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 6
 currently queue= CX - CX , CX - CX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS184:CX, <Atom instance> ligcovalent:A:CYS184:CX), (<Atom instance> ligcovalent:A:CYS184:CX, <Atom instance> ligcovalent:A:CYS184:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 7


writing and calling wL with nA= OX - 7
wBF2: wrote  OX
!!!2:calling wL


in writeLevel with  OX  outatom_counter= 8
len( OX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []


writing and calling wL with nA= NX - 8
wBF2: wrote  NX
!!!2:calling wL


in writeLevel with  NX  outatom_counter= 9
len( NX ).bonds= 3
skipping b= NX - CX
processing b= NX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
processing b= CX - NX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 11
len( CX ).bonds= 2
skipping b= NX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 12
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 13
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 14
len( CX ).bonds= 3
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 15
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 16
len( CX ).bonds= 3
processing b= OX - CX  activeTors= 1
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
CX wL: queue= [(<Atom instance> ligcovalent:A:CYS184:CX, <Atom instance> ligcovalent:A:CYS184:OX)]
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 17
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 18
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS184:CX, <Atom instance> ligcovalent:A:CYS184:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS184:CX, <Atom instance> ligcovalent:A:CYS184:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS184:CX, <Atom instance> ligcovalent:A:CYS184:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS184:CX, <Atom instance> ligcovalent:A:CYS184:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS184:CX, <Atom instance> ligcovalent:A:CYS184:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS184:CX, <Atom instance> ligcovalent:A:CYS184:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS184:CX, <Atom instance> ligcovalent:A:CYS184:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS184:CX, <Atom instance> ligcovalent:A:CYS184:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS184:CX, <Atom instance> ligcovalent:A:CYS184:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS184:CX, <Atom instance> ligcovalent:A:CYS184:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS184:CX, <Atom instance> ligcovalent:A:CYS184:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS184:CX, <Atom instance> ligcovalent:A:CYS184:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 18
len( CX ).bonds= 3
skipping b= CX - CX
skipping b= CX - CX
skipping b= CX - NX
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS184:CX, <Atom instance> ligcovalent:A:CYS184:OX)]
newQ= [(<Atom instance> ligcovalent:A:CYS184:CX, <Atom instance> ligcovalent:A:CYS184:OX)]
@@@@len(newq)= 1
queue= [(<Atom instance> ligcovalent:A:CYS184:CX, <Atom instance> ligcovalent:A:CYS184:OX)]
 currently queue= CX - OX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS184:CX, <Atom instance> ligcovalent:A:CYS184:OX)]
 processing queue entry:  CX - OX
in wBF with fromAtom= CX + startAtom= OX startAtom.used= 0
wBF: wrote  OX
self.outatom_counter= 19


writing and calling wL with nA= CX - 19
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 20
len( CX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []
 currently queue=
CX : OX : queue= []
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 21


writing and calling wL with nA= CX - 21
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 22
len( CX ).bonds= 1
skipping b= CX - CX
returning queue= []
newQ= []
 currently queue=
CX : CX : queue= []
wrote flex file ligcovalent_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: ligcovalent_flex.pdbqt
wrote rigid file: ligcovalent_rigid.pdbqt
4---done
setting PYTHONHOME environment
setting PYTHONHOME environment
!unable to use ligand.TORSDOF! torsdof always set to ligand.ndihe= 7
5---done
 concat 10 log files... done.
Job finished, good luck!
rm: 无法删除'chimera.com': 没有那个文件或目录
rm: 无法删除'tmp.mol2': 没有那个文件或目录
Done
Processing residue A:CYS499
[start] output filename is: ligcovalent_single.pdb
CHAIN A
Writing output filename: ligcovalent_single.pdb
1---ligcovalent.pdb prepared...
1.5--done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= fixed  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  fixed
merged  0  nonpolar hydrogens
end of base class init
using std outputfilename  fixed.pdbqt
wrote  fixed  to  fixed.pdbqt
2---done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= ligcovalent  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  ligcovalent
merged  21  nonpolar hydrogens
end of base class init
using std outputfilename  ligcovalent.pdbqt
wrote  ligcovalent  to  ligcovalent.pdbqt
3---done
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> fixed:A:CYS499 with 6 MolKit.molecule.Atom]
calling setAutoFlexFields with  fixed:A:CYS499
in setAutoFlexFields with  fixed:A:CYS499
len(rotatables)= 1
returning res.torscount= 1
res.root= CA
ntors= 1
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= fixed_flex.pdbqt
res_total= 1
in writeResidue with  fixed:A:CYS499
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS499:CA, <Atom instance> fixed:A:CYS499:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS499:CA, <Atom instance> fixed:A:CYS499:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS499:N, <Atom instance> fixed:A:CYS499:CA)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3


writing and calling wL with nA= SG - 3
wBF2: wrote  SG
!!!2:calling wL


in writeLevel with  SG  outatom_counter= 4
len( SG ).bonds= 1
skipping b= CB - SG
returning queue= []
newQ= []
 currently queue=
CA : CB : queue= []
wrote flex file fixed_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: fixed_flex.pdbqt
wrote rigid file: fixed_rigid.pdbqt
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> ligcovalent:A:CYS499 with 28 MolKit.molecule.Atom]
calling setAutoFlexFields with  ligcovalent:A:CYS499
in setAutoFlexFields with  ligcovalent:A:CYS499
len(rotatables)= 8
returning res.torscount= 7
res.root= CA
ntors= 7
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= ligcovalent_flex.pdbqt
res_total= 7
in writeResidue with  ligcovalent:A:CYS499
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS499:CA, <Atom instance> ligcovalent:A:CYS499:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS499:CA, <Atom instance> ligcovalent:A:CYS499:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS499:N, <Atom instance> ligcovalent:A:CYS499:CA)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3
 currently queue= CB - SG ,
CA : CB : queue= [(<Atom instance> ligcovalent:A:CYS499:CB, <Atom instance> ligcovalent:A:CYS499:SG)]
 processing queue entry:  CB - SG
in wBF with fromAtom= CB + startAtom= SG startAtom.used= 0
wBF: wrote  SG
self.outatom_counter= 4
 currently queue= SG - CX ,
CB : SG : queue= [(<Atom instance> ligcovalent:A:CYS499:SG, <Atom instance> ligcovalent:A:CYS499:CX)]
 processing queue entry:  SG - CX
in wBF with fromAtom= SG + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 5
 currently queue= CX - CX ,
SG : CX : queue= [(<Atom instance> ligcovalent:A:CYS499:CX, <Atom instance> ligcovalent:A:CYS499:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 6
 currently queue= CX - CX , CX - CX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS499:CX, <Atom instance> ligcovalent:A:CYS499:CX), (<Atom instance> ligcovalent:A:CYS499:CX, <Atom instance> ligcovalent:A:CYS499:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 7


writing and calling wL with nA= OX - 7
wBF2: wrote  OX
!!!2:calling wL


in writeLevel with  OX  outatom_counter= 8
len( OX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []


writing and calling wL with nA= NX - 8
wBF2: wrote  NX
!!!2:calling wL


in writeLevel with  NX  outatom_counter= 9
len( NX ).bonds= 3
processing b= NX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= NX - CX
processing b= CX - NX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 11
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= NX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 12
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 13
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 14
len( CX ).bonds= 3
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 15
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 16
len( CX ).bonds= 3
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
processing b= OX - CX  activeTors= 1
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
CX wL: queue= [(<Atom instance> ligcovalent:A:CYS499:CX, <Atom instance> ligcovalent:A:CYS499:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 17
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 18
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS499:CX, <Atom instance> ligcovalent:A:CYS499:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS499:CX, <Atom instance> ligcovalent:A:CYS499:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS499:CX, <Atom instance> ligcovalent:A:CYS499:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS499:CX, <Atom instance> ligcovalent:A:CYS499:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS499:CX, <Atom instance> ligcovalent:A:CYS499:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS499:CX, <Atom instance> ligcovalent:A:CYS499:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS499:CX, <Atom instance> ligcovalent:A:CYS499:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS499:CX, <Atom instance> ligcovalent:A:CYS499:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS499:CX, <Atom instance> ligcovalent:A:CYS499:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS499:CX, <Atom instance> ligcovalent:A:CYS499:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS499:CX, <Atom instance> ligcovalent:A:CYS499:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS499:CX, <Atom instance> ligcovalent:A:CYS499:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 18
len( CX ).bonds= 3
skipping b= CX - CX
skipping b= CX - NX
skipping b= CX - CX
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS499:CX, <Atom instance> ligcovalent:A:CYS499:OX)]
newQ= [(<Atom instance> ligcovalent:A:CYS499:CX, <Atom instance> ligcovalent:A:CYS499:OX)]
@@@@len(newq)= 1
queue= [(<Atom instance> ligcovalent:A:CYS499:CX, <Atom instance> ligcovalent:A:CYS499:OX)]
 currently queue= CX - OX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS499:CX, <Atom instance> ligcovalent:A:CYS499:OX)]
 processing queue entry:  CX - OX
in wBF with fromAtom= CX + startAtom= OX startAtom.used= 0
wBF: wrote  OX
self.outatom_counter= 19


writing and calling wL with nA= CX - 19
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 20
len( CX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []
 currently queue=
CX : OX : queue= []
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 21


writing and calling wL with nA= CX - 21
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 22
len( CX ).bonds= 1
skipping b= CX - CX
returning queue= []
newQ= []
 currently queue=
CX : CX : queue= []
wrote flex file ligcovalent_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: ligcovalent_flex.pdbqt
wrote rigid file: ligcovalent_rigid.pdbqt
4---done
setting PYTHONHOME environment
setting PYTHONHOME environment
!unable to use ligand.TORSDOF! torsdof always set to ligand.ndihe= 7
5---done
 concat 10 log files... done.
Job finished, good luck!
rm: 无法删除'chimera.com': 没有那个文件或目录
rm: 无法删除'tmp.mol2': 没有那个文件或目录
Done
Processing residue A:CYS153
[start] output filename is: ligcovalent_single.pdb
CHAIN A
Writing output filename: ligcovalent_single.pdb
1---ligcovalent.pdb prepared...
1.5--done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= fixed  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  fixed
merged  0  nonpolar hydrogens
end of base class init
using std outputfilename  fixed.pdbqt
wrote  fixed  to  fixed.pdbqt
2---done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= ligcovalent  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  ligcovalent
merged  21  nonpolar hydrogens
end of base class init
using std outputfilename  ligcovalent.pdbqt
wrote  ligcovalent  to  ligcovalent.pdbqt
3---done
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> fixed:A:CYS153 with 6 MolKit.molecule.Atom]
calling setAutoFlexFields with  fixed:A:CYS153
in setAutoFlexFields with  fixed:A:CYS153
len(rotatables)= 1
returning res.torscount= 1
res.root= CA
ntors= 1
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= fixed_flex.pdbqt
res_total= 1
in writeResidue with  fixed:A:CYS153
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS153:N, <Atom instance> fixed:A:CYS153:CA)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS153:CA, <Atom instance> fixed:A:CYS153:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS153:CA, <Atom instance> fixed:A:CYS153:CB)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3


writing and calling wL with nA= SG - 3
wBF2: wrote  SG
!!!2:calling wL


in writeLevel with  SG  outatom_counter= 4
len( SG ).bonds= 1
skipping b= CB - SG
returning queue= []
newQ= []
 currently queue=
CA : CB : queue= []
wrote flex file fixed_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: fixed_flex.pdbqt
wrote rigid file: fixed_rigid.pdbqt
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> ligcovalent:A:CYS153 with 28 MolKit.molecule.Atom]
calling setAutoFlexFields with  ligcovalent:A:CYS153
in setAutoFlexFields with  ligcovalent:A:CYS153
len(rotatables)= 8
returning res.torscount= 7
res.root= CA
ntors= 7
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= ligcovalent_flex.pdbqt
res_total= 7
in writeResidue with  ligcovalent:A:CYS153
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS153:N, <Atom instance> ligcovalent:A:CYS153:CA)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS153:CA, <Atom instance> ligcovalent:A:CYS153:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS153:CA, <Atom instance> ligcovalent:A:CYS153:C)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3
 currently queue= CB - SG ,
CA : CB : queue= [(<Atom instance> ligcovalent:A:CYS153:CB, <Atom instance> ligcovalent:A:CYS153:SG)]
 processing queue entry:  CB - SG
in wBF with fromAtom= CB + startAtom= SG startAtom.used= 0
wBF: wrote  SG
self.outatom_counter= 4
 currently queue= SG - CX ,
CB : SG : queue= [(<Atom instance> ligcovalent:A:CYS153:SG, <Atom instance> ligcovalent:A:CYS153:CX)]
 processing queue entry:  SG - CX
in wBF with fromAtom= SG + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 5
 currently queue= CX - CX ,
SG : CX : queue= [(<Atom instance> ligcovalent:A:CYS153:CX, <Atom instance> ligcovalent:A:CYS153:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 6
 currently queue= CX - CX , CX - CX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS153:CX, <Atom instance> ligcovalent:A:CYS153:CX), (<Atom instance> ligcovalent:A:CYS153:CX, <Atom instance> ligcovalent:A:CYS153:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 7


writing and calling wL with nA= OX - 7
wBF2: wrote  OX
!!!2:calling wL


in writeLevel with  OX  outatom_counter= 8
len( OX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []


writing and calling wL with nA= NX - 8
wBF2: wrote  NX
!!!2:calling wL


in writeLevel with  NX  outatom_counter= 9
len( NX ).bonds= 3
processing b= CX - NX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= NX - CX
processing b= NX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 11
len( CX ).bonds= 3
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - NX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 13
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 14
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 15
len( CX ).bonds= 3
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
processing b= OX - CX  activeTors= 1
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
CX wL: queue= [(<Atom instance> ligcovalent:A:CYS153:CX, <Atom instance> ligcovalent:A:CYS153:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 16
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS153:CX, <Atom instance> ligcovalent:A:CYS153:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS153:CX, <Atom instance> ligcovalent:A:CYS153:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS153:CX, <Atom instance> ligcovalent:A:CYS153:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS153:CX, <Atom instance> ligcovalent:A:CYS153:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS153:CX, <Atom instance> ligcovalent:A:CYS153:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS153:CX, <Atom instance> ligcovalent:A:CYS153:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 16
len( CX ).bonds= 3
skipping b= CX - CX
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 17
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 18
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= []
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS153:CX, <Atom instance> ligcovalent:A:CYS153:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS153:CX, <Atom instance> ligcovalent:A:CYS153:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 18
len( CX ).bonds= 2
skipping b= NX - CX
skipping b= CX - CX
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS153:CX, <Atom instance> ligcovalent:A:CYS153:OX)]
newQ= [(<Atom instance> ligcovalent:A:CYS153:CX, <Atom instance> ligcovalent:A:CYS153:OX)]
@@@@len(newq)= 1
queue= [(<Atom instance> ligcovalent:A:CYS153:CX, <Atom instance> ligcovalent:A:CYS153:OX)]
 currently queue= CX - OX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS153:CX, <Atom instance> ligcovalent:A:CYS153:OX)]
 processing queue entry:  CX - OX
in wBF with fromAtom= CX + startAtom= OX startAtom.used= 0
wBF: wrote  OX
self.outatom_counter= 19


writing and calling wL with nA= CX - 19
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 20
len( CX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []
 currently queue=
CX : OX : queue= []
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 21


writing and calling wL with nA= CX - 21
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 22
len( CX ).bonds= 1
skipping b= CX - CX
returning queue= []
newQ= []
 currently queue=
CX : CX : queue= []
wrote flex file ligcovalent_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: ligcovalent_flex.pdbqt
wrote rigid file: ligcovalent_rigid.pdbqt
4---done
setting PYTHONHOME environment
setting PYTHONHOME environment
!unable to use ligand.TORSDOF! torsdof always set to ligand.ndihe= 7
5---done
 concat 10 log files... done.
Job finished, good luck!
rm: 无法删除'chimera.com': 没有那个文件或目录
rm: 无法删除'tmp.mol2': 没有那个文件或目录
Done
Processing residue A:CYS129
[start] output filename is: ligcovalent_single.pdb
CHAIN A
Writing output filename: ligcovalent_single.pdb
1---ligcovalent.pdb prepared...
1.5--done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= fixed  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  fixed
merged  0  nonpolar hydrogens
end of base class init
using std outputfilename  fixed.pdbqt
wrote  fixed  to  fixed.pdbqt
2---done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= ligcovalent  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  ligcovalent
merged  21  nonpolar hydrogens
end of base class init
using std outputfilename  ligcovalent.pdbqt
wrote  ligcovalent  to  ligcovalent.pdbqt
3---done
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> fixed:A:CYS129 with 6 MolKit.molecule.Atom]
calling setAutoFlexFields with  fixed:A:CYS129
in setAutoFlexFields with  fixed:A:CYS129
len(rotatables)= 1
returning res.torscount= 1
res.root= CA
ntors= 1
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= fixed_flex.pdbqt
res_total= 1
in writeResidue with  fixed:A:CYS129
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS129:N, <Atom instance> fixed:A:CYS129:CA)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS129:CA, <Atom instance> fixed:A:CYS129:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS129:CA, <Atom instance> fixed:A:CYS129:C)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3


writing and calling wL with nA= SG - 3
wBF2: wrote  SG
!!!2:calling wL


in writeLevel with  SG  outatom_counter= 4
len( SG ).bonds= 1
skipping b= CB - SG
returning queue= []
newQ= []
 currently queue=
CA : CB : queue= []
wrote flex file fixed_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: fixed_flex.pdbqt
wrote rigid file: fixed_rigid.pdbqt
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> ligcovalent:A:CYS129 with 28 MolKit.molecule.Atom]
calling setAutoFlexFields with  ligcovalent:A:CYS129
in setAutoFlexFields with  ligcovalent:A:CYS129
len(rotatables)= 8
returning res.torscount= 7
res.root= CA
ntors= 7
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= ligcovalent_flex.pdbqt
res_total= 7
in writeResidue with  ligcovalent:A:CYS129
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS129:CA, <Atom instance> ligcovalent:A:CYS129:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS129:CA, <Atom instance> ligcovalent:A:CYS129:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS129:N, <Atom instance> ligcovalent:A:CYS129:CA)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3
 currently queue= CB - SG ,
CA : CB : queue= [(<Atom instance> ligcovalent:A:CYS129:CB, <Atom instance> ligcovalent:A:CYS129:SG)]
 processing queue entry:  CB - SG
in wBF with fromAtom= CB + startAtom= SG startAtom.used= 0
wBF: wrote  SG
self.outatom_counter= 4
 currently queue= SG - CX ,
CB : SG : queue= [(<Atom instance> ligcovalent:A:CYS129:SG, <Atom instance> ligcovalent:A:CYS129:CX)]
 processing queue entry:  SG - CX
in wBF with fromAtom= SG + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 5
 currently queue= CX - CX ,
SG : CX : queue= [(<Atom instance> ligcovalent:A:CYS129:CX, <Atom instance> ligcovalent:A:CYS129:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 6
 currently queue= CX - CX , CX - CX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS129:CX, <Atom instance> ligcovalent:A:CYS129:CX), (<Atom instance> ligcovalent:A:CYS129:CX, <Atom instance> ligcovalent:A:CYS129:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 7


writing and calling wL with nA= NX - 7
wBF2: wrote  NX
!!!2:calling wL


in writeLevel with  NX  outatom_counter= 8
len( NX ).bonds= 3
processing b= NX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= NX - CX
processing b= CX - NX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 10
len( CX ).bonds= 2
skipping b= NX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 11
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 12
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 13
len( CX ).bonds= 3
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 14
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 15
len( CX ).bonds= 3
processing b= OX - CX  activeTors= 1
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
CX wL: queue= [(<Atom instance> ligcovalent:A:CYS129:CX, <Atom instance> ligcovalent:A:CYS129:OX)]
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 16
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 17
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS129:CX, <Atom instance> ligcovalent:A:CYS129:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS129:CX, <Atom instance> ligcovalent:A:CYS129:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS129:CX, <Atom instance> ligcovalent:A:CYS129:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS129:CX, <Atom instance> ligcovalent:A:CYS129:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS129:CX, <Atom instance> ligcovalent:A:CYS129:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS129:CX, <Atom instance> ligcovalent:A:CYS129:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS129:CX, <Atom instance> ligcovalent:A:CYS129:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS129:CX, <Atom instance> ligcovalent:A:CYS129:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS129:CX, <Atom instance> ligcovalent:A:CYS129:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS129:CX, <Atom instance> ligcovalent:A:CYS129:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS129:CX, <Atom instance> ligcovalent:A:CYS129:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS129:CX, <Atom instance> ligcovalent:A:CYS129:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 17
len( CX ).bonds= 3
skipping b= CX - CX
skipping b= CX - CX
skipping b= CX - NX
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS129:CX, <Atom instance> ligcovalent:A:CYS129:OX)]
newQ= [(<Atom instance> ligcovalent:A:CYS129:CX, <Atom instance> ligcovalent:A:CYS129:OX)]
@@@@len(newq)= 1
queue= [(<Atom instance> ligcovalent:A:CYS129:CX, <Atom instance> ligcovalent:A:CYS129:OX)]


writing and calling wL with nA= OX - 17
wBF2: wrote  OX
!!!2:calling wL


in writeLevel with  OX  outatom_counter= 18
len( OX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []
 currently queue= CX - OX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS129:CX, <Atom instance> ligcovalent:A:CYS129:OX)]
 processing queue entry:  CX - OX
in wBF with fromAtom= CX + startAtom= OX startAtom.used= 0
wBF: wrote  OX
self.outatom_counter= 19


writing and calling wL with nA= CX - 19
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 20
len( CX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []
 currently queue=
CX : OX : queue= []
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 21


writing and calling wL with nA= CX - 21
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 22
len( CX ).bonds= 1
skipping b= CX - CX
returning queue= []
newQ= []
 currently queue=
CX : CX : queue= []
wrote flex file ligcovalent_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: ligcovalent_flex.pdbqt
wrote rigid file: ligcovalent_rigid.pdbqt
4---done
setting PYTHONHOME environment
setting PYTHONHOME environment
!unable to use ligand.TORSDOF! torsdof always set to ligand.ndihe= 7
5---done
 concat 10 log files... done.
Job finished, good luck!
rm: 无法删除'chimera.com': 没有那个文件或目录
rm: 无法删除'tmp.mol2': 没有那个文件或目录
Done
Processing residue A:CYS511
[start] output filename is: ligcovalent_single.pdb
CHAIN A
Writing output filename: ligcovalent_single.pdb
1---ligcovalent.pdb prepared...
1.5--done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= fixed  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  fixed
merged  0  nonpolar hydrogens
end of base class init
using std outputfilename  fixed.pdbqt
wrote  fixed  to  fixed.pdbqt
2---done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= ligcovalent  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  ligcovalent
merged  21  nonpolar hydrogens
end of base class init
using std outputfilename  ligcovalent.pdbqt
wrote  ligcovalent  to  ligcovalent.pdbqt
3---done
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> fixed:A:CYS511 with 6 MolKit.molecule.Atom]
calling setAutoFlexFields with  fixed:A:CYS511
in setAutoFlexFields with  fixed:A:CYS511
len(rotatables)= 1
returning res.torscount= 1
res.root= CA
ntors= 1
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= fixed_flex.pdbqt
res_total= 1
in writeResidue with  fixed:A:CYS511
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS511:CA, <Atom instance> fixed:A:CYS511:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS511:CA, <Atom instance> fixed:A:CYS511:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS511:N, <Atom instance> fixed:A:CYS511:CA)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3


writing and calling wL with nA= SG - 3
wBF2: wrote  SG
!!!2:calling wL


in writeLevel with  SG  outatom_counter= 4
len( SG ).bonds= 1
skipping b= CB - SG
returning queue= []
newQ= []
 currently queue=
CA : CB : queue= []
wrote flex file fixed_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: fixed_flex.pdbqt
wrote rigid file: fixed_rigid.pdbqt
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> ligcovalent:A:CYS511 with 28 MolKit.molecule.Atom]
calling setAutoFlexFields with  ligcovalent:A:CYS511
in setAutoFlexFields with  ligcovalent:A:CYS511
len(rotatables)= 8
returning res.torscount= 7
res.root= CA
ntors= 7
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= ligcovalent_flex.pdbqt
res_total= 7
in writeResidue with  ligcovalent:A:CYS511
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS511:CA, <Atom instance> ligcovalent:A:CYS511:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS511:CA, <Atom instance> ligcovalent:A:CYS511:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS511:N, <Atom instance> ligcovalent:A:CYS511:CA)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3
 currently queue= CB - SG ,
CA : CB : queue= [(<Atom instance> ligcovalent:A:CYS511:CB, <Atom instance> ligcovalent:A:CYS511:SG)]
 processing queue entry:  CB - SG
in wBF with fromAtom= CB + startAtom= SG startAtom.used= 0
wBF: wrote  SG
self.outatom_counter= 4
 currently queue= SG - CX ,
CB : SG : queue= [(<Atom instance> ligcovalent:A:CYS511:SG, <Atom instance> ligcovalent:A:CYS511:CX)]
 processing queue entry:  SG - CX
in wBF with fromAtom= SG + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 5
 currently queue= CX - CX ,
SG : CX : queue= [(<Atom instance> ligcovalent:A:CYS511:CX, <Atom instance> ligcovalent:A:CYS511:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 6
 currently queue= CX - CX , CX - CX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS511:CX, <Atom instance> ligcovalent:A:CYS511:CX), (<Atom instance> ligcovalent:A:CYS511:CX, <Atom instance> ligcovalent:A:CYS511:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 7


writing and calling wL with nA= CX - 7
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 8
len( CX ).bonds= 1
skipping b= CX - CX
returning queue= []
newQ= []
 currently queue=
CX : CX : queue= []
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 9


writing and calling wL with nA= NX - 9
wBF2: wrote  NX
!!!2:calling wL


in writeLevel with  NX  outatom_counter= 10
len( NX ).bonds= 3
processing b= NX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= NX - CX
processing b= CX - NX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 12
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= NX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 13
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 14
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 15
len( CX ).bonds= 3
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 16
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 17
len( CX ).bonds= 3
processing b= OX - CX  activeTors= 1
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
CX wL: queue= [(<Atom instance> ligcovalent:A:CYS511:CX, <Atom instance> ligcovalent:A:CYS511:OX)]
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 18
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 19
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS511:CX, <Atom instance> ligcovalent:A:CYS511:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS511:CX, <Atom instance> ligcovalent:A:CYS511:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS511:CX, <Atom instance> ligcovalent:A:CYS511:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS511:CX, <Atom instance> ligcovalent:A:CYS511:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS511:CX, <Atom instance> ligcovalent:A:CYS511:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS511:CX, <Atom instance> ligcovalent:A:CYS511:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS511:CX, <Atom instance> ligcovalent:A:CYS511:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS511:CX, <Atom instance> ligcovalent:A:CYS511:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS511:CX, <Atom instance> ligcovalent:A:CYS511:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS511:CX, <Atom instance> ligcovalent:A:CYS511:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS511:CX, <Atom instance> ligcovalent:A:CYS511:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS511:CX, <Atom instance> ligcovalent:A:CYS511:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 19
len( CX ).bonds= 3
skipping b= CX - CX
skipping b= CX - NX
skipping b= CX - CX
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS511:CX, <Atom instance> ligcovalent:A:CYS511:OX)]
newQ= [(<Atom instance> ligcovalent:A:CYS511:CX, <Atom instance> ligcovalent:A:CYS511:OX)]
@@@@len(newq)= 1
queue= [(<Atom instance> ligcovalent:A:CYS511:CX, <Atom instance> ligcovalent:A:CYS511:OX)]


writing and calling wL with nA= OX - 19
wBF2: wrote  OX
!!!2:calling wL


in writeLevel with  OX  outatom_counter= 20
len( OX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []
 currently queue= CX - OX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS511:CX, <Atom instance> ligcovalent:A:CYS511:OX)]
 processing queue entry:  CX - OX
in wBF with fromAtom= CX + startAtom= OX startAtom.used= 0
wBF: wrote  OX
self.outatom_counter= 21


writing and calling wL with nA= CX - 21
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 22
len( CX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []
 currently queue=
CX : OX : queue= []
wrote flex file ligcovalent_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: ligcovalent_flex.pdbqt
wrote rigid file: ligcovalent_rigid.pdbqt
4---done
setting PYTHONHOME environment
setting PYTHONHOME environment
!unable to use ligand.TORSDOF! torsdof always set to ligand.ndihe= 7
5---done
 concat 10 log files... done.
Job finished, good luck!
rm: 无法删除'chimera.com': 没有那个文件或目录
rm: 无法删除'tmp.mol2': 没有那个文件或目录
Done
Processing residue A:CYS183
[start] output filename is: ligcovalent_single.pdb
CHAIN A
Writing output filename: ligcovalent_single.pdb
1---ligcovalent.pdb prepared...
1.5--done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= fixed  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  fixed
merged  0  nonpolar hydrogens
end of base class init
using std outputfilename  fixed.pdbqt
wrote  fixed  to  fixed.pdbqt
2---done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= ligcovalent  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  ligcovalent
merged  21  nonpolar hydrogens
end of base class init
using std outputfilename  ligcovalent.pdbqt
wrote  ligcovalent  to  ligcovalent.pdbqt
3---done
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> fixed:A:CYS183 with 6 MolKit.molecule.Atom]
calling setAutoFlexFields with  fixed:A:CYS183
in setAutoFlexFields with  fixed:A:CYS183
len(rotatables)= 1
returning res.torscount= 1
res.root= CA
ntors= 1
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= fixed_flex.pdbqt
res_total= 1
in writeResidue with  fixed:A:CYS183
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS183:N, <Atom instance> fixed:A:CYS183:CA)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS183:CA, <Atom instance> fixed:A:CYS183:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS183:CA, <Atom instance> fixed:A:CYS183:C)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3


writing and calling wL with nA= SG - 3
wBF2: wrote  SG
!!!2:calling wL


in writeLevel with  SG  outatom_counter= 4
len( SG ).bonds= 1
skipping b= CB - SG
returning queue= []
newQ= []
 currently queue=
CA : CB : queue= []
wrote flex file fixed_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: fixed_flex.pdbqt
wrote rigid file: fixed_rigid.pdbqt
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> ligcovalent:A:CYS183 with 28 MolKit.molecule.Atom]
calling setAutoFlexFields with  ligcovalent:A:CYS183
in setAutoFlexFields with  ligcovalent:A:CYS183
len(rotatables)= 8
returning res.torscount= 7
res.root= CA
ntors= 7
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= ligcovalent_flex.pdbqt
res_total= 7
in writeResidue with  ligcovalent:A:CYS183
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS183:N, <Atom instance> ligcovalent:A:CYS183:CA)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS183:CA, <Atom instance> ligcovalent:A:CYS183:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS183:CA, <Atom instance> ligcovalent:A:CYS183:CB)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3
 currently queue= CB - SG ,
CA : CB : queue= [(<Atom instance> ligcovalent:A:CYS183:CB, <Atom instance> ligcovalent:A:CYS183:SG)]
 processing queue entry:  CB - SG
in wBF with fromAtom= CB + startAtom= SG startAtom.used= 0
wBF: wrote  SG
self.outatom_counter= 4
 currently queue= SG - CX ,
CB : SG : queue= [(<Atom instance> ligcovalent:A:CYS183:SG, <Atom instance> ligcovalent:A:CYS183:CX)]
 processing queue entry:  SG - CX
in wBF with fromAtom= SG + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 5
 currently queue= CX - CX ,
SG : CX : queue= [(<Atom instance> ligcovalent:A:CYS183:CX, <Atom instance> ligcovalent:A:CYS183:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 6
 currently queue= CX - CX , CX - CX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS183:CX, <Atom instance> ligcovalent:A:CYS183:CX), (<Atom instance> ligcovalent:A:CYS183:CX, <Atom instance> ligcovalent:A:CYS183:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 7


writing and calling wL with nA= NX - 7
wBF2: wrote  NX
!!!2:calling wL


in writeLevel with  NX  outatom_counter= 8
len( NX ).bonds= 3
processing b= NX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= NX - CX
processing b= CX - NX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 10
len( CX ).bonds= 2
skipping b= NX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 11
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 12
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 13
len( CX ).bonds= 3
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 14
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 15
len( CX ).bonds= 3
processing b= OX - CX  activeTors= 1
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
CX wL: queue= [(<Atom instance> ligcovalent:A:CYS183:CX, <Atom instance> ligcovalent:A:CYS183:OX)]
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 16
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 17
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS183:CX, <Atom instance> ligcovalent:A:CYS183:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS183:CX, <Atom instance> ligcovalent:A:CYS183:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS183:CX, <Atom instance> ligcovalent:A:CYS183:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS183:CX, <Atom instance> ligcovalent:A:CYS183:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS183:CX, <Atom instance> ligcovalent:A:CYS183:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS183:CX, <Atom instance> ligcovalent:A:CYS183:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS183:CX, <Atom instance> ligcovalent:A:CYS183:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS183:CX, <Atom instance> ligcovalent:A:CYS183:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS183:CX, <Atom instance> ligcovalent:A:CYS183:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS183:CX, <Atom instance> ligcovalent:A:CYS183:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS183:CX, <Atom instance> ligcovalent:A:CYS183:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS183:CX, <Atom instance> ligcovalent:A:CYS183:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 17
len( CX ).bonds= 3
skipping b= CX - CX
skipping b= CX - NX
skipping b= CX - CX
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS183:CX, <Atom instance> ligcovalent:A:CYS183:OX)]
newQ= [(<Atom instance> ligcovalent:A:CYS183:CX, <Atom instance> ligcovalent:A:CYS183:OX)]
@@@@len(newq)= 1
queue= [(<Atom instance> ligcovalent:A:CYS183:CX, <Atom instance> ligcovalent:A:CYS183:OX)]


writing and calling wL with nA= OX - 17
wBF2: wrote  OX
!!!2:calling wL


in writeLevel with  OX  outatom_counter= 18
len( OX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []
 currently queue= CX - OX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS183:CX, <Atom instance> ligcovalent:A:CYS183:OX)]
 processing queue entry:  CX - OX
in wBF with fromAtom= CX + startAtom= OX startAtom.used= 0
wBF: wrote  OX
self.outatom_counter= 19


writing and calling wL with nA= CX - 19
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 20
len( CX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []
 currently queue=
CX : OX : queue= []
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 21


writing and calling wL with nA= CX - 21
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 22
len( CX ).bonds= 1
skipping b= CX - CX
returning queue= []
newQ= []
 currently queue=
CX : CX : queue= []
wrote flex file ligcovalent_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: ligcovalent_flex.pdbqt
wrote rigid file: ligcovalent_rigid.pdbqt
4---done
setting PYTHONHOME environment
setting PYTHONHOME environment
!unable to use ligand.TORSDOF! torsdof always set to ligand.ndihe= 7
5---done
 concat 10 log files... done.
Job finished, good luck!
rm: 无法删除'chimera.com': 没有那个文件或目录
rm: 无法删除'tmp.mol2': 没有那个文件或目录
Done
Processing residue A:CYS300
[start] output filename is: ligcovalent_single.pdb
CHAIN A
Writing output filename: ligcovalent_single.pdb
1---ligcovalent.pdb prepared...
1.5--done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= fixed  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  fixed
merged  0  nonpolar hydrogens
end of base class init
using std outputfilename  fixed.pdbqt
wrote  fixed  to  fixed.pdbqt
2---done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= ligcovalent  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  ligcovalent
merged  21  nonpolar hydrogens
end of base class init
using std outputfilename  ligcovalent.pdbqt
wrote  ligcovalent  to  ligcovalent.pdbqt
3---done
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> fixed:A:CYS300 with 6 MolKit.molecule.Atom]
calling setAutoFlexFields with  fixed:A:CYS300
in setAutoFlexFields with  fixed:A:CYS300
len(rotatables)= 1
returning res.torscount= 1
res.root= CA
ntors= 1
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= fixed_flex.pdbqt
res_total= 1
in writeResidue with  fixed:A:CYS300
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS300:CA, <Atom instance> fixed:A:CYS300:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS300:CA, <Atom instance> fixed:A:CYS300:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS300:N, <Atom instance> fixed:A:CYS300:CA)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3


writing and calling wL with nA= SG - 3
wBF2: wrote  SG
!!!2:calling wL


in writeLevel with  SG  outatom_counter= 4
len( SG ).bonds= 1
skipping b= CB - SG
returning queue= []
newQ= []
 currently queue=
CA : CB : queue= []
wrote flex file fixed_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: fixed_flex.pdbqt
wrote rigid file: fixed_rigid.pdbqt
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> ligcovalent:A:CYS300 with 28 MolKit.molecule.Atom]
calling setAutoFlexFields with  ligcovalent:A:CYS300
in setAutoFlexFields with  ligcovalent:A:CYS300
len(rotatables)= 8
returning res.torscount= 7
res.root= CA
ntors= 7
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= ligcovalent_flex.pdbqt
res_total= 7
in writeResidue with  ligcovalent:A:CYS300
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS300:N, <Atom instance> ligcovalent:A:CYS300:CA)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS300:CA, <Atom instance> ligcovalent:A:CYS300:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS300:CA, <Atom instance> ligcovalent:A:CYS300:C)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3
 currently queue= CB - SG ,
CA : CB : queue= [(<Atom instance> ligcovalent:A:CYS300:CB, <Atom instance> ligcovalent:A:CYS300:SG)]
 processing queue entry:  CB - SG
in wBF with fromAtom= CB + startAtom= SG startAtom.used= 0
wBF: wrote  SG
self.outatom_counter= 4
 currently queue= SG - CX ,
CB : SG : queue= [(<Atom instance> ligcovalent:A:CYS300:SG, <Atom instance> ligcovalent:A:CYS300:CX)]
 processing queue entry:  SG - CX
in wBF with fromAtom= SG + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 5
 currently queue= CX - CX ,
SG : CX : queue= [(<Atom instance> ligcovalent:A:CYS300:CX, <Atom instance> ligcovalent:A:CYS300:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 6
 currently queue= CX - CX , CX - CX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS300:CX, <Atom instance> ligcovalent:A:CYS300:CX), (<Atom instance> ligcovalent:A:CYS300:CX, <Atom instance> ligcovalent:A:CYS300:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 7


writing and calling wL with nA= OX - 7
wBF2: wrote  OX
!!!2:calling wL


in writeLevel with  OX  outatom_counter= 8
len( OX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []


writing and calling wL with nA= NX - 8
wBF2: wrote  NX
!!!2:calling wL


in writeLevel with  NX  outatom_counter= 9
len( NX ).bonds= 3
processing b= CX - NX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= NX - CX
processing b= NX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 11
len( CX ).bonds= 3
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - NX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 13
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 14
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 15
len( CX ).bonds= 3
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
processing b= OX - CX  activeTors= 1
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
CX wL: queue= [(<Atom instance> ligcovalent:A:CYS300:CX, <Atom instance> ligcovalent:A:CYS300:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 16
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS300:CX, <Atom instance> ligcovalent:A:CYS300:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS300:CX, <Atom instance> ligcovalent:A:CYS300:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS300:CX, <Atom instance> ligcovalent:A:CYS300:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS300:CX, <Atom instance> ligcovalent:A:CYS300:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS300:CX, <Atom instance> ligcovalent:A:CYS300:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS300:CX, <Atom instance> ligcovalent:A:CYS300:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 16
len( CX ).bonds= 3
skipping b= CX - CX
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 17
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 18
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= []
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS300:CX, <Atom instance> ligcovalent:A:CYS300:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS300:CX, <Atom instance> ligcovalent:A:CYS300:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 18
len( CX ).bonds= 2
skipping b= NX - CX
skipping b= CX - CX
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS300:CX, <Atom instance> ligcovalent:A:CYS300:OX)]
newQ= [(<Atom instance> ligcovalent:A:CYS300:CX, <Atom instance> ligcovalent:A:CYS300:OX)]
@@@@len(newq)= 1
queue= [(<Atom instance> ligcovalent:A:CYS300:CX, <Atom instance> ligcovalent:A:CYS300:OX)]
 currently queue= CX - OX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS300:CX, <Atom instance> ligcovalent:A:CYS300:OX)]
 processing queue entry:  CX - OX
in wBF with fromAtom= CX + startAtom= OX startAtom.used= 0
wBF: wrote  OX
self.outatom_counter= 19


writing and calling wL with nA= CX - 19
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 20
len( CX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []
 currently queue=
CX : OX : queue= []
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 21


writing and calling wL with nA= CX - 21
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 22
len( CX ).bonds= 1
skipping b= CX - CX
returning queue= []
newQ= []
 currently queue=
CX : CX : queue= []
wrote flex file ligcovalent_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: ligcovalent_flex.pdbqt
wrote rigid file: ligcovalent_rigid.pdbqt
4---done
setting PYTHONHOME environment
setting PYTHONHOME environment
!unable to use ligand.TORSDOF! torsdof always set to ligand.ndihe= 7
5---done
 concat 10 log files... done.
Job finished, good luck!
rm: 无法删除'chimera.com': 没有那个文件或目录
rm: 无法删除'tmp.mol2': 没有那个文件或目录
Done
Processing residue A:CYS232
[start] output filename is: ligcovalent_single.pdb
CHAIN A
Writing output filename: ligcovalent_single.pdb
1---ligcovalent.pdb prepared...
1.5--done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= fixed  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  fixed
merged  0  nonpolar hydrogens
end of base class init
using std outputfilename  fixed.pdbqt
wrote  fixed  to  fixed.pdbqt
2---done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= ligcovalent  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  ligcovalent
merged  21  nonpolar hydrogens
end of base class init
using std outputfilename  ligcovalent.pdbqt
wrote  ligcovalent  to  ligcovalent.pdbqt
3---done
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> fixed:A:CYS232 with 6 MolKit.molecule.Atom]
calling setAutoFlexFields with  fixed:A:CYS232
in setAutoFlexFields with  fixed:A:CYS232
len(rotatables)= 1
returning res.torscount= 1
res.root= CA
ntors= 1
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= fixed_flex.pdbqt
res_total= 1
in writeResidue with  fixed:A:CYS232
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS232:CA, <Atom instance> fixed:A:CYS232:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS232:CA, <Atom instance> fixed:A:CYS232:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS232:N, <Atom instance> fixed:A:CYS232:CA)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3


writing and calling wL with nA= SG - 3
wBF2: wrote  SG
!!!2:calling wL


in writeLevel with  SG  outatom_counter= 4
len( SG ).bonds= 1
skipping b= CB - SG
returning queue= []
newQ= []
 currently queue=
CA : CB : queue= []
wrote flex file fixed_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: fixed_flex.pdbqt
wrote rigid file: fixed_rigid.pdbqt
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> ligcovalent:A:CYS232 with 28 MolKit.molecule.Atom]
calling setAutoFlexFields with  ligcovalent:A:CYS232
in setAutoFlexFields with  ligcovalent:A:CYS232
len(rotatables)= 8
returning res.torscount= 7
res.root= CA
ntors= 7
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= ligcovalent_flex.pdbqt
res_total= 7
in writeResidue with  ligcovalent:A:CYS232
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS232:CA, <Atom instance> ligcovalent:A:CYS232:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS232:CA, <Atom instance> ligcovalent:A:CYS232:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS232:N, <Atom instance> ligcovalent:A:CYS232:CA)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3
 currently queue= CB - SG ,
CA : CB : queue= [(<Atom instance> ligcovalent:A:CYS232:CB, <Atom instance> ligcovalent:A:CYS232:SG)]
 processing queue entry:  CB - SG
in wBF with fromAtom= CB + startAtom= SG startAtom.used= 0
wBF: wrote  SG
self.outatom_counter= 4
 currently queue= SG - CX ,
CB : SG : queue= [(<Atom instance> ligcovalent:A:CYS232:SG, <Atom instance> ligcovalent:A:CYS232:CX)]
 processing queue entry:  SG - CX
in wBF with fromAtom= SG + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 5
 currently queue= CX - CX ,
SG : CX : queue= [(<Atom instance> ligcovalent:A:CYS232:CX, <Atom instance> ligcovalent:A:CYS232:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 6
 currently queue= CX - CX , CX - CX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS232:CX, <Atom instance> ligcovalent:A:CYS232:CX), (<Atom instance> ligcovalent:A:CYS232:CX, <Atom instance> ligcovalent:A:CYS232:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 7


writing and calling wL with nA= OX - 7
wBF2: wrote  OX
!!!2:calling wL


in writeLevel with  OX  outatom_counter= 8
len( OX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []


writing and calling wL with nA= NX - 8
wBF2: wrote  NX
!!!2:calling wL


in writeLevel with  NX  outatom_counter= 9
len( NX ).bonds= 3
processing b= NX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= NX - CX
processing b= CX - NX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 11
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= NX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 12
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 13
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 14
len( CX ).bonds= 3
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 15
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 16
len( CX ).bonds= 3
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
processing b= OX - CX  activeTors= 1
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
CX wL: queue= [(<Atom instance> ligcovalent:A:CYS232:CX, <Atom instance> ligcovalent:A:CYS232:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 17
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 18
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS232:CX, <Atom instance> ligcovalent:A:CYS232:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS232:CX, <Atom instance> ligcovalent:A:CYS232:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS232:CX, <Atom instance> ligcovalent:A:CYS232:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS232:CX, <Atom instance> ligcovalent:A:CYS232:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS232:CX, <Atom instance> ligcovalent:A:CYS232:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS232:CX, <Atom instance> ligcovalent:A:CYS232:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS232:CX, <Atom instance> ligcovalent:A:CYS232:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS232:CX, <Atom instance> ligcovalent:A:CYS232:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS232:CX, <Atom instance> ligcovalent:A:CYS232:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS232:CX, <Atom instance> ligcovalent:A:CYS232:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS232:CX, <Atom instance> ligcovalent:A:CYS232:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS232:CX, <Atom instance> ligcovalent:A:CYS232:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 18
len( CX ).bonds= 3
skipping b= CX - CX
skipping b= CX - NX
skipping b= CX - CX
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS232:CX, <Atom instance> ligcovalent:A:CYS232:OX)]
newQ= [(<Atom instance> ligcovalent:A:CYS232:CX, <Atom instance> ligcovalent:A:CYS232:OX)]
@@@@len(newq)= 1
queue= [(<Atom instance> ligcovalent:A:CYS232:CX, <Atom instance> ligcovalent:A:CYS232:OX)]
 currently queue= CX - OX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS232:CX, <Atom instance> ligcovalent:A:CYS232:OX)]
 processing queue entry:  CX - OX
in wBF with fromAtom= CX + startAtom= OX startAtom.used= 0
wBF: wrote  OX
self.outatom_counter= 19


writing and calling wL with nA= CX - 19
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 20
len( CX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []
 currently queue=
CX : OX : queue= []
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 21


writing and calling wL with nA= CX - 21
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 22
len( CX ).bonds= 1
skipping b= CX - CX
returning queue= []
newQ= []
 currently queue=
CX : CX : queue= []
wrote flex file ligcovalent_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: ligcovalent_flex.pdbqt
wrote rigid file: ligcovalent_rigid.pdbqt
4---done
setting PYTHONHOME environment
setting PYTHONHOME environment
!unable to use ligand.TORSDOF! torsdof always set to ligand.ndihe= 7
5---done
 concat 10 log files... done.
Job finished, good luck!
rm: 无法删除'chimera.com': 没有那个文件或目录
rm: 无法删除'tmp.mol2': 没有那个文件或目录
Done
Processing residue A:CYS272
[start] output filename is: ligcovalent_single.pdb
CHAIN A
Writing output filename: ligcovalent_single.pdb
1---ligcovalent.pdb prepared...
1.5--done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= fixed  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  fixed
merged  0  nonpolar hydrogens
end of base class init
using std outputfilename  fixed.pdbqt
wrote  fixed  to  fixed.pdbqt
2---done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= ligcovalent  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  ligcovalent
merged  21  nonpolar hydrogens
end of base class init
using std outputfilename  ligcovalent.pdbqt
wrote  ligcovalent  to  ligcovalent.pdbqt
3---done
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> fixed:A:CYS272 with 6 MolKit.molecule.Atom]
calling setAutoFlexFields with  fixed:A:CYS272
in setAutoFlexFields with  fixed:A:CYS272
len(rotatables)= 1
returning res.torscount= 1
res.root= CA
ntors= 1
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= fixed_flex.pdbqt
res_total= 1
in writeResidue with  fixed:A:CYS272
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS272:N, <Atom instance> fixed:A:CYS272:CA)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS272:CA, <Atom instance> fixed:A:CYS272:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS272:CA, <Atom instance> fixed:A:CYS272:CB)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3


writing and calling wL with nA= SG - 3
wBF2: wrote  SG
!!!2:calling wL


in writeLevel with  SG  outatom_counter= 4
len( SG ).bonds= 1
skipping b= CB - SG
returning queue= []
newQ= []
 currently queue=
CA : CB : queue= []
wrote flex file fixed_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: fixed_flex.pdbqt
wrote rigid file: fixed_rigid.pdbqt
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> ligcovalent:A:CYS272 with 28 MolKit.molecule.Atom]
calling setAutoFlexFields with  ligcovalent:A:CYS272
in setAutoFlexFields with  ligcovalent:A:CYS272
len(rotatables)= 8
returning res.torscount= 7
res.root= CA
ntors= 7
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= ligcovalent_flex.pdbqt
res_total= 7
in writeResidue with  ligcovalent:A:CYS272
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS272:N, <Atom instance> ligcovalent:A:CYS272:CA)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS272:CA, <Atom instance> ligcovalent:A:CYS272:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS272:CA, <Atom instance> ligcovalent:A:CYS272:C)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3
 currently queue= CB - SG ,
CA : CB : queue= [(<Atom instance> ligcovalent:A:CYS272:CB, <Atom instance> ligcovalent:A:CYS272:SG)]
 processing queue entry:  CB - SG
in wBF with fromAtom= CB + startAtom= SG startAtom.used= 0
wBF: wrote  SG
self.outatom_counter= 4
 currently queue= SG - CX ,
CB : SG : queue= [(<Atom instance> ligcovalent:A:CYS272:SG, <Atom instance> ligcovalent:A:CYS272:CX)]
 processing queue entry:  SG - CX
in wBF with fromAtom= SG + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 5
 currently queue= CX - CX ,
SG : CX : queue= [(<Atom instance> ligcovalent:A:CYS272:CX, <Atom instance> ligcovalent:A:CYS272:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 6
 currently queue= CX - CX , CX - CX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS272:CX, <Atom instance> ligcovalent:A:CYS272:CX), (<Atom instance> ligcovalent:A:CYS272:CX, <Atom instance> ligcovalent:A:CYS272:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 7


writing and calling wL with nA= OX - 7
wBF2: wrote  OX
!!!2:calling wL


in writeLevel with  OX  outatom_counter= 8
len( OX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []


writing and calling wL with nA= NX - 8
wBF2: wrote  NX
!!!2:calling wL


in writeLevel with  NX  outatom_counter= 9
len( NX ).bonds= 3
skipping b= NX - CX
processing b= NX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
processing b= CX - NX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 11
len( CX ).bonds= 2
skipping b= NX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 12
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 13
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 14
len( CX ).bonds= 3
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 15
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 16
len( CX ).bonds= 3
processing b= OX - CX  activeTors= 1
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
CX wL: queue= [(<Atom instance> ligcovalent:A:CYS272:CX, <Atom instance> ligcovalent:A:CYS272:OX)]
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 17
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 18
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS272:CX, <Atom instance> ligcovalent:A:CYS272:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS272:CX, <Atom instance> ligcovalent:A:CYS272:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS272:CX, <Atom instance> ligcovalent:A:CYS272:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS272:CX, <Atom instance> ligcovalent:A:CYS272:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS272:CX, <Atom instance> ligcovalent:A:CYS272:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS272:CX, <Atom instance> ligcovalent:A:CYS272:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS272:CX, <Atom instance> ligcovalent:A:CYS272:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS272:CX, <Atom instance> ligcovalent:A:CYS272:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS272:CX, <Atom instance> ligcovalent:A:CYS272:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS272:CX, <Atom instance> ligcovalent:A:CYS272:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS272:CX, <Atom instance> ligcovalent:A:CYS272:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS272:CX, <Atom instance> ligcovalent:A:CYS272:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 18
len( CX ).bonds= 3
skipping b= CX - CX
skipping b= CX - CX
skipping b= CX - NX
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS272:CX, <Atom instance> ligcovalent:A:CYS272:OX)]
newQ= [(<Atom instance> ligcovalent:A:CYS272:CX, <Atom instance> ligcovalent:A:CYS272:OX)]
@@@@len(newq)= 1
queue= [(<Atom instance> ligcovalent:A:CYS272:CX, <Atom instance> ligcovalent:A:CYS272:OX)]
 currently queue= CX - OX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS272:CX, <Atom instance> ligcovalent:A:CYS272:OX)]
 processing queue entry:  CX - OX
in wBF with fromAtom= CX + startAtom= OX startAtom.used= 0
wBF: wrote  OX
self.outatom_counter= 19


writing and calling wL with nA= CX - 19
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 20
len( CX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []
 currently queue=
CX : OX : queue= []
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 21


writing and calling wL with nA= CX - 21
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 22
len( CX ).bonds= 1
skipping b= CX - CX
returning queue= []
newQ= []
 currently queue=
CX : CX : queue= []
wrote flex file ligcovalent_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: ligcovalent_flex.pdbqt
wrote rigid file: ligcovalent_rigid.pdbqt
4---done
setting PYTHONHOME environment
setting PYTHONHOME environment
!unable to use ligand.TORSDOF! torsdof always set to ligand.ndihe= 7
5---done
 concat 10 log files... done.
Job finished, good luck!
rm: 无法删除'chimera.com': 没有那个文件或目录
rm: 无法删除'tmp.mol2': 没有那个文件或目录
Done
Processing residue A:CYS152
[start] output filename is: ligcovalent_single.pdb
CHAIN A
Writing output filename: ligcovalent_single.pdb
1---ligcovalent.pdb prepared...
1.5--done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= fixed  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  fixed
merged  0  nonpolar hydrogens
end of base class init
using std outputfilename  fixed.pdbqt
wrote  fixed  to  fixed.pdbqt
2---done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= ligcovalent  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  ligcovalent
merged  21  nonpolar hydrogens
end of base class init
using std outputfilename  ligcovalent.pdbqt
wrote  ligcovalent  to  ligcovalent.pdbqt
3---done
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> fixed:A:CYS152 with 6 MolKit.molecule.Atom]
calling setAutoFlexFields with  fixed:A:CYS152
in setAutoFlexFields with  fixed:A:CYS152
len(rotatables)= 1
returning res.torscount= 1
res.root= CA
ntors= 1
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= fixed_flex.pdbqt
res_total= 1
in writeResidue with  fixed:A:CYS152
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS152:N, <Atom instance> fixed:A:CYS152:CA)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS152:CA, <Atom instance> fixed:A:CYS152:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS152:CA, <Atom instance> fixed:A:CYS152:C)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3


writing and calling wL with nA= SG - 3
wBF2: wrote  SG
!!!2:calling wL


in writeLevel with  SG  outatom_counter= 4
len( SG ).bonds= 1
skipping b= CB - SG
returning queue= []
newQ= []
 currently queue=
CA : CB : queue= []
wrote flex file fixed_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: fixed_flex.pdbqt
wrote rigid file: fixed_rigid.pdbqt
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> ligcovalent:A:CYS152 with 28 MolKit.molecule.Atom]
calling setAutoFlexFields with  ligcovalent:A:CYS152
in setAutoFlexFields with  ligcovalent:A:CYS152
len(rotatables)= 8
returning res.torscount= 7
res.root= CA
ntors= 7
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= ligcovalent_flex.pdbqt
res_total= 7
in writeResidue with  ligcovalent:A:CYS152
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS152:CA, <Atom instance> ligcovalent:A:CYS152:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS152:CA, <Atom instance> ligcovalent:A:CYS152:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS152:N, <Atom instance> ligcovalent:A:CYS152:CA)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3
 currently queue= CB - SG ,
CA : CB : queue= [(<Atom instance> ligcovalent:A:CYS152:CB, <Atom instance> ligcovalent:A:CYS152:SG)]
 processing queue entry:  CB - SG
in wBF with fromAtom= CB + startAtom= SG startAtom.used= 0
wBF: wrote  SG
self.outatom_counter= 4
 currently queue= SG - CX ,
CB : SG : queue= [(<Atom instance> ligcovalent:A:CYS152:SG, <Atom instance> ligcovalent:A:CYS152:CX)]
 processing queue entry:  SG - CX
in wBF with fromAtom= SG + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 5
 currently queue= CX - CX ,
SG : CX : queue= [(<Atom instance> ligcovalent:A:CYS152:CX, <Atom instance> ligcovalent:A:CYS152:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 6
 currently queue= CX - CX , CX - CX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS152:CX, <Atom instance> ligcovalent:A:CYS152:CX), (<Atom instance> ligcovalent:A:CYS152:CX, <Atom instance> ligcovalent:A:CYS152:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 7


writing and calling wL with nA= CX - 7
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 8
len( CX ).bonds= 1
skipping b= CX - CX
returning queue= []
newQ= []
 currently queue=
CX : CX : queue= []
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 9


writing and calling wL with nA= NX - 9
wBF2: wrote  NX
!!!2:calling wL


in writeLevel with  NX  outatom_counter= 10
len( NX ).bonds= 3
processing b= CX - NX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
processing b= NX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= NX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 12
len( CX ).bonds= 3
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - NX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 14
len( CX ).bonds= 3
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 16
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 17
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= []
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 17
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 18
len( CX ).bonds= 3
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
processing b= OX - CX  activeTors= 1
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
CX wL: queue= [(<Atom instance> ligcovalent:A:CYS152:CX, <Atom instance> ligcovalent:A:CYS152:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 19
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS152:CX, <Atom instance> ligcovalent:A:CYS152:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS152:CX, <Atom instance> ligcovalent:A:CYS152:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS152:CX, <Atom instance> ligcovalent:A:CYS152:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS152:CX, <Atom instance> ligcovalent:A:CYS152:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS152:CX, <Atom instance> ligcovalent:A:CYS152:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS152:CX, <Atom instance> ligcovalent:A:CYS152:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 19
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS152:CX, <Atom instance> ligcovalent:A:CYS152:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS152:CX, <Atom instance> ligcovalent:A:CYS152:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 19
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= NX - CX
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS152:CX, <Atom instance> ligcovalent:A:CYS152:OX)]
newQ= [(<Atom instance> ligcovalent:A:CYS152:CX, <Atom instance> ligcovalent:A:CYS152:OX)]
@@@@len(newq)= 1
queue= [(<Atom instance> ligcovalent:A:CYS152:CX, <Atom instance> ligcovalent:A:CYS152:OX)]


writing and calling wL with nA= OX - 19
wBF2: wrote  OX
!!!2:calling wL


in writeLevel with  OX  outatom_counter= 20
len( OX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []
 currently queue= CX - OX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS152:CX, <Atom instance> ligcovalent:A:CYS152:OX)]
 processing queue entry:  CX - OX
in wBF with fromAtom= CX + startAtom= OX startAtom.used= 0
wBF: wrote  OX
self.outatom_counter= 21


writing and calling wL with nA= CX - 21
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 22
len( CX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []
 currently queue=
CX : OX : queue= []
wrote flex file ligcovalent_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: ligcovalent_flex.pdbqt
wrote rigid file: ligcovalent_rigid.pdbqt
4---done
setting PYTHONHOME environment
setting PYTHONHOME environment
!unable to use ligand.TORSDOF! torsdof always set to ligand.ndihe= 7
5---done
 concat 10 log files... done.
Job finished, good luck!
rm: 无法删除'chimera.com': 没有那个文件或目录
rm: 无法删除'tmp.mol2': 没有那个文件或目录
Done
Processing residue A:CYS87
[start] output filename is: ligcovalent_single.pdb
CHAIN A
Writing output filename: ligcovalent_single.pdb
1---ligcovalent.pdb prepared...
1.5--done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= fixed  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  fixed
merged  0  nonpolar hydrogens
end of base class init
using std outputfilename  fixed.pdbqt
wrote  fixed  to  fixed.pdbqt
2---done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= ligcovalent  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  ligcovalent
merged  21  nonpolar hydrogens
end of base class init
using std outputfilename  ligcovalent.pdbqt
wrote  ligcovalent  to  ligcovalent.pdbqt
3---done
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> fixed:A:CYS87 with 6 MolKit.molecule.Atom]
calling setAutoFlexFields with  fixed:A:CYS87
in setAutoFlexFields with  fixed:A:CYS87
len(rotatables)= 1
returning res.torscount= 1
res.root= CA
ntors= 1
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= fixed_flex.pdbqt
res_total= 1
in writeResidue with  fixed:A:CYS87
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS87:CA, <Atom instance> fixed:A:CYS87:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS87:CA, <Atom instance> fixed:A:CYS87:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS87:N, <Atom instance> fixed:A:CYS87:CA)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3


writing and calling wL with nA= SG - 3
wBF2: wrote  SG
!!!2:calling wL


in writeLevel with  SG  outatom_counter= 4
len( SG ).bonds= 1
skipping b= CB - SG
returning queue= []
newQ= []
 currently queue=
CA : CB : queue= []
wrote flex file fixed_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: fixed_flex.pdbqt
wrote rigid file: fixed_rigid.pdbqt
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> ligcovalent:A:CYS87 with 28 MolKit.molecule.Atom]
calling setAutoFlexFields with  ligcovalent:A:CYS87
in setAutoFlexFields with  ligcovalent:A:CYS87
len(rotatables)= 8
returning res.torscount= 7
res.root= CA
ntors= 7
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= ligcovalent_flex.pdbqt
res_total= 7
in writeResidue with  ligcovalent:A:CYS87
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS87:N, <Atom instance> ligcovalent:A:CYS87:CA)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS87:CA, <Atom instance> ligcovalent:A:CYS87:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS87:CA, <Atom instance> ligcovalent:A:CYS87:CB)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3
 currently queue= CB - SG ,
CA : CB : queue= [(<Atom instance> ligcovalent:A:CYS87:CB, <Atom instance> ligcovalent:A:CYS87:SG)]
 processing queue entry:  CB - SG
in wBF with fromAtom= CB + startAtom= SG startAtom.used= 0
wBF: wrote  SG
self.outatom_counter= 4
 currently queue= SG - CX ,
CB : SG : queue= [(<Atom instance> ligcovalent:A:CYS87:SG, <Atom instance> ligcovalent:A:CYS87:CX)]
 processing queue entry:  SG - CX
in wBF with fromAtom= SG + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 5
 currently queue= CX - CX ,
SG : CX : queue= [(<Atom instance> ligcovalent:A:CYS87:CX, <Atom instance> ligcovalent:A:CYS87:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 6
 currently queue= CX - CX , CX - CX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS87:CX, <Atom instance> ligcovalent:A:CYS87:CX), (<Atom instance> ligcovalent:A:CYS87:CX, <Atom instance> ligcovalent:A:CYS87:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 7


writing and calling wL with nA= CX - 7
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 8
len( CX ).bonds= 1
skipping b= CX - CX
returning queue= []
newQ= []
 currently queue=
CX : CX : queue= []
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 9


writing and calling wL with nA= OX - 9
wBF2: wrote  OX
!!!2:calling wL


in writeLevel with  OX  outatom_counter= 10
len( OX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []


writing and calling wL with nA= NX - 10
wBF2: wrote  NX
!!!2:calling wL


in writeLevel with  NX  outatom_counter= 11
len( NX ).bonds= 3
skipping b= NX - CX
processing b= NX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
processing b= CX - NX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 13
len( CX ).bonds= 2
skipping b= NX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 14
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 15
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 16
len( CX ).bonds= 3
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 17
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 18
len( CX ).bonds= 3
processing b= OX - CX  activeTors= 1
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
CX wL: queue= [(<Atom instance> ligcovalent:A:CYS87:CX, <Atom instance> ligcovalent:A:CYS87:OX)]
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 19
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 20
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS87:CX, <Atom instance> ligcovalent:A:CYS87:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS87:CX, <Atom instance> ligcovalent:A:CYS87:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS87:CX, <Atom instance> ligcovalent:A:CYS87:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS87:CX, <Atom instance> ligcovalent:A:CYS87:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS87:CX, <Atom instance> ligcovalent:A:CYS87:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS87:CX, <Atom instance> ligcovalent:A:CYS87:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS87:CX, <Atom instance> ligcovalent:A:CYS87:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS87:CX, <Atom instance> ligcovalent:A:CYS87:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS87:CX, <Atom instance> ligcovalent:A:CYS87:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS87:CX, <Atom instance> ligcovalent:A:CYS87:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS87:CX, <Atom instance> ligcovalent:A:CYS87:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS87:CX, <Atom instance> ligcovalent:A:CYS87:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 20
len( CX ).bonds= 3
skipping b= CX - CX
skipping b= CX - NX
skipping b= CX - CX
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS87:CX, <Atom instance> ligcovalent:A:CYS87:OX)]
newQ= [(<Atom instance> ligcovalent:A:CYS87:CX, <Atom instance> ligcovalent:A:CYS87:OX)]
@@@@len(newq)= 1
queue= [(<Atom instance> ligcovalent:A:CYS87:CX, <Atom instance> ligcovalent:A:CYS87:OX)]
 currently queue= CX - OX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS87:CX, <Atom instance> ligcovalent:A:CYS87:OX)]
 processing queue entry:  CX - OX
in wBF with fromAtom= CX + startAtom= OX startAtom.used= 0
wBF: wrote  OX
self.outatom_counter= 21


writing and calling wL with nA= CX - 21
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 22
len( CX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []
 currently queue=
CX : OX : queue= []
wrote flex file ligcovalent_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: ligcovalent_flex.pdbqt
wrote rigid file: ligcovalent_rigid.pdbqt
4---done
setting PYTHONHOME environment
setting PYTHONHOME environment
!unable to use ligand.TORSDOF! torsdof always set to ligand.ndihe= 7
5---done
 concat 10 log files... done.
Job finished, good luck!
rm: 无法删除'chimera.com': 没有那个文件或目录
rm: 无法删除'tmp.mol2': 没有那个文件或目录
Done
Processing residue A:CYS316
[start] output filename is: ligcovalent_single.pdb
CHAIN A
Writing output filename: ligcovalent_single.pdb
1---ligcovalent.pdb prepared...
1.5--done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= fixed  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
Unable to assign MAP type to atom N
Sorry, there are no Gasteiger parameters available for atom fixed:A:HIS531:NE2
Unable to assign MAP type to atom N
Sorry, there are no Gasteiger parameters available for atom fixed:A:HIS1072:NE2
added gasteigercharges to  fixed
merged  0  nonpolar hydrogens
end of base class init
using std outputfilename  fixed.pdbqt
wrote  fixed  to  fixed.pdbqt
2---done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= ligcovalent  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  ligcovalent
merged  21  nonpolar hydrogens
end of base class init
using std outputfilename  ligcovalent.pdbqt
wrote  ligcovalent  to  ligcovalent.pdbqt
3---done
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> fixed:A:CYS316 with 6 MolKit.molecule.Atom]
calling setAutoFlexFields with  fixed:A:CYS316
in setAutoFlexFields with  fixed:A:CYS316
Unable to assign XYZ type to atom N
Unable to assign XYZ type to atom N
len(rotatables)= 1
returning res.torscount= 1
res.root= CA
ntors= 1
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= fixed_flex.pdbqt
res_total= 1
in writeResidue with  fixed:A:CYS316
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS316:CA, <Atom instance> fixed:A:CYS316:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS316:CA, <Atom instance> fixed:A:CYS316:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS316:N, <Atom instance> fixed:A:CYS316:CA)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3


writing and calling wL with nA= SG - 3
wBF2: wrote  SG
!!!2:calling wL


in writeLevel with  SG  outatom_counter= 4
len( SG ).bonds= 1
skipping b= CB - SG
returning queue= []
newQ= []
 currently queue=
CA : CB : queue= []
wrote flex file fixed_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: fixed_flex.pdbqt
wrote rigid file: fixed_rigid.pdbqt
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> ligcovalent:A:CYS316 with 28 MolKit.molecule.Atom]
calling setAutoFlexFields with  ligcovalent:A:CYS316
in setAutoFlexFields with  ligcovalent:A:CYS316
len(rotatables)= 8
returning res.torscount= 7
res.root= CA
ntors= 7
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= ligcovalent_flex.pdbqt
res_total= 7
in writeResidue with  ligcovalent:A:CYS316
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS316:N, <Atom instance> ligcovalent:A:CYS316:CA)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS316:CA, <Atom instance> ligcovalent:A:CYS316:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS316:CA, <Atom instance> ligcovalent:A:CYS316:CB)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3
 currently queue= CB - SG ,
CA : CB : queue= [(<Atom instance> ligcovalent:A:CYS316:CB, <Atom instance> ligcovalent:A:CYS316:SG)]
 processing queue entry:  CB - SG
in wBF with fromAtom= CB + startAtom= SG startAtom.used= 0
wBF: wrote  SG
self.outatom_counter= 4
 currently queue= SG - CX ,
CB : SG : queue= [(<Atom instance> ligcovalent:A:CYS316:SG, <Atom instance> ligcovalent:A:CYS316:CX)]
 processing queue entry:  SG - CX
in wBF with fromAtom= SG + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 5
 currently queue= CX - CX ,
SG : CX : queue= [(<Atom instance> ligcovalent:A:CYS316:CX, <Atom instance> ligcovalent:A:CYS316:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 6
 currently queue= CX - CX , CX - CX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS316:CX, <Atom instance> ligcovalent:A:CYS316:CX), (<Atom instance> ligcovalent:A:CYS316:CX, <Atom instance> ligcovalent:A:CYS316:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 7


writing and calling wL with nA= NX - 7
wBF2: wrote  NX
!!!2:calling wL


in writeLevel with  NX  outatom_counter= 8
len( NX ).bonds= 3
processing b= CX - NX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= NX - CX
processing b= NX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 10
len( CX ).bonds= 3
skipping b= CX - NX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 12
len( CX ).bonds= 3
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 14
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 15
len( CX ).bonds= 3
processing b= OX - CX  activeTors= 1
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
CX wL: queue= [(<Atom instance> ligcovalent:A:CYS316:CX, <Atom instance> ligcovalent:A:CYS316:OX)]
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 16
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS316:CX, <Atom instance> ligcovalent:A:CYS316:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS316:CX, <Atom instance> ligcovalent:A:CYS316:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS316:CX, <Atom instance> ligcovalent:A:CYS316:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS316:CX, <Atom instance> ligcovalent:A:CYS316:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 16
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 17
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS316:CX, <Atom instance> ligcovalent:A:CYS316:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS316:CX, <Atom instance> ligcovalent:A:CYS316:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 17
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS316:CX, <Atom instance> ligcovalent:A:CYS316:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS316:CX, <Atom instance> ligcovalent:A:CYS316:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 17
len( CX ).bonds= 2
skipping b= NX - CX
skipping b= CX - CX
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS316:CX, <Atom instance> ligcovalent:A:CYS316:OX)]
newQ= [(<Atom instance> ligcovalent:A:CYS316:CX, <Atom instance> ligcovalent:A:CYS316:OX)]
@@@@len(newq)= 1
queue= [(<Atom instance> ligcovalent:A:CYS316:CX, <Atom instance> ligcovalent:A:CYS316:OX)]


writing and calling wL with nA= OX - 17
wBF2: wrote  OX
!!!2:calling wL


in writeLevel with  OX  outatom_counter= 18
len( OX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []
 currently queue= CX - OX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS316:CX, <Atom instance> ligcovalent:A:CYS316:OX)]
 processing queue entry:  CX - OX
in wBF with fromAtom= CX + startAtom= OX startAtom.used= 0
wBF: wrote  OX
self.outatom_counter= 19


writing and calling wL with nA= CX - 19
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 20
len( CX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []
 currently queue=
CX : OX : queue= []
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 21


writing and calling wL with nA= CX - 21
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 22
len( CX ).bonds= 1
skipping b= CX - CX
returning queue= []
newQ= []
 currently queue=
CX : CX : queue= []
wrote flex file ligcovalent_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: ligcovalent_flex.pdbqt
wrote rigid file: ligcovalent_rigid.pdbqt
4---done
setting PYTHONHOME environment
setting PYTHONHOME environment
!unable to use ligand.TORSDOF! torsdof always set to ligand.ndihe= 7
5---done
 concat 10 log files... done.
Job finished, good luck!
rm: 无法删除'chimera.com': 没有那个文件或目录
rm: 无法删除'tmp.mol2': 没有那个文件或目录
Done
Processing residue A:CYS266
[start] output filename is: ligcovalent_single.pdb
CHAIN A
Writing output filename: ligcovalent_single.pdb
1---ligcovalent.pdb prepared...
1.5--done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= fixed  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
Unable to assign MAP type to atom N
Sorry, there are no Gasteiger parameters available for atom fixed:A:HIS531:NE2
Unable to assign MAP type to atom N
Sorry, there are no Gasteiger parameters available for atom fixed:A:HIS1072:NE2
added gasteigercharges to  fixed
merged  0  nonpolar hydrogens
end of base class init
using std outputfilename  fixed.pdbqt
wrote  fixed  to  fixed.pdbqt
2---done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= ligcovalent  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  ligcovalent
merged  21  nonpolar hydrogens
end of base class init
using std outputfilename  ligcovalent.pdbqt
wrote  ligcovalent  to  ligcovalent.pdbqt
3---done
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> fixed:A:CYS266 with 6 MolKit.molecule.Atom]
calling setAutoFlexFields with  fixed:A:CYS266
in setAutoFlexFields with  fixed:A:CYS266
Unable to assign XYZ type to atom N
Unable to assign XYZ type to atom N
len(rotatables)= 1
returning res.torscount= 1
res.root= CA
ntors= 1
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= fixed_flex.pdbqt
res_total= 1
in writeResidue with  fixed:A:CYS266
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS266:N, <Atom instance> fixed:A:CYS266:CA)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS266:CA, <Atom instance> fixed:A:CYS266:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS266:CA, <Atom instance> fixed:A:CYS266:CB)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3


writing and calling wL with nA= SG - 3
wBF2: wrote  SG
!!!2:calling wL


in writeLevel with  SG  outatom_counter= 4
len( SG ).bonds= 1
skipping b= CB - SG
returning queue= []
newQ= []
 currently queue=
CA : CB : queue= []
wrote flex file fixed_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: fixed_flex.pdbqt
wrote rigid file: fixed_rigid.pdbqt
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> ligcovalent:A:CYS266 with 28 MolKit.molecule.Atom]
calling setAutoFlexFields with  ligcovalent:A:CYS266
in setAutoFlexFields with  ligcovalent:A:CYS266
len(rotatables)= 8
returning res.torscount= 7
res.root= CA
ntors= 7
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= ligcovalent_flex.pdbqt
res_total= 7
in writeResidue with  ligcovalent:A:CYS266
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS266:CA, <Atom instance> ligcovalent:A:CYS266:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS266:CA, <Atom instance> ligcovalent:A:CYS266:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS266:N, <Atom instance> ligcovalent:A:CYS266:CA)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3
 currently queue= CB - SG ,
CA : CB : queue= [(<Atom instance> ligcovalent:A:CYS266:CB, <Atom instance> ligcovalent:A:CYS266:SG)]
 processing queue entry:  CB - SG
in wBF with fromAtom= CB + startAtom= SG startAtom.used= 0
wBF: wrote  SG
self.outatom_counter= 4
 currently queue= SG - CX ,
CB : SG : queue= [(<Atom instance> ligcovalent:A:CYS266:SG, <Atom instance> ligcovalent:A:CYS266:CX)]
 processing queue entry:  SG - CX
in wBF with fromAtom= SG + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 5
 currently queue= CX - CX ,
SG : CX : queue= [(<Atom instance> ligcovalent:A:CYS266:CX, <Atom instance> ligcovalent:A:CYS266:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 6
 currently queue= CX - CX , CX - CX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS266:CX, <Atom instance> ligcovalent:A:CYS266:CX), (<Atom instance> ligcovalent:A:CYS266:CX, <Atom instance> ligcovalent:A:CYS266:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 7


writing and calling wL with nA= NX - 7
wBF2: wrote  NX
!!!2:calling wL


in writeLevel with  NX  outatom_counter= 8
len( NX ).bonds= 3
skipping b= NX - CX
processing b= NX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
processing b= CX - NX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 10
len( CX ).bonds= 2
skipping b= NX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 11
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 12
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 13
len( CX ).bonds= 3
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 14
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 15
len( CX ).bonds= 3
processing b= OX - CX  activeTors= 1
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
CX wL: queue= [(<Atom instance> ligcovalent:A:CYS266:CX, <Atom instance> ligcovalent:A:CYS266:OX)]
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 16
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 17
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS266:CX, <Atom instance> ligcovalent:A:CYS266:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS266:CX, <Atom instance> ligcovalent:A:CYS266:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS266:CX, <Atom instance> ligcovalent:A:CYS266:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS266:CX, <Atom instance> ligcovalent:A:CYS266:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS266:CX, <Atom instance> ligcovalent:A:CYS266:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS266:CX, <Atom instance> ligcovalent:A:CYS266:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS266:CX, <Atom instance> ligcovalent:A:CYS266:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS266:CX, <Atom instance> ligcovalent:A:CYS266:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS266:CX, <Atom instance> ligcovalent:A:CYS266:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS266:CX, <Atom instance> ligcovalent:A:CYS266:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS266:CX, <Atom instance> ligcovalent:A:CYS266:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS266:CX, <Atom instance> ligcovalent:A:CYS266:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 17
len( CX ).bonds= 3
skipping b= CX - CX
skipping b= CX - CX
skipping b= CX - NX
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS266:CX, <Atom instance> ligcovalent:A:CYS266:OX)]
newQ= [(<Atom instance> ligcovalent:A:CYS266:CX, <Atom instance> ligcovalent:A:CYS266:OX)]
@@@@len(newq)= 1
queue= [(<Atom instance> ligcovalent:A:CYS266:CX, <Atom instance> ligcovalent:A:CYS266:OX)]


writing and calling wL with nA= OX - 17
wBF2: wrote  OX
!!!2:calling wL


in writeLevel with  OX  outatom_counter= 18
len( OX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []
 currently queue= CX - OX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS266:CX, <Atom instance> ligcovalent:A:CYS266:OX)]
 processing queue entry:  CX - OX
in wBF with fromAtom= CX + startAtom= OX startAtom.used= 0
wBF: wrote  OX
self.outatom_counter= 19


writing and calling wL with nA= CX - 19
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 20
len( CX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []
 currently queue=
CX : OX : queue= []
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 21


writing and calling wL with nA= CX - 21
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 22
len( CX ).bonds= 1
skipping b= CX - CX
returning queue= []
newQ= []
 currently queue=
CX : CX : queue= []
wrote flex file ligcovalent_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: ligcovalent_flex.pdbqt
wrote rigid file: ligcovalent_rigid.pdbqt
4---done
setting PYTHONHOME environment
setting PYTHONHOME environment
!unable to use ligand.TORSDOF! torsdof always set to ligand.ndihe= 7
5---done
 concat 10 log files... done.
Job finished, good luck!
rm: 无法删除'chimera.com': 没有那个文件或目录
rm: 无法删除'tmp.mol2': 没有那个文件或目录
Done
Processing residue A:CYS1277
[start] output filename is: ligcovalent_single.pdb
CHAIN A
Writing output filename: ligcovalent_single.pdb
1---ligcovalent.pdb prepared...
1.5--done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= fixed  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
Unable to assign MAP type to atom N
Sorry, there are no Gasteiger parameters available for atom fixed:A:HIS531:NE2
Unable to assign MAP type to atom N
Sorry, there are no Gasteiger parameters available for atom fixed:A:HIS1072:NE2
added gasteigercharges to  fixed
merged  0  nonpolar hydrogens
end of base class init
using std outputfilename  fixed.pdbqt
wrote  fixed  to  fixed.pdbqt
2---done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= ligcovalent  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  ligcovalent
merged  21  nonpolar hydrogens
end of base class init
using std outputfilename  ligcovalent.pdbqt
wrote  ligcovalent  to  ligcovalent.pdbqt
3---done
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> fixed:A:CYS1277 with 6 MolKit.molecule.Atom]
calling setAutoFlexFields with  fixed:A:CYS1277
in setAutoFlexFields with  fixed:A:CYS1277
Unable to assign XYZ type to atom N
Unable to assign XYZ type to atom N
len(rotatables)= 1
returning res.torscount= 1
res.root= CA
ntors= 1
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= fixed_flex.pdbqt
res_total= 1
in writeResidue with  fixed:A:CYS1277
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS1277:CA, <Atom instance> fixed:A:CYS1277:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS1277:CA, <Atom instance> fixed:A:CYS1277:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS1277:N, <Atom instance> fixed:A:CYS1277:CA)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3


writing and calling wL with nA= SG - 3
wBF2: wrote  SG
!!!2:calling wL


in writeLevel with  SG  outatom_counter= 4
len( SG ).bonds= 1
skipping b= CB - SG
returning queue= []
newQ= []
 currently queue=
CA : CB : queue= []
wrote flex file fixed_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: fixed_flex.pdbqt
wrote rigid file: fixed_rigid.pdbqt
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> ligcovalent:A:CYS1277 with 28 MolKit.molecule.Atom]
calling setAutoFlexFields with  ligcovalent:A:CYS1277
in setAutoFlexFields with  ligcovalent:A:CYS1277
len(rotatables)= 8
returning res.torscount= 7
res.root= CA
ntors= 7
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= ligcovalent_flex.pdbqt
res_total= 7
in writeResidue with  ligcovalent:A:CYS1277
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS1277:CA, <Atom instance> ligcovalent:A:CYS1277:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS1277:CA, <Atom instance> ligcovalent:A:CYS1277:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS1277:N, <Atom instance> ligcovalent:A:CYS1277:CA)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3
 currently queue= CB - SG ,
CA : CB : queue= [(<Atom instance> ligcovalent:A:CYS1277:CB, <Atom instance> ligcovalent:A:CYS1277:SG)]
 processing queue entry:  CB - SG
in wBF with fromAtom= CB + startAtom= SG startAtom.used= 0
wBF: wrote  SG
self.outatom_counter= 4
 currently queue= SG - CX ,
CB : SG : queue= [(<Atom instance> ligcovalent:A:CYS1277:SG, <Atom instance> ligcovalent:A:CYS1277:CX)]
 processing queue entry:  SG - CX
in wBF with fromAtom= SG + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 5
 currently queue= CX - CX ,
SG : CX : queue= [(<Atom instance> ligcovalent:A:CYS1277:CX, <Atom instance> ligcovalent:A:CYS1277:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 6
 currently queue= CX - CX , CX - CX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS1277:CX, <Atom instance> ligcovalent:A:CYS1277:CX), (<Atom instance> ligcovalent:A:CYS1277:CX, <Atom instance> ligcovalent:A:CYS1277:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 7


writing and calling wL with nA= NX - 7
wBF2: wrote  NX
!!!2:calling wL


in writeLevel with  NX  outatom_counter= 8
len( NX ).bonds= 3
processing b= CX - NX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
processing b= NX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= NX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 10
len( CX ).bonds= 3
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - NX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 12
len( CX ).bonds= 3
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 14
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 15
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= []
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 15
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 16
len( CX ).bonds= 3
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
processing b= OX - CX  activeTors= 1
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
CX wL: queue= [(<Atom instance> ligcovalent:A:CYS1277:CX, <Atom instance> ligcovalent:A:CYS1277:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 17
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS1277:CX, <Atom instance> ligcovalent:A:CYS1277:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS1277:CX, <Atom instance> ligcovalent:A:CYS1277:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS1277:CX, <Atom instance> ligcovalent:A:CYS1277:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS1277:CX, <Atom instance> ligcovalent:A:CYS1277:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS1277:CX, <Atom instance> ligcovalent:A:CYS1277:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS1277:CX, <Atom instance> ligcovalent:A:CYS1277:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 17
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS1277:CX, <Atom instance> ligcovalent:A:CYS1277:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS1277:CX, <Atom instance> ligcovalent:A:CYS1277:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 17
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= NX - CX
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS1277:CX, <Atom instance> ligcovalent:A:CYS1277:OX)]
newQ= [(<Atom instance> ligcovalent:A:CYS1277:CX, <Atom instance> ligcovalent:A:CYS1277:OX)]
@@@@len(newq)= 1
queue= [(<Atom instance> ligcovalent:A:CYS1277:CX, <Atom instance> ligcovalent:A:CYS1277:OX)]


writing and calling wL with nA= OX - 17
wBF2: wrote  OX
!!!2:calling wL


in writeLevel with  OX  outatom_counter= 18
len( OX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []
 currently queue= CX - OX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS1277:CX, <Atom instance> ligcovalent:A:CYS1277:OX)]
 processing queue entry:  CX - OX
in wBF with fromAtom= CX + startAtom= OX startAtom.used= 0
wBF: wrote  OX
self.outatom_counter= 19


writing and calling wL with nA= CX - 19
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 20
len( CX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []
 currently queue=
CX : OX : queue= []
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 21


writing and calling wL with nA= CX - 21
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 22
len( CX ).bonds= 1
skipping b= CX - CX
returning queue= []
newQ= []
 currently queue=
CX : CX : queue= []
wrote flex file ligcovalent_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: ligcovalent_flex.pdbqt
wrote rigid file: ligcovalent_rigid.pdbqt
4---done
setting PYTHONHOME environment
setting PYTHONHOME environment
!unable to use ligand.TORSDOF! torsdof always set to ligand.ndihe= 7
5---done
 concat 10 log files... done.
Job finished, good luck!
rm: 无法删除'chimera.com': 没有那个文件或目录
rm: 无法删除'tmp.mol2': 没有那个文件或目录
Done
Processing residue A:CYS45
[start] output filename is: ligcovalent_single.pdb
CHAIN A
Writing output filename: ligcovalent_single.pdb
1---ligcovalent.pdb prepared...
1.5--done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= fixed  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
Unable to assign MAP type to atom N
Sorry, there are no Gasteiger parameters available for atom fixed:A:HIS531:NE2
Unable to assign MAP type to atom N
Sorry, there are no Gasteiger parameters available for atom fixed:A:HIS1072:NE2
added gasteigercharges to  fixed
merged  0  nonpolar hydrogens
end of base class init
using std outputfilename  fixed.pdbqt
wrote  fixed  to  fixed.pdbqt
2---done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= ligcovalent  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  ligcovalent
merged  21  nonpolar hydrogens
end of base class init
using std outputfilename  ligcovalent.pdbqt
wrote  ligcovalent  to  ligcovalent.pdbqt
3---done
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> fixed:A:CYS45 with 6 MolKit.molecule.Atom]
calling setAutoFlexFields with  fixed:A:CYS45
in setAutoFlexFields with  fixed:A:CYS45
Unable to assign XYZ type to atom N
Unable to assign XYZ type to atom N
len(rotatables)= 1
returning res.torscount= 1
res.root= CA
ntors= 1
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= fixed_flex.pdbqt
res_total= 1
in writeResidue with  fixed:A:CYS45
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS45:CA, <Atom instance> fixed:A:CYS45:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS45:CA, <Atom instance> fixed:A:CYS45:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS45:N, <Atom instance> fixed:A:CYS45:CA)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3


writing and calling wL with nA= SG - 3
wBF2: wrote  SG
!!!2:calling wL


in writeLevel with  SG  outatom_counter= 4
len( SG ).bonds= 1
skipping b= CB - SG
returning queue= []
newQ= []
 currently queue=
CA : CB : queue= []
wrote flex file fixed_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: fixed_flex.pdbqt
wrote rigid file: fixed_rigid.pdbqt
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> ligcovalent:A:CYS45 with 28 MolKit.molecule.Atom]
calling setAutoFlexFields with  ligcovalent:A:CYS45
in setAutoFlexFields with  ligcovalent:A:CYS45
len(rotatables)= 8
returning res.torscount= 7
res.root= CA
ntors= 7
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= ligcovalent_flex.pdbqt
res_total= 7
in writeResidue with  ligcovalent:A:CYS45
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS45:CA, <Atom instance> ligcovalent:A:CYS45:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS45:CA, <Atom instance> ligcovalent:A:CYS45:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS45:N, <Atom instance> ligcovalent:A:CYS45:CA)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3
 currently queue= CB - SG ,
CA : CB : queue= [(<Atom instance> ligcovalent:A:CYS45:CB, <Atom instance> ligcovalent:A:CYS45:SG)]
 processing queue entry:  CB - SG
in wBF with fromAtom= CB + startAtom= SG startAtom.used= 0
wBF: wrote  SG
self.outatom_counter= 4
 currently queue= SG - CX ,
CB : SG : queue= [(<Atom instance> ligcovalent:A:CYS45:SG, <Atom instance> ligcovalent:A:CYS45:CX)]
 processing queue entry:  SG - CX
in wBF with fromAtom= SG + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 5
 currently queue= CX - CX ,
SG : CX : queue= [(<Atom instance> ligcovalent:A:CYS45:CX, <Atom instance> ligcovalent:A:CYS45:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 6
 currently queue= CX - CX , CX - CX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS45:CX, <Atom instance> ligcovalent:A:CYS45:CX), (<Atom instance> ligcovalent:A:CYS45:CX, <Atom instance> ligcovalent:A:CYS45:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 7


writing and calling wL with nA= NX - 7
wBF2: wrote  NX
!!!2:calling wL


in writeLevel with  NX  outatom_counter= 8
len( NX ).bonds= 3
processing b= NX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= NX - CX
processing b= CX - NX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 10
len( CX ).bonds= 2
skipping b= NX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 11
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 12
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 13
len( CX ).bonds= 3
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 14
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 15
len( CX ).bonds= 3
processing b= OX - CX  activeTors= 1
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
CX wL: queue= [(<Atom instance> ligcovalent:A:CYS45:CX, <Atom instance> ligcovalent:A:CYS45:OX)]
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 16
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 17
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS45:CX, <Atom instance> ligcovalent:A:CYS45:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS45:CX, <Atom instance> ligcovalent:A:CYS45:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS45:CX, <Atom instance> ligcovalent:A:CYS45:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS45:CX, <Atom instance> ligcovalent:A:CYS45:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS45:CX, <Atom instance> ligcovalent:A:CYS45:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS45:CX, <Atom instance> ligcovalent:A:CYS45:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS45:CX, <Atom instance> ligcovalent:A:CYS45:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS45:CX, <Atom instance> ligcovalent:A:CYS45:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS45:CX, <Atom instance> ligcovalent:A:CYS45:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS45:CX, <Atom instance> ligcovalent:A:CYS45:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS45:CX, <Atom instance> ligcovalent:A:CYS45:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS45:CX, <Atom instance> ligcovalent:A:CYS45:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 17
len( CX ).bonds= 3
skipping b= CX - CX
skipping b= CX - CX
skipping b= CX - NX
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS45:CX, <Atom instance> ligcovalent:A:CYS45:OX)]
newQ= [(<Atom instance> ligcovalent:A:CYS45:CX, <Atom instance> ligcovalent:A:CYS45:OX)]
@@@@len(newq)= 1
queue= [(<Atom instance> ligcovalent:A:CYS45:CX, <Atom instance> ligcovalent:A:CYS45:OX)]


writing and calling wL with nA= OX - 17
wBF2: wrote  OX
!!!2:calling wL


in writeLevel with  OX  outatom_counter= 18
len( OX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []
 currently queue= CX - OX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS45:CX, <Atom instance> ligcovalent:A:CYS45:OX)]
 processing queue entry:  CX - OX
in wBF with fromAtom= CX + startAtom= OX startAtom.used= 0
wBF: wrote  OX
self.outatom_counter= 19


writing and calling wL with nA= CX - 19
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 20
len( CX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []
 currently queue=
CX : OX : queue= []
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 21


writing and calling wL with nA= CX - 21
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 22
len( CX ).bonds= 1
skipping b= CX - CX
returning queue= []
newQ= []
 currently queue=
CX : CX : queue= []
wrote flex file ligcovalent_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: ligcovalent_flex.pdbqt
wrote rigid file: ligcovalent_rigid.pdbqt
4---done
setting PYTHONHOME environment
setting PYTHONHOME environment
!unable to use ligand.TORSDOF! torsdof always set to ligand.ndihe= 7
5---done
 concat 10 log files... done.
Job finished, good luck!
rm: 无法删除'chimera.com': 没有那个文件或目录
rm: 无法删除'tmp.mol2': 没有那个文件或目录
Done
Processing residue A:CYS140
[start] output filename is: ligcovalent_single.pdb
CHAIN A
Writing output filename: ligcovalent_single.pdb
1---ligcovalent.pdb prepared...
1.5--done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= fixed  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  fixed
merged  0  nonpolar hydrogens
end of base class init
using std outputfilename  fixed.pdbqt
wrote  fixed  to  fixed.pdbqt
2---done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= ligcovalent  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  ligcovalent
merged  21  nonpolar hydrogens
end of base class init
using std outputfilename  ligcovalent.pdbqt
wrote  ligcovalent  to  ligcovalent.pdbqt
3---done
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> fixed:A:CYS140 with 6 MolKit.molecule.Atom]
calling setAutoFlexFields with  fixed:A:CYS140
in setAutoFlexFields with  fixed:A:CYS140
len(rotatables)= 1
returning res.torscount= 1
res.root= CA
ntors= 1
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= fixed_flex.pdbqt
res_total= 1
in writeResidue with  fixed:A:CYS140
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS140:N, <Atom instance> fixed:A:CYS140:CA)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS140:CA, <Atom instance> fixed:A:CYS140:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS140:CA, <Atom instance> fixed:A:CYS140:C)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3


writing and calling wL with nA= SG - 3
wBF2: wrote  SG
!!!2:calling wL


in writeLevel with  SG  outatom_counter= 4
len( SG ).bonds= 1
skipping b= CB - SG
returning queue= []
newQ= []
 currently queue=
CA : CB : queue= []
wrote flex file fixed_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: fixed_flex.pdbqt
wrote rigid file: fixed_rigid.pdbqt
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> ligcovalent:A:CYS140 with 28 MolKit.molecule.Atom]
calling setAutoFlexFields with  ligcovalent:A:CYS140
in setAutoFlexFields with  ligcovalent:A:CYS140
len(rotatables)= 8
returning res.torscount= 7
res.root= CA
ntors= 7
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= ligcovalent_flex.pdbqt
res_total= 7
in writeResidue with  ligcovalent:A:CYS140
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS140:N, <Atom instance> ligcovalent:A:CYS140:CA)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS140:CA, <Atom instance> ligcovalent:A:CYS140:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS140:CA, <Atom instance> ligcovalent:A:CYS140:C)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3
 currently queue= CB - SG ,
CA : CB : queue= [(<Atom instance> ligcovalent:A:CYS140:CB, <Atom instance> ligcovalent:A:CYS140:SG)]
 processing queue entry:  CB - SG
in wBF with fromAtom= CB + startAtom= SG startAtom.used= 0
wBF: wrote  SG
self.outatom_counter= 4
 currently queue= SG - CX ,
CB : SG : queue= [(<Atom instance> ligcovalent:A:CYS140:SG, <Atom instance> ligcovalent:A:CYS140:CX)]
 processing queue entry:  SG - CX
in wBF with fromAtom= SG + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 5
 currently queue= CX - CX ,
SG : CX : queue= [(<Atom instance> ligcovalent:A:CYS140:CX, <Atom instance> ligcovalent:A:CYS140:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 6
 currently queue= CX - CX , CX - CX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS140:CX, <Atom instance> ligcovalent:A:CYS140:CX), (<Atom instance> ligcovalent:A:CYS140:CX, <Atom instance> ligcovalent:A:CYS140:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 7


writing and calling wL with nA= CX - 7
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 8
len( CX ).bonds= 1
skipping b= CX - CX
returning queue= []
newQ= []
 currently queue=
CX : CX : queue= []
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 9


writing and calling wL with nA= NX - 9
wBF2: wrote  NX
!!!2:calling wL


in writeLevel with  NX  outatom_counter= 10
len( NX ).bonds= 3
processing b= CX - NX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
processing b= NX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= NX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 12
len( CX ).bonds= 3
skipping b= CX - NX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 14
len( CX ).bonds= 3
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 16
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 17
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= []
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 17
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 18
len( CX ).bonds= 3
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
processing b= OX - CX  activeTors= 1
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
CX wL: queue= [(<Atom instance> ligcovalent:A:CYS140:CX, <Atom instance> ligcovalent:A:CYS140:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 19
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS140:CX, <Atom instance> ligcovalent:A:CYS140:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS140:CX, <Atom instance> ligcovalent:A:CYS140:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS140:CX, <Atom instance> ligcovalent:A:CYS140:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS140:CX, <Atom instance> ligcovalent:A:CYS140:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS140:CX, <Atom instance> ligcovalent:A:CYS140:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS140:CX, <Atom instance> ligcovalent:A:CYS140:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 19
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS140:CX, <Atom instance> ligcovalent:A:CYS140:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS140:CX, <Atom instance> ligcovalent:A:CYS140:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 19
len( CX ).bonds= 2
skipping b= NX - CX
skipping b= CX - CX
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS140:CX, <Atom instance> ligcovalent:A:CYS140:OX)]
newQ= [(<Atom instance> ligcovalent:A:CYS140:CX, <Atom instance> ligcovalent:A:CYS140:OX)]
@@@@len(newq)= 1
queue= [(<Atom instance> ligcovalent:A:CYS140:CX, <Atom instance> ligcovalent:A:CYS140:OX)]


writing and calling wL with nA= OX - 19
wBF2: wrote  OX
!!!2:calling wL


in writeLevel with  OX  outatom_counter= 20
len( OX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []
 currently queue= CX - OX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS140:CX, <Atom instance> ligcovalent:A:CYS140:OX)]
 processing queue entry:  CX - OX
in wBF with fromAtom= CX + startAtom= OX startAtom.used= 0
wBF: wrote  OX
self.outatom_counter= 21


writing and calling wL with nA= CX - 21
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 22
len( CX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []
 currently queue=
CX : OX : queue= []
wrote flex file ligcovalent_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: ligcovalent_flex.pdbqt
wrote rigid file: ligcovalent_rigid.pdbqt
4---done
setting PYTHONHOME environment
setting PYTHONHOME environment
!unable to use ligand.TORSDOF! torsdof always set to ligand.ndihe= 7
5---done
 concat 10 log files... done.
Job finished, good luck!
rm: 无法删除'chimera.com': 没有那个文件或目录
rm: 无法删除'tmp.mol2': 没有那个文件或目录
Done
Processing residue A:CYS596
[start] output filename is: ligcovalent_single.pdb
CHAIN A
Writing output filename: ligcovalent_single.pdb
1---ligcovalent.pdb prepared...
1.5--done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= fixed  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  fixed
merged  0  nonpolar hydrogens
end of base class init
using std outputfilename  fixed.pdbqt
wrote  fixed  to  fixed.pdbqt
2---done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= ligcovalent  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  ligcovalent
merged  21  nonpolar hydrogens
end of base class init
using std outputfilename  ligcovalent.pdbqt
wrote  ligcovalent  to  ligcovalent.pdbqt
3---done
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> fixed:A:CYS596 with 6 MolKit.molecule.Atom]
calling setAutoFlexFields with  fixed:A:CYS596
in setAutoFlexFields with  fixed:A:CYS596
len(rotatables)= 1
returning res.torscount= 1
res.root= CA
ntors= 1
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= fixed_flex.pdbqt
res_total= 1
in writeResidue with  fixed:A:CYS596
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS596:CA, <Atom instance> fixed:A:CYS596:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS596:CA, <Atom instance> fixed:A:CYS596:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS596:N, <Atom instance> fixed:A:CYS596:CA)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3


writing and calling wL with nA= SG - 3
wBF2: wrote  SG
!!!2:calling wL


in writeLevel with  SG  outatom_counter= 4
len( SG ).bonds= 1
skipping b= CB - SG
returning queue= []
newQ= []
 currently queue=
CA : CB : queue= []
wrote flex file fixed_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: fixed_flex.pdbqt
wrote rigid file: fixed_rigid.pdbqt
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> ligcovalent:A:CYS596 with 28 MolKit.molecule.Atom]
calling setAutoFlexFields with  ligcovalent:A:CYS596
in setAutoFlexFields with  ligcovalent:A:CYS596
len(rotatables)= 8
returning res.torscount= 7
res.root= CA
ntors= 7
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= ligcovalent_flex.pdbqt
res_total= 7
in writeResidue with  ligcovalent:A:CYS596
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS596:N, <Atom instance> ligcovalent:A:CYS596:CA)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS596:CA, <Atom instance> ligcovalent:A:CYS596:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS596:CA, <Atom instance> ligcovalent:A:CYS596:CB)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3
 currently queue= CB - SG ,
CA : CB : queue= [(<Atom instance> ligcovalent:A:CYS596:CB, <Atom instance> ligcovalent:A:CYS596:SG)]
 processing queue entry:  CB - SG
in wBF with fromAtom= CB + startAtom= SG startAtom.used= 0
wBF: wrote  SG
self.outatom_counter= 4
 currently queue= SG - CX ,
CB : SG : queue= [(<Atom instance> ligcovalent:A:CYS596:SG, <Atom instance> ligcovalent:A:CYS596:CX)]
 processing queue entry:  SG - CX
in wBF with fromAtom= SG + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 5
 currently queue= CX - CX ,
SG : CX : queue= [(<Atom instance> ligcovalent:A:CYS596:CX, <Atom instance> ligcovalent:A:CYS596:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 6
 currently queue= CX - CX , CX - CX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS596:CX, <Atom instance> ligcovalent:A:CYS596:CX), (<Atom instance> ligcovalent:A:CYS596:CX, <Atom instance> ligcovalent:A:CYS596:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 7


writing and calling wL with nA= CX - 7
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 8
len( CX ).bonds= 1
skipping b= CX - CX
returning queue= []
newQ= []
 currently queue=
CX : CX : queue= []
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 9


writing and calling wL with nA= NX - 9
wBF2: wrote  NX
!!!2:calling wL


in writeLevel with  NX  outatom_counter= 10
len( NX ).bonds= 3
processing b= CX - NX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
processing b= NX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= NX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 12
len( CX ).bonds= 3
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - NX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 14
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 15
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 16
len( CX ).bonds= 3
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
processing b= OX - CX  activeTors= 1
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
CX wL: queue= [(<Atom instance> ligcovalent:A:CYS596:CX, <Atom instance> ligcovalent:A:CYS596:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 17
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS596:CX, <Atom instance> ligcovalent:A:CYS596:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS596:CX, <Atom instance> ligcovalent:A:CYS596:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS596:CX, <Atom instance> ligcovalent:A:CYS596:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS596:CX, <Atom instance> ligcovalent:A:CYS596:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS596:CX, <Atom instance> ligcovalent:A:CYS596:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS596:CX, <Atom instance> ligcovalent:A:CYS596:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 17
len( CX ).bonds= 3
skipping b= CX - CX
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 18
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 19
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= []
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS596:CX, <Atom instance> ligcovalent:A:CYS596:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS596:CX, <Atom instance> ligcovalent:A:CYS596:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 19
len( CX ).bonds= 2
skipping b= NX - CX
skipping b= CX - CX
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS596:CX, <Atom instance> ligcovalent:A:CYS596:OX)]
newQ= [(<Atom instance> ligcovalent:A:CYS596:CX, <Atom instance> ligcovalent:A:CYS596:OX)]
@@@@len(newq)= 1
queue= [(<Atom instance> ligcovalent:A:CYS596:CX, <Atom instance> ligcovalent:A:CYS596:OX)]


writing and calling wL with nA= OX - 19
wBF2: wrote  OX
!!!2:calling wL


in writeLevel with  OX  outatom_counter= 20
len( OX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []
 currently queue= CX - OX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS596:CX, <Atom instance> ligcovalent:A:CYS596:OX)]
 processing queue entry:  CX - OX
in wBF with fromAtom= CX + startAtom= OX startAtom.used= 0
wBF: wrote  OX
self.outatom_counter= 21


writing and calling wL with nA= CX - 21
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 22
len( CX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []
 currently queue=
CX : OX : queue= []
wrote flex file ligcovalent_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: ligcovalent_flex.pdbqt
wrote rigid file: ligcovalent_rigid.pdbqt
4---done
setting PYTHONHOME environment
setting PYTHONHOME environment
!unable to use ligand.TORSDOF! torsdof always set to ligand.ndihe= 7
5---done
 concat 10 log files... done.
Job finished, good luck!
rm: 无法删除'chimera.com': 没有那个文件或目录
rm: 无法删除'tmp.mol2': 没有那个文件或目录
Done
Processing residue A:CYS96
[start] output filename is: ligcovalent_single.pdb
CHAIN A
Writing output filename: ligcovalent_single.pdb
1---ligcovalent.pdb prepared...
1.5--done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= fixed  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  fixed
merged  0  nonpolar hydrogens
end of base class init
using std outputfilename  fixed.pdbqt
wrote  fixed  to  fixed.pdbqt
2---done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= ligcovalent  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  ligcovalent
merged  21  nonpolar hydrogens
end of base class init
using std outputfilename  ligcovalent.pdbqt
wrote  ligcovalent  to  ligcovalent.pdbqt
3---done
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> fixed:A:CYS96 with 6 MolKit.molecule.Atom]
calling setAutoFlexFields with  fixed:A:CYS96
in setAutoFlexFields with  fixed:A:CYS96
len(rotatables)= 1
returning res.torscount= 1
res.root= CA
ntors= 1
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= fixed_flex.pdbqt
res_total= 1
in writeResidue with  fixed:A:CYS96
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS96:CA, <Atom instance> fixed:A:CYS96:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS96:CA, <Atom instance> fixed:A:CYS96:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS96:N, <Atom instance> fixed:A:CYS96:CA)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3


writing and calling wL with nA= SG - 3
wBF2: wrote  SG
!!!2:calling wL


in writeLevel with  SG  outatom_counter= 4
len( SG ).bonds= 1
skipping b= CB - SG
returning queue= []
newQ= []
 currently queue=
CA : CB : queue= []
wrote flex file fixed_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: fixed_flex.pdbqt
wrote rigid file: fixed_rigid.pdbqt
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> ligcovalent:A:CYS96 with 28 MolKit.molecule.Atom]
calling setAutoFlexFields with  ligcovalent:A:CYS96
in setAutoFlexFields with  ligcovalent:A:CYS96
len(rotatables)= 8
returning res.torscount= 7
res.root= CA
ntors= 7
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= ligcovalent_flex.pdbqt
res_total= 7
in writeResidue with  ligcovalent:A:CYS96
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS96:CA, <Atom instance> ligcovalent:A:CYS96:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS96:CA, <Atom instance> ligcovalent:A:CYS96:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS96:N, <Atom instance> ligcovalent:A:CYS96:CA)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3
 currently queue= CB - SG ,
CA : CB : queue= [(<Atom instance> ligcovalent:A:CYS96:CB, <Atom instance> ligcovalent:A:CYS96:SG)]
 processing queue entry:  CB - SG
in wBF with fromAtom= CB + startAtom= SG startAtom.used= 0
wBF: wrote  SG
self.outatom_counter= 4
 currently queue= SG - CX ,
CB : SG : queue= [(<Atom instance> ligcovalent:A:CYS96:SG, <Atom instance> ligcovalent:A:CYS96:CX)]
 processing queue entry:  SG - CX
in wBF with fromAtom= SG + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 5
 currently queue= CX - CX ,
SG : CX : queue= [(<Atom instance> ligcovalent:A:CYS96:CX, <Atom instance> ligcovalent:A:CYS96:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 6
 currently queue= CX - CX , CX - CX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS96:CX, <Atom instance> ligcovalent:A:CYS96:CX), (<Atom instance> ligcovalent:A:CYS96:CX, <Atom instance> ligcovalent:A:CYS96:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 7


writing and calling wL with nA= OX - 7
wBF2: wrote  OX
!!!2:calling wL


in writeLevel with  OX  outatom_counter= 8
len( OX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []


writing and calling wL with nA= NX - 8
wBF2: wrote  NX
!!!2:calling wL


in writeLevel with  NX  outatom_counter= 9
len( NX ).bonds= 3
skipping b= NX - CX
processing b= NX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
processing b= CX - NX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 11
len( CX ).bonds= 2
skipping b= NX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 12
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 13
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 14
len( CX ).bonds= 3
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 15
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 16
len( CX ).bonds= 3
processing b= OX - CX  activeTors= 1
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
CX wL: queue= [(<Atom instance> ligcovalent:A:CYS96:CX, <Atom instance> ligcovalent:A:CYS96:OX)]
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 17
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 18
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS96:CX, <Atom instance> ligcovalent:A:CYS96:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS96:CX, <Atom instance> ligcovalent:A:CYS96:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS96:CX, <Atom instance> ligcovalent:A:CYS96:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS96:CX, <Atom instance> ligcovalent:A:CYS96:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS96:CX, <Atom instance> ligcovalent:A:CYS96:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS96:CX, <Atom instance> ligcovalent:A:CYS96:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS96:CX, <Atom instance> ligcovalent:A:CYS96:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS96:CX, <Atom instance> ligcovalent:A:CYS96:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS96:CX, <Atom instance> ligcovalent:A:CYS96:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS96:CX, <Atom instance> ligcovalent:A:CYS96:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS96:CX, <Atom instance> ligcovalent:A:CYS96:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS96:CX, <Atom instance> ligcovalent:A:CYS96:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 18
len( CX ).bonds= 3
skipping b= CX - CX
skipping b= CX - NX
skipping b= CX - CX
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS96:CX, <Atom instance> ligcovalent:A:CYS96:OX)]
newQ= [(<Atom instance> ligcovalent:A:CYS96:CX, <Atom instance> ligcovalent:A:CYS96:OX)]
@@@@len(newq)= 1
queue= [(<Atom instance> ligcovalent:A:CYS96:CX, <Atom instance> ligcovalent:A:CYS96:OX)]
 currently queue= CX - OX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS96:CX, <Atom instance> ligcovalent:A:CYS96:OX)]
 processing queue entry:  CX - OX
in wBF with fromAtom= CX + startAtom= OX startAtom.used= 0
wBF: wrote  OX
self.outatom_counter= 19


writing and calling wL with nA= CX - 19
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 20
len( CX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []
 currently queue=
CX : OX : queue= []
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 21


writing and calling wL with nA= CX - 21
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 22
len( CX ).bonds= 1
skipping b= CX - CX
returning queue= []
newQ= []
 currently queue=
CX : CX : queue= []
wrote flex file ligcovalent_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: ligcovalent_flex.pdbqt
wrote rigid file: ligcovalent_rigid.pdbqt
4---done
setting PYTHONHOME environment
setting PYTHONHOME environment
!unable to use ligand.TORSDOF! torsdof always set to ligand.ndihe= 7
5---done
 concat 10 log files... done.
Job finished, good luck!
rm: 无法删除'chimera.com': 没有那个文件或目录
rm: 无法删除'tmp.mol2': 没有那个文件或目录
Done
Processing residue A:CYS237
[start] output filename is: ligcovalent_single.pdb
CHAIN A
Writing output filename: ligcovalent_single.pdb
1---ligcovalent.pdb prepared...
1.5--done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= fixed  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  fixed
merged  0  nonpolar hydrogens
end of base class init
using std outputfilename  fixed.pdbqt
wrote  fixed  to  fixed.pdbqt
2---done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= ligcovalent  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  ligcovalent
merged  21  nonpolar hydrogens
end of base class init
using std outputfilename  ligcovalent.pdbqt
wrote  ligcovalent  to  ligcovalent.pdbqt
3---done
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> fixed:A:CYS237 with 6 MolKit.molecule.Atom]
calling setAutoFlexFields with  fixed:A:CYS237
in setAutoFlexFields with  fixed:A:CYS237
len(rotatables)= 1
returning res.torscount= 1
res.root= CA
ntors= 1
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= fixed_flex.pdbqt
res_total= 1
in writeResidue with  fixed:A:CYS237
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS237:N, <Atom instance> fixed:A:CYS237:CA)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS237:CA, <Atom instance> fixed:A:CYS237:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS237:CA, <Atom instance> fixed:A:CYS237:CB)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3


writing and calling wL with nA= SG - 3
wBF2: wrote  SG
!!!2:calling wL


in writeLevel with  SG  outatom_counter= 4
len( SG ).bonds= 1
skipping b= CB - SG
returning queue= []
newQ= []
 currently queue=
CA : CB : queue= []
wrote flex file fixed_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: fixed_flex.pdbqt
wrote rigid file: fixed_rigid.pdbqt
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> ligcovalent:A:CYS237 with 28 MolKit.molecule.Atom]
calling setAutoFlexFields with  ligcovalent:A:CYS237
in setAutoFlexFields with  ligcovalent:A:CYS237
len(rotatables)= 8
returning res.torscount= 7
res.root= CA
ntors= 7
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= ligcovalent_flex.pdbqt
res_total= 7
in writeResidue with  ligcovalent:A:CYS237
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS237:N, <Atom instance> ligcovalent:A:CYS237:CA)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS237:CA, <Atom instance> ligcovalent:A:CYS237:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS237:CA, <Atom instance> ligcovalent:A:CYS237:C)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3
 currently queue= CB - SG ,
CA : CB : queue= [(<Atom instance> ligcovalent:A:CYS237:CB, <Atom instance> ligcovalent:A:CYS237:SG)]
 processing queue entry:  CB - SG
in wBF with fromAtom= CB + startAtom= SG startAtom.used= 0
wBF: wrote  SG
self.outatom_counter= 4
 currently queue= SG - CX ,
CB : SG : queue= [(<Atom instance> ligcovalent:A:CYS237:SG, <Atom instance> ligcovalent:A:CYS237:CX)]
 processing queue entry:  SG - CX
in wBF with fromAtom= SG + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 5
 currently queue= CX - CX ,
SG : CX : queue= [(<Atom instance> ligcovalent:A:CYS237:CX, <Atom instance> ligcovalent:A:CYS237:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 6
 currently queue= CX - CX , CX - CX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS237:CX, <Atom instance> ligcovalent:A:CYS237:CX), (<Atom instance> ligcovalent:A:CYS237:CX, <Atom instance> ligcovalent:A:CYS237:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 7


writing and calling wL with nA= CX - 7
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 8
len( CX ).bonds= 1
skipping b= CX - CX
returning queue= []
newQ= []
 currently queue=
CX : CX : queue= []
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 9


writing and calling wL with nA= NX - 9
wBF2: wrote  NX
!!!2:calling wL


in writeLevel with  NX  outatom_counter= 10
len( NX ).bonds= 3
processing b= CX - NX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
processing b= NX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= NX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 12
len( CX ).bonds= 3
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - NX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 14
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 15
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 16
len( CX ).bonds= 3
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
processing b= OX - CX  activeTors= 1
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
CX wL: queue= [(<Atom instance> ligcovalent:A:CYS237:CX, <Atom instance> ligcovalent:A:CYS237:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 17
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS237:CX, <Atom instance> ligcovalent:A:CYS237:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS237:CX, <Atom instance> ligcovalent:A:CYS237:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS237:CX, <Atom instance> ligcovalent:A:CYS237:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS237:CX, <Atom instance> ligcovalent:A:CYS237:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS237:CX, <Atom instance> ligcovalent:A:CYS237:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS237:CX, <Atom instance> ligcovalent:A:CYS237:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 17
len( CX ).bonds= 3
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 18
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 19
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= []
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS237:CX, <Atom instance> ligcovalent:A:CYS237:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS237:CX, <Atom instance> ligcovalent:A:CYS237:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 19
len( CX ).bonds= 2
skipping b= NX - CX
skipping b= CX - CX
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS237:CX, <Atom instance> ligcovalent:A:CYS237:OX)]
newQ= [(<Atom instance> ligcovalent:A:CYS237:CX, <Atom instance> ligcovalent:A:CYS237:OX)]
@@@@len(newq)= 1
queue= [(<Atom instance> ligcovalent:A:CYS237:CX, <Atom instance> ligcovalent:A:CYS237:OX)]


writing and calling wL with nA= OX - 19
wBF2: wrote  OX
!!!2:calling wL


in writeLevel with  OX  outatom_counter= 20
len( OX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []
 currently queue= CX - OX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS237:CX, <Atom instance> ligcovalent:A:CYS237:OX)]
 processing queue entry:  CX - OX
in wBF with fromAtom= CX + startAtom= OX startAtom.used= 0
wBF: wrote  OX
self.outatom_counter= 21


writing and calling wL with nA= CX - 21
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 22
len( CX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []
 currently queue=
CX : OX : queue= []
wrote flex file ligcovalent_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: ligcovalent_flex.pdbqt
wrote rigid file: ligcovalent_rigid.pdbqt
4---done
setting PYTHONHOME environment
setting PYTHONHOME environment
!unable to use ligand.TORSDOF! torsdof always set to ligand.ndihe= 7
5---done
 concat 10 log files... done.
Job finished, good luck!
rm: 无法删除'chimera.com': 没有那个文件或目录
rm: 无法删除'tmp.mol2': 没有那个文件或目录
Done
Processing residue A:CYS336
[start] output filename is: ligcovalent_single.pdb
CHAIN A
Writing output filename: ligcovalent_single.pdb
1---ligcovalent.pdb prepared...
1.5--done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= fixed  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  fixed
merged  0  nonpolar hydrogens
end of base class init
using std outputfilename  fixed.pdbqt
wrote  fixed  to  fixed.pdbqt
2---done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= ligcovalent  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  ligcovalent
merged  21  nonpolar hydrogens
end of base class init
using std outputfilename  ligcovalent.pdbqt
wrote  ligcovalent  to  ligcovalent.pdbqt
3---done
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> fixed:A:CYS336 with 6 MolKit.molecule.Atom]
calling setAutoFlexFields with  fixed:A:CYS336
in setAutoFlexFields with  fixed:A:CYS336
len(rotatables)= 1
returning res.torscount= 1
res.root= CA
ntors= 1
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= fixed_flex.pdbqt
res_total= 1
in writeResidue with  fixed:A:CYS336
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS336:CA, <Atom instance> fixed:A:CYS336:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS336:CA, <Atom instance> fixed:A:CYS336:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS336:N, <Atom instance> fixed:A:CYS336:CA)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3


writing and calling wL with nA= SG - 3
wBF2: wrote  SG
!!!2:calling wL


in writeLevel with  SG  outatom_counter= 4
len( SG ).bonds= 1
skipping b= CB - SG
returning queue= []
newQ= []
 currently queue=
CA : CB : queue= []
wrote flex file fixed_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: fixed_flex.pdbqt
wrote rigid file: fixed_rigid.pdbqt
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> ligcovalent:A:CYS336 with 28 MolKit.molecule.Atom]
calling setAutoFlexFields with  ligcovalent:A:CYS336
in setAutoFlexFields with  ligcovalent:A:CYS336
len(rotatables)= 8
returning res.torscount= 7
res.root= CA
ntors= 7
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= ligcovalent_flex.pdbqt
res_total= 7
in writeResidue with  ligcovalent:A:CYS336
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS336:CA, <Atom instance> ligcovalent:A:CYS336:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS336:CA, <Atom instance> ligcovalent:A:CYS336:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS336:N, <Atom instance> ligcovalent:A:CYS336:CA)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3
 currently queue= CB - SG ,
CA : CB : queue= [(<Atom instance> ligcovalent:A:CYS336:CB, <Atom instance> ligcovalent:A:CYS336:SG)]
 processing queue entry:  CB - SG
in wBF with fromAtom= CB + startAtom= SG startAtom.used= 0
wBF: wrote  SG
self.outatom_counter= 4
 currently queue= SG - CX ,
CB : SG : queue= [(<Atom instance> ligcovalent:A:CYS336:SG, <Atom instance> ligcovalent:A:CYS336:CX)]
 processing queue entry:  SG - CX
in wBF with fromAtom= SG + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 5
 currently queue= CX - CX ,
SG : CX : queue= [(<Atom instance> ligcovalent:A:CYS336:CX, <Atom instance> ligcovalent:A:CYS336:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 6
 currently queue= CX - CX , CX - CX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS336:CX, <Atom instance> ligcovalent:A:CYS336:CX), (<Atom instance> ligcovalent:A:CYS336:CX, <Atom instance> ligcovalent:A:CYS336:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 7


writing and calling wL with nA= OX - 7
wBF2: wrote  OX
!!!2:calling wL


in writeLevel with  OX  outatom_counter= 8
len( OX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []


writing and calling wL with nA= NX - 8
wBF2: wrote  NX
!!!2:calling wL


in writeLevel with  NX  outatom_counter= 9
len( NX ).bonds= 3
skipping b= NX - CX
processing b= NX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
processing b= CX - NX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 11
len( CX ).bonds= 2
skipping b= NX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 12
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 13
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 14
len( CX ).bonds= 3
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 15
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 16
len( CX ).bonds= 3
processing b= OX - CX  activeTors= 1
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
CX wL: queue= [(<Atom instance> ligcovalent:A:CYS336:CX, <Atom instance> ligcovalent:A:CYS336:OX)]
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 17
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 18
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS336:CX, <Atom instance> ligcovalent:A:CYS336:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS336:CX, <Atom instance> ligcovalent:A:CYS336:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS336:CX, <Atom instance> ligcovalent:A:CYS336:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS336:CX, <Atom instance> ligcovalent:A:CYS336:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS336:CX, <Atom instance> ligcovalent:A:CYS336:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS336:CX, <Atom instance> ligcovalent:A:CYS336:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS336:CX, <Atom instance> ligcovalent:A:CYS336:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS336:CX, <Atom instance> ligcovalent:A:CYS336:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS336:CX, <Atom instance> ligcovalent:A:CYS336:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS336:CX, <Atom instance> ligcovalent:A:CYS336:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS336:CX, <Atom instance> ligcovalent:A:CYS336:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS336:CX, <Atom instance> ligcovalent:A:CYS336:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 18
len( CX ).bonds= 3
skipping b= CX - CX
skipping b= CX - CX
skipping b= CX - NX
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS336:CX, <Atom instance> ligcovalent:A:CYS336:OX)]
newQ= [(<Atom instance> ligcovalent:A:CYS336:CX, <Atom instance> ligcovalent:A:CYS336:OX)]
@@@@len(newq)= 1
queue= [(<Atom instance> ligcovalent:A:CYS336:CX, <Atom instance> ligcovalent:A:CYS336:OX)]
 currently queue= CX - OX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS336:CX, <Atom instance> ligcovalent:A:CYS336:OX)]
 processing queue entry:  CX - OX
in wBF with fromAtom= CX + startAtom= OX startAtom.used= 0
wBF: wrote  OX
self.outatom_counter= 19


writing and calling wL with nA= CX - 19
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 20
len( CX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []
 currently queue=
CX : OX : queue= []
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 21


writing and calling wL with nA= CX - 21
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 22
len( CX ).bonds= 1
skipping b= CX - CX
returning queue= []
newQ= []
 currently queue=
CX : CX : queue= []
wrote flex file ligcovalent_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: ligcovalent_flex.pdbqt
wrote rigid file: ligcovalent_rigid.pdbqt
4---done
setting PYTHONHOME environment
setting PYTHONHOME environment
!unable to use ligand.TORSDOF! torsdof always set to ligand.ndihe= 7
5---done
 concat 10 log files... done.
Job finished, good luck!
rm: 无法删除'chimera.com': 没有那个文件或目录
rm: 无法删除'tmp.mol2': 没有那个文件或目录
Done
Processing residue A:CYS51
[start] output filename is: ligcovalent_single.pdb
CHAIN A
Writing output filename: ligcovalent_single.pdb
1---ligcovalent.pdb prepared...
1.5--done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= fixed  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  fixed
merged  0  nonpolar hydrogens
end of base class init
using std outputfilename  fixed.pdbqt
wrote  fixed  to  fixed.pdbqt
2---done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= ligcovalent  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  ligcovalent
merged  20  nonpolar hydrogens
end of base class init
using std outputfilename  ligcovalent.pdbqt
wrote  ligcovalent  to  ligcovalent.pdbqt
3---done
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> fixed:A:CYS51 with 6 MolKit.molecule.Atom]
calling setAutoFlexFields with  fixed:A:CYS51
in setAutoFlexFields with  fixed:A:CYS51
len(rotatables)= 1
returning res.torscount= 1
res.root= CA
ntors= 1
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= fixed_flex.pdbqt
res_total= 1
in writeResidue with  fixed:A:CYS51
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS51:CA, <Atom instance> fixed:A:CYS51:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS51:CA, <Atom instance> fixed:A:CYS51:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS51:N, <Atom instance> fixed:A:CYS51:CA)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3


writing and calling wL with nA= SG - 3
wBF2: wrote  SG
!!!2:calling wL


in writeLevel with  SG  outatom_counter= 4
len( SG ).bonds= 1
skipping b= CB - SG
returning queue= []
newQ= []
 currently queue=
CA : CB : queue= []
wrote flex file fixed_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: fixed_flex.pdbqt
wrote rigid file: fixed_rigid.pdbqt
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> ligcovalent:A:CYS51 with 29 MolKit.molecule.Atom]
calling setAutoFlexFields with  ligcovalent:A:CYS51
in setAutoFlexFields with  ligcovalent:A:CYS51
len(rotatables)= 5
returning res.torscount= 4
res.root= CA
ntors= 4
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= ligcovalent_flex.pdbqt
res_total= 4
in writeResidue with  ligcovalent:A:CYS51
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS51:N, <Atom instance> ligcovalent:A:CYS51:CA)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS51:CA, <Atom instance> ligcovalent:A:CYS51:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS51:CA, <Atom instance> ligcovalent:A:CYS51:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS51:CA, <Atom instance> ligcovalent:A:CYS51:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS51:CB, <Atom instance> ligcovalent:A:CYS51:SG)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS51:CB, <Atom instance> ligcovalent:A:CYS51:SG)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS51:CX, <Atom instance> ligcovalent:A:CYS51:SG)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS51:CX, <Atom instance> ligcovalent:A:CYS51:CX)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS51:CX, <Atom instance> ligcovalent:A:CYS51:SG)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS51:CX, <Atom instance> ligcovalent:A:CYS51:H)
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 3
 currently queue= CX - CX , CX - CX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS51:CX, <Atom instance> ligcovalent:A:CYS51:CX), (<Atom instance> ligcovalent:A:CYS51:CX, <Atom instance> ligcovalent:A:CYS51:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 4


writing and calling wL with nA= OX - 4
wBF2: wrote  OX
!!!2:calling wL


in writeLevel with  OX  outatom_counter= 5
len( OX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []


writing and calling wL with nA= NX - 5
wBF2: wrote  NX
!!!2:calling wL


in writeLevel with  NX  outatom_counter= 6
len( NX ).bonds= 3
skipping b= NX - CX
processing b= NX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
processing b= CX - NX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 8
len( CX ).bonds= 2
skipping b= NX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 9
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 10
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 11
len( CX ).bonds= 3
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 12
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 13
len( CX ).bonds= 3
processing b= OX - CX  activeTors= 1
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
CX wL: queue= [(<Atom instance> ligcovalent:A:CYS51:CX, <Atom instance> ligcovalent:A:CYS51:OX)]
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 14
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 15
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS51:CX, <Atom instance> ligcovalent:A:CYS51:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS51:CX, <Atom instance> ligcovalent:A:CYS51:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS51:CX, <Atom instance> ligcovalent:A:CYS51:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS51:CX, <Atom instance> ligcovalent:A:CYS51:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS51:CX, <Atom instance> ligcovalent:A:CYS51:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS51:CX, <Atom instance> ligcovalent:A:CYS51:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS51:CX, <Atom instance> ligcovalent:A:CYS51:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS51:CX, <Atom instance> ligcovalent:A:CYS51:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS51:CX, <Atom instance> ligcovalent:A:CYS51:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS51:CX, <Atom instance> ligcovalent:A:CYS51:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS51:CX, <Atom instance> ligcovalent:A:CYS51:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS51:CX, <Atom instance> ligcovalent:A:CYS51:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 15
len( CX ).bonds= 3
skipping b= CX - CX
skipping b= CX - NX
skipping b= CX - CX
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS51:CX, <Atom instance> ligcovalent:A:CYS51:OX)]
newQ= [(<Atom instance> ligcovalent:A:CYS51:CX, <Atom instance> ligcovalent:A:CYS51:OX)]
@@@@len(newq)= 1
queue= [(<Atom instance> ligcovalent:A:CYS51:CX, <Atom instance> ligcovalent:A:CYS51:OX)]
 currently queue= CX - OX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS51:CX, <Atom instance> ligcovalent:A:CYS51:OX)]
 processing queue entry:  CX - OX
in wBF with fromAtom= CX + startAtom= OX startAtom.used= 0
wBF: wrote  OX
self.outatom_counter= 16


writing and calling wL with nA= CX - 16
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 17
len( CX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []
 currently queue=
CX : OX : queue= []
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 18


writing and calling wL with nA= CX - 18
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 19
len( CX ).bonds= 1
skipping b= CX - CX
returning queue= []
newQ= []
 currently queue=
CX : CX : queue= []
wrote flex file ligcovalent_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: ligcovalent_flex.pdbqt
wrote rigid file: ligcovalent_rigid.pdbqt
4---done
setting PYTHONHOME environment
setting PYTHONHOME environment
!unable to use ligand.TORSDOF! torsdof always set to ligand.ndihe= 4
5---done
 concat 10 log files... done.
Job finished, good luck!
rm: 无法删除'chimera.com': 没有那个文件或目录
rm: 无法删除'tmp.mol2': 没有那个文件或目录
Done
Processing residue A:CYS578
[start] output filename is: ligcovalent_single.pdb
CHAIN A
Writing output filename: ligcovalent_single.pdb
1---ligcovalent.pdb prepared...
1.5--done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= fixed  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  fixed
merged  0  nonpolar hydrogens
end of base class init
using std outputfilename  fixed.pdbqt
wrote  fixed  to  fixed.pdbqt
2---done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= ligcovalent  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  ligcovalent
merged  21  nonpolar hydrogens
end of base class init
using std outputfilename  ligcovalent.pdbqt
wrote  ligcovalent  to  ligcovalent.pdbqt
3---done
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> fixed:A:CYS578 with 6 MolKit.molecule.Atom]
calling setAutoFlexFields with  fixed:A:CYS578
in setAutoFlexFields with  fixed:A:CYS578
len(rotatables)= 1
returning res.torscount= 1
res.root= CA
ntors= 1
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= fixed_flex.pdbqt
res_total= 1
in writeResidue with  fixed:A:CYS578
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS578:N, <Atom instance> fixed:A:CYS578:CA)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS578:CA, <Atom instance> fixed:A:CYS578:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS578:CA, <Atom instance> fixed:A:CYS578:C)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3


writing and calling wL with nA= SG - 3
wBF2: wrote  SG
!!!2:calling wL


in writeLevel with  SG  outatom_counter= 4
len( SG ).bonds= 1
skipping b= CB - SG
returning queue= []
newQ= []
 currently queue=
CA : CB : queue= []
wrote flex file fixed_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: fixed_flex.pdbqt
wrote rigid file: fixed_rigid.pdbqt
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> ligcovalent:A:CYS578 with 28 MolKit.molecule.Atom]
calling setAutoFlexFields with  ligcovalent:A:CYS578
in setAutoFlexFields with  ligcovalent:A:CYS578
len(rotatables)= 8
returning res.torscount= 7
res.root= CA
ntors= 7
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= ligcovalent_flex.pdbqt
res_total= 7
in writeResidue with  ligcovalent:A:CYS578
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS578:CA, <Atom instance> ligcovalent:A:CYS578:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS578:CA, <Atom instance> ligcovalent:A:CYS578:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS578:N, <Atom instance> ligcovalent:A:CYS578:CA)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3
 currently queue= CB - SG ,
CA : CB : queue= [(<Atom instance> ligcovalent:A:CYS578:CB, <Atom instance> ligcovalent:A:CYS578:SG)]
 processing queue entry:  CB - SG
in wBF with fromAtom= CB + startAtom= SG startAtom.used= 0
wBF: wrote  SG
self.outatom_counter= 4
 currently queue= SG - CX ,
CB : SG : queue= [(<Atom instance> ligcovalent:A:CYS578:SG, <Atom instance> ligcovalent:A:CYS578:CX)]
 processing queue entry:  SG - CX
in wBF with fromAtom= SG + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 5
 currently queue= CX - CX ,
SG : CX : queue= [(<Atom instance> ligcovalent:A:CYS578:CX, <Atom instance> ligcovalent:A:CYS578:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 6
 currently queue= CX - CX , CX - CX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS578:CX, <Atom instance> ligcovalent:A:CYS578:CX), (<Atom instance> ligcovalent:A:CYS578:CX, <Atom instance> ligcovalent:A:CYS578:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 7


writing and calling wL with nA= CX - 7
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 8
len( CX ).bonds= 1
skipping b= CX - CX
returning queue= []
newQ= []
 currently queue=
CX : CX : queue= []
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 9


writing and calling wL with nA= OX - 9
wBF2: wrote  OX
!!!2:calling wL


in writeLevel with  OX  outatom_counter= 10
len( OX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []


writing and calling wL with nA= NX - 10
wBF2: wrote  NX
!!!2:calling wL


in writeLevel with  NX  outatom_counter= 11
len( NX ).bonds= 3
skipping b= NX - CX
processing b= NX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
processing b= CX - NX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 13
len( CX ).bonds= 2
skipping b= NX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 14
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 15
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 16
len( CX ).bonds= 3
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 17
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 18
len( CX ).bonds= 3
processing b= OX - CX  activeTors= 1
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
CX wL: queue= [(<Atom instance> ligcovalent:A:CYS578:CX, <Atom instance> ligcovalent:A:CYS578:OX)]
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 19
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 20
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS578:CX, <Atom instance> ligcovalent:A:CYS578:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS578:CX, <Atom instance> ligcovalent:A:CYS578:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS578:CX, <Atom instance> ligcovalent:A:CYS578:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS578:CX, <Atom instance> ligcovalent:A:CYS578:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS578:CX, <Atom instance> ligcovalent:A:CYS578:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS578:CX, <Atom instance> ligcovalent:A:CYS578:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS578:CX, <Atom instance> ligcovalent:A:CYS578:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS578:CX, <Atom instance> ligcovalent:A:CYS578:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS578:CX, <Atom instance> ligcovalent:A:CYS578:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS578:CX, <Atom instance> ligcovalent:A:CYS578:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS578:CX, <Atom instance> ligcovalent:A:CYS578:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS578:CX, <Atom instance> ligcovalent:A:CYS578:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 20
len( CX ).bonds= 3
skipping b= CX - CX
skipping b= CX - NX
skipping b= CX - CX
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS578:CX, <Atom instance> ligcovalent:A:CYS578:OX)]
newQ= [(<Atom instance> ligcovalent:A:CYS578:CX, <Atom instance> ligcovalent:A:CYS578:OX)]
@@@@len(newq)= 1
queue= [(<Atom instance> ligcovalent:A:CYS578:CX, <Atom instance> ligcovalent:A:CYS578:OX)]
 currently queue= CX - OX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS578:CX, <Atom instance> ligcovalent:A:CYS578:OX)]
 processing queue entry:  CX - OX
in wBF with fromAtom= CX + startAtom= OX startAtom.used= 0
wBF: wrote  OX
self.outatom_counter= 21


writing and calling wL with nA= CX - 21
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 22
len( CX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []
 currently queue=
CX : OX : queue= []
wrote flex file ligcovalent_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: ligcovalent_flex.pdbqt
wrote rigid file: ligcovalent_rigid.pdbqt
4---done
setting PYTHONHOME environment
setting PYTHONHOME environment
!unable to use ligand.TORSDOF! torsdof always set to ligand.ndihe= 7
5---done
 concat 10 log files... done.
Job finished, good luck!
rm: 无法删除'chimera.com': 没有那个文件或目录
rm: 无法删除'tmp.mol2': 没有那个文件或目录
Done
Processing residue A:CYS239
[start] output filename is: ligcovalent_single.pdb
CHAIN A
Writing output filename: ligcovalent_single.pdb
1---ligcovalent.pdb prepared...
1.5--done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= fixed  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  fixed
merged  0  nonpolar hydrogens
end of base class init
using std outputfilename  fixed.pdbqt
wrote  fixed  to  fixed.pdbqt
2---done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= ligcovalent  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  ligcovalent
merged  21  nonpolar hydrogens
end of base class init
using std outputfilename  ligcovalent.pdbqt
wrote  ligcovalent  to  ligcovalent.pdbqt
3---done
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> fixed:A:CYS239 with 6 MolKit.molecule.Atom]
calling setAutoFlexFields with  fixed:A:CYS239
in setAutoFlexFields with  fixed:A:CYS239
len(rotatables)= 1
returning res.torscount= 1
res.root= CA
ntors= 1
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= fixed_flex.pdbqt
res_total= 1
in writeResidue with  fixed:A:CYS239
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS239:CA, <Atom instance> fixed:A:CYS239:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS239:CA, <Atom instance> fixed:A:CYS239:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS239:N, <Atom instance> fixed:A:CYS239:CA)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3


writing and calling wL with nA= SG - 3
wBF2: wrote  SG
!!!2:calling wL


in writeLevel with  SG  outatom_counter= 4
len( SG ).bonds= 1
skipping b= CB - SG
returning queue= []
newQ= []
 currently queue=
CA : CB : queue= []
wrote flex file fixed_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: fixed_flex.pdbqt
wrote rigid file: fixed_rigid.pdbqt
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> ligcovalent:A:CYS239 with 28 MolKit.molecule.Atom]
calling setAutoFlexFields with  ligcovalent:A:CYS239
in setAutoFlexFields with  ligcovalent:A:CYS239
len(rotatables)= 8
returning res.torscount= 7
res.root= CA
ntors= 7
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= ligcovalent_flex.pdbqt
res_total= 7
in writeResidue with  ligcovalent:A:CYS239
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS239:CA, <Atom instance> ligcovalent:A:CYS239:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS239:CA, <Atom instance> ligcovalent:A:CYS239:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS239:N, <Atom instance> ligcovalent:A:CYS239:CA)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3
 currently queue= CB - SG ,
CA : CB : queue= [(<Atom instance> ligcovalent:A:CYS239:CB, <Atom instance> ligcovalent:A:CYS239:SG)]
 processing queue entry:  CB - SG
in wBF with fromAtom= CB + startAtom= SG startAtom.used= 0
wBF: wrote  SG
self.outatom_counter= 4
 currently queue= SG - CX ,
CB : SG : queue= [(<Atom instance> ligcovalent:A:CYS239:SG, <Atom instance> ligcovalent:A:CYS239:CX)]
 processing queue entry:  SG - CX
in wBF with fromAtom= SG + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 5
 currently queue= CX - CX ,
SG : CX : queue= [(<Atom instance> ligcovalent:A:CYS239:CX, <Atom instance> ligcovalent:A:CYS239:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 6
 currently queue= CX - CX , CX - CX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS239:CX, <Atom instance> ligcovalent:A:CYS239:CX), (<Atom instance> ligcovalent:A:CYS239:CX, <Atom instance> ligcovalent:A:CYS239:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 7


writing and calling wL with nA= CX - 7
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 8
len( CX ).bonds= 1
skipping b= CX - CX
returning queue= []
newQ= []
 currently queue=
CX : CX : queue= []
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 9


writing and calling wL with nA= NX - 9
wBF2: wrote  NX
!!!2:calling wL


in writeLevel with  NX  outatom_counter= 10
len( NX ).bonds= 3
processing b= NX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= NX - CX
processing b= CX - NX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 12
len( CX ).bonds= 2
skipping b= NX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 13
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 14
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 15
len( CX ).bonds= 3
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 16
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 17
len( CX ).bonds= 3
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
processing b= OX - CX  activeTors= 1
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
CX wL: queue= [(<Atom instance> ligcovalent:A:CYS239:CX, <Atom instance> ligcovalent:A:CYS239:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 18
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 19
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS239:CX, <Atom instance> ligcovalent:A:CYS239:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS239:CX, <Atom instance> ligcovalent:A:CYS239:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS239:CX, <Atom instance> ligcovalent:A:CYS239:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS239:CX, <Atom instance> ligcovalent:A:CYS239:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS239:CX, <Atom instance> ligcovalent:A:CYS239:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS239:CX, <Atom instance> ligcovalent:A:CYS239:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS239:CX, <Atom instance> ligcovalent:A:CYS239:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS239:CX, <Atom instance> ligcovalent:A:CYS239:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS239:CX, <Atom instance> ligcovalent:A:CYS239:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS239:CX, <Atom instance> ligcovalent:A:CYS239:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS239:CX, <Atom instance> ligcovalent:A:CYS239:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS239:CX, <Atom instance> ligcovalent:A:CYS239:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 19
len( CX ).bonds= 3
skipping b= CX - CX
skipping b= CX - NX
skipping b= CX - CX
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS239:CX, <Atom instance> ligcovalent:A:CYS239:OX)]
newQ= [(<Atom instance> ligcovalent:A:CYS239:CX, <Atom instance> ligcovalent:A:CYS239:OX)]
@@@@len(newq)= 1
queue= [(<Atom instance> ligcovalent:A:CYS239:CX, <Atom instance> ligcovalent:A:CYS239:OX)]


writing and calling wL with nA= OX - 19
wBF2: wrote  OX
!!!2:calling wL


in writeLevel with  OX  outatom_counter= 20
len( OX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []
 currently queue= CX - OX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS239:CX, <Atom instance> ligcovalent:A:CYS239:OX)]
 processing queue entry:  CX - OX
in wBF with fromAtom= CX + startAtom= OX startAtom.used= 0
wBF: wrote  OX
self.outatom_counter= 21


writing and calling wL with nA= CX - 21
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 22
len( CX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []
 currently queue=
CX : OX : queue= []
wrote flex file ligcovalent_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: ligcovalent_flex.pdbqt
wrote rigid file: ligcovalent_rigid.pdbqt
4---done
setting PYTHONHOME environment
setting PYTHONHOME environment
!unable to use ligand.TORSDOF! torsdof always set to ligand.ndihe= 7
5---done
 concat 10 log files... done.
Job finished, good luck!
rm: 无法删除'chimera.com': 没有那个文件或目录
rm: 无法删除'tmp.mol2': 没有那个文件或目录
Done
Processing residue A:CYS148
[start] output filename is: ligcovalent_single.pdb
CHAIN A
Writing output filename: ligcovalent_single.pdb
1---ligcovalent.pdb prepared...
1.5--done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= fixed  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  fixed
merged  0  nonpolar hydrogens
end of base class init
using std outputfilename  fixed.pdbqt
wrote  fixed  to  fixed.pdbqt
2---done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= ligcovalent  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  ligcovalent
merged  21  nonpolar hydrogens
end of base class init
using std outputfilename  ligcovalent.pdbqt
wrote  ligcovalent  to  ligcovalent.pdbqt
3---done
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> fixed:A:CYS148 with 6 MolKit.molecule.Atom]
calling setAutoFlexFields with  fixed:A:CYS148
in setAutoFlexFields with  fixed:A:CYS148
len(rotatables)= 1
returning res.torscount= 1
res.root= CA
ntors= 1
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= fixed_flex.pdbqt
res_total= 1
in writeResidue with  fixed:A:CYS148
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS148:CA, <Atom instance> fixed:A:CYS148:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS148:CA, <Atom instance> fixed:A:CYS148:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS148:N, <Atom instance> fixed:A:CYS148:CA)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3


writing and calling wL with nA= SG - 3
wBF2: wrote  SG
!!!2:calling wL


in writeLevel with  SG  outatom_counter= 4
len( SG ).bonds= 1
skipping b= CB - SG
returning queue= []
newQ= []
 currently queue=
CA : CB : queue= []
wrote flex file fixed_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: fixed_flex.pdbqt
wrote rigid file: fixed_rigid.pdbqt
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> ligcovalent:A:CYS148 with 28 MolKit.molecule.Atom]
calling setAutoFlexFields with  ligcovalent:A:CYS148
in setAutoFlexFields with  ligcovalent:A:CYS148
len(rotatables)= 8
returning res.torscount= 7
res.root= CA
ntors= 7
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= ligcovalent_flex.pdbqt
res_total= 7
in writeResidue with  ligcovalent:A:CYS148
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS148:CA, <Atom instance> ligcovalent:A:CYS148:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS148:CA, <Atom instance> ligcovalent:A:CYS148:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS148:N, <Atom instance> ligcovalent:A:CYS148:CA)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3
 currently queue= CB - SG ,
CA : CB : queue= [(<Atom instance> ligcovalent:A:CYS148:CB, <Atom instance> ligcovalent:A:CYS148:SG)]
 processing queue entry:  CB - SG
in wBF with fromAtom= CB + startAtom= SG startAtom.used= 0
wBF: wrote  SG
self.outatom_counter= 4
 currently queue= SG - CX ,
CB : SG : queue= [(<Atom instance> ligcovalent:A:CYS148:SG, <Atom instance> ligcovalent:A:CYS148:CX)]
 processing queue entry:  SG - CX
in wBF with fromAtom= SG + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 5
 currently queue= CX - CX ,
SG : CX : queue= [(<Atom instance> ligcovalent:A:CYS148:CX, <Atom instance> ligcovalent:A:CYS148:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 6
 currently queue= CX - CX , CX - CX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS148:CX, <Atom instance> ligcovalent:A:CYS148:CX), (<Atom instance> ligcovalent:A:CYS148:CX, <Atom instance> ligcovalent:A:CYS148:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 7


writing and calling wL with nA= OX - 7
wBF2: wrote  OX
!!!2:calling wL


in writeLevel with  OX  outatom_counter= 8
len( OX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []


writing and calling wL with nA= NX - 8
wBF2: wrote  NX
!!!2:calling wL


in writeLevel with  NX  outatom_counter= 9
len( NX ).bonds= 3
skipping b= NX - CX
processing b= NX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
processing b= CX - NX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 11
len( CX ).bonds= 2
skipping b= NX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 12
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 13
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 14
len( CX ).bonds= 3
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 15
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 16
len( CX ).bonds= 3
processing b= OX - CX  activeTors= 1
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
CX wL: queue= [(<Atom instance> ligcovalent:A:CYS148:CX, <Atom instance> ligcovalent:A:CYS148:OX)]
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 17
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 18
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS148:CX, <Atom instance> ligcovalent:A:CYS148:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS148:CX, <Atom instance> ligcovalent:A:CYS148:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS148:CX, <Atom instance> ligcovalent:A:CYS148:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS148:CX, <Atom instance> ligcovalent:A:CYS148:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS148:CX, <Atom instance> ligcovalent:A:CYS148:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS148:CX, <Atom instance> ligcovalent:A:CYS148:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS148:CX, <Atom instance> ligcovalent:A:CYS148:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS148:CX, <Atom instance> ligcovalent:A:CYS148:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS148:CX, <Atom instance> ligcovalent:A:CYS148:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS148:CX, <Atom instance> ligcovalent:A:CYS148:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS148:CX, <Atom instance> ligcovalent:A:CYS148:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS148:CX, <Atom instance> ligcovalent:A:CYS148:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 18
len( CX ).bonds= 3
skipping b= CX - CX
skipping b= CX - NX
skipping b= CX - CX
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS148:CX, <Atom instance> ligcovalent:A:CYS148:OX)]
newQ= [(<Atom instance> ligcovalent:A:CYS148:CX, <Atom instance> ligcovalent:A:CYS148:OX)]
@@@@len(newq)= 1
queue= [(<Atom instance> ligcovalent:A:CYS148:CX, <Atom instance> ligcovalent:A:CYS148:OX)]
 currently queue= CX - OX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS148:CX, <Atom instance> ligcovalent:A:CYS148:OX)]
 processing queue entry:  CX - OX
in wBF with fromAtom= CX + startAtom= OX startAtom.used= 0
wBF: wrote  OX
self.outatom_counter= 19


writing and calling wL with nA= CX - 19
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 20
len( CX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []
 currently queue=
CX : OX : queue= []
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 21


writing and calling wL with nA= CX - 21
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 22
len( CX ).bonds= 1
skipping b= CX - CX
returning queue= []
newQ= []
 currently queue=
CX : CX : queue= []
wrote flex file ligcovalent_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: ligcovalent_flex.pdbqt
wrote rigid file: ligcovalent_rigid.pdbqt
4---done
setting PYTHONHOME environment
setting PYTHONHOME environment
!unable to use ligand.TORSDOF! torsdof always set to ligand.ndihe= 7
5---done
 concat 10 log files... done.
Job finished, good luck!
rm: 无法删除'chimera.com': 没有那个文件或目录
rm: 无法删除'tmp.mol2': 没有那个文件或目录
Done
Processing residue A:CYS139
[start] output filename is: ligcovalent_single.pdb
CHAIN A
Writing output filename: ligcovalent_single.pdb
1---ligcovalent.pdb prepared...
1.5--done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= fixed  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  fixed
merged  0  nonpolar hydrogens
end of base class init
using std outputfilename  fixed.pdbqt
wrote  fixed  to  fixed.pdbqt
2---done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= ligcovalent  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  ligcovalent
merged  21  nonpolar hydrogens
end of base class init
using std outputfilename  ligcovalent.pdbqt
wrote  ligcovalent  to  ligcovalent.pdbqt
3---done
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> fixed:A:CYS139 with 6 MolKit.molecule.Atom]
calling setAutoFlexFields with  fixed:A:CYS139
in setAutoFlexFields with  fixed:A:CYS139
len(rotatables)= 1
returning res.torscount= 1
res.root= CA
ntors= 1
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= fixed_flex.pdbqt
res_total= 1
in writeResidue with  fixed:A:CYS139
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS139:CA, <Atom instance> fixed:A:CYS139:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS139:CA, <Atom instance> fixed:A:CYS139:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS139:N, <Atom instance> fixed:A:CYS139:CA)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3


writing and calling wL with nA= SG - 3
wBF2: wrote  SG
!!!2:calling wL


in writeLevel with  SG  outatom_counter= 4
len( SG ).bonds= 1
skipping b= CB - SG
returning queue= []
newQ= []
 currently queue=
CA : CB : queue= []
wrote flex file fixed_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: fixed_flex.pdbqt
wrote rigid file: fixed_rigid.pdbqt
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> ligcovalent:A:CYS139 with 28 MolKit.molecule.Atom]
calling setAutoFlexFields with  ligcovalent:A:CYS139
in setAutoFlexFields with  ligcovalent:A:CYS139
len(rotatables)= 8
returning res.torscount= 7
res.root= CA
ntors= 7
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= ligcovalent_flex.pdbqt
res_total= 7
in writeResidue with  ligcovalent:A:CYS139
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS139:N, <Atom instance> ligcovalent:A:CYS139:CA)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS139:CA, <Atom instance> ligcovalent:A:CYS139:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS139:CA, <Atom instance> ligcovalent:A:CYS139:CB)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3
 currently queue= CB - SG ,
CA : CB : queue= [(<Atom instance> ligcovalent:A:CYS139:CB, <Atom instance> ligcovalent:A:CYS139:SG)]
 processing queue entry:  CB - SG
in wBF with fromAtom= CB + startAtom= SG startAtom.used= 0
wBF: wrote  SG
self.outatom_counter= 4
 currently queue= SG - CX ,
CB : SG : queue= [(<Atom instance> ligcovalent:A:CYS139:SG, <Atom instance> ligcovalent:A:CYS139:CX)]
 processing queue entry:  SG - CX
in wBF with fromAtom= SG + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 5
 currently queue= CX - CX ,
SG : CX : queue= [(<Atom instance> ligcovalent:A:CYS139:CX, <Atom instance> ligcovalent:A:CYS139:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 6
 currently queue= CX - CX , CX - CX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS139:CX, <Atom instance> ligcovalent:A:CYS139:CX), (<Atom instance> ligcovalent:A:CYS139:CX, <Atom instance> ligcovalent:A:CYS139:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 7


writing and calling wL with nA= OX - 7
wBF2: wrote  OX
!!!2:calling wL


in writeLevel with  OX  outatom_counter= 8
len( OX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []


writing and calling wL with nA= NX - 8
wBF2: wrote  NX
!!!2:calling wL


in writeLevel with  NX  outatom_counter= 9
len( NX ).bonds= 3
processing b= CX - NX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= NX - CX
processing b= NX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 11
len( CX ).bonds= 3
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - NX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 13
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 14
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 15
len( CX ).bonds= 3
processing b= OX - CX  activeTors= 1
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
CX wL: queue= [(<Atom instance> ligcovalent:A:CYS139:CX, <Atom instance> ligcovalent:A:CYS139:OX)]
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 16
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS139:CX, <Atom instance> ligcovalent:A:CYS139:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS139:CX, <Atom instance> ligcovalent:A:CYS139:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS139:CX, <Atom instance> ligcovalent:A:CYS139:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS139:CX, <Atom instance> ligcovalent:A:CYS139:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS139:CX, <Atom instance> ligcovalent:A:CYS139:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS139:CX, <Atom instance> ligcovalent:A:CYS139:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 16
len( CX ).bonds= 3
skipping b= CX - CX
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 17
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 18
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= []
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS139:CX, <Atom instance> ligcovalent:A:CYS139:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS139:CX, <Atom instance> ligcovalent:A:CYS139:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 18
len( CX ).bonds= 2
skipping b= NX - CX
skipping b= CX - CX
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS139:CX, <Atom instance> ligcovalent:A:CYS139:OX)]
newQ= [(<Atom instance> ligcovalent:A:CYS139:CX, <Atom instance> ligcovalent:A:CYS139:OX)]
@@@@len(newq)= 1
queue= [(<Atom instance> ligcovalent:A:CYS139:CX, <Atom instance> ligcovalent:A:CYS139:OX)]
 currently queue= CX - OX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS139:CX, <Atom instance> ligcovalent:A:CYS139:OX)]
 processing queue entry:  CX - OX
in wBF with fromAtom= CX + startAtom= OX startAtom.used= 0
wBF: wrote  OX
self.outatom_counter= 19


writing and calling wL with nA= CX - 19
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 20
len( CX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []
 currently queue=
CX : OX : queue= []
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 21


writing and calling wL with nA= CX - 21
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 22
len( CX ).bonds= 1
skipping b= CX - CX
returning queue= []
newQ= []
 currently queue=
CX : CX : queue= []
wrote flex file ligcovalent_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: ligcovalent_flex.pdbqt
wrote rigid file: ligcovalent_rigid.pdbqt
4---done
setting PYTHONHOME environment
setting PYTHONHOME environment
!unable to use ligand.TORSDOF! torsdof always set to ligand.ndihe= 7
5---done
 concat 10 log files... done.
Job finished, good luck!
rm: 无法删除'chimera.com': 没有那个文件或目录
rm: 无法删除'tmp.mol2': 没有那个文件或目录
Done
Processing residue A:CYS276
[start] output filename is: ligcovalent_single.pdb
CHAIN A
Writing output filename: ligcovalent_single.pdb
1---ligcovalent.pdb prepared...
1.5--done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= fixed  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  fixed
merged  0  nonpolar hydrogens
end of base class init
using std outputfilename  fixed.pdbqt
wrote  fixed  to  fixed.pdbqt
2---done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= ligcovalent  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  ligcovalent
merged  21  nonpolar hydrogens
end of base class init
using std outputfilename  ligcovalent.pdbqt
wrote  ligcovalent  to  ligcovalent.pdbqt
3---done
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> fixed:A:CYS276 with 6 MolKit.molecule.Atom]
calling setAutoFlexFields with  fixed:A:CYS276
in setAutoFlexFields with  fixed:A:CYS276
len(rotatables)= 1
returning res.torscount= 1
res.root= CA
ntors= 1
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= fixed_flex.pdbqt
res_total= 1
in writeResidue with  fixed:A:CYS276
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS276:N, <Atom instance> fixed:A:CYS276:CA)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS276:CA, <Atom instance> fixed:A:CYS276:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS276:CA, <Atom instance> fixed:A:CYS276:CB)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3


writing and calling wL with nA= SG - 3
wBF2: wrote  SG
!!!2:calling wL


in writeLevel with  SG  outatom_counter= 4
len( SG ).bonds= 1
skipping b= CB - SG
returning queue= []
newQ= []
 currently queue=
CA : CB : queue= []
wrote flex file fixed_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: fixed_flex.pdbqt
wrote rigid file: fixed_rigid.pdbqt
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> ligcovalent:A:CYS276 with 28 MolKit.molecule.Atom]
calling setAutoFlexFields with  ligcovalent:A:CYS276
in setAutoFlexFields with  ligcovalent:A:CYS276
len(rotatables)= 8
returning res.torscount= 7
res.root= CA
ntors= 7
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= ligcovalent_flex.pdbqt
res_total= 7
in writeResidue with  ligcovalent:A:CYS276
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS276:CA, <Atom instance> ligcovalent:A:CYS276:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS276:CA, <Atom instance> ligcovalent:A:CYS276:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS276:N, <Atom instance> ligcovalent:A:CYS276:CA)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3
 currently queue= CB - SG ,
CA : CB : queue= [(<Atom instance> ligcovalent:A:CYS276:CB, <Atom instance> ligcovalent:A:CYS276:SG)]
 processing queue entry:  CB - SG
in wBF with fromAtom= CB + startAtom= SG startAtom.used= 0
wBF: wrote  SG
self.outatom_counter= 4
 currently queue= SG - CX ,
CB : SG : queue= [(<Atom instance> ligcovalent:A:CYS276:SG, <Atom instance> ligcovalent:A:CYS276:CX)]
 processing queue entry:  SG - CX
in wBF with fromAtom= SG + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 5
 currently queue= CX - CX ,
SG : CX : queue= [(<Atom instance> ligcovalent:A:CYS276:CX, <Atom instance> ligcovalent:A:CYS276:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 6
 currently queue= CX - CX , CX - CX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS276:CX, <Atom instance> ligcovalent:A:CYS276:CX), (<Atom instance> ligcovalent:A:CYS276:CX, <Atom instance> ligcovalent:A:CYS276:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 7


writing and calling wL with nA= CX - 7
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 8
len( CX ).bonds= 1
skipping b= CX - CX
returning queue= []
newQ= []
 currently queue=
CX : CX : queue= []
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 9


writing and calling wL with nA= NX - 9
wBF2: wrote  NX
!!!2:calling wL


in writeLevel with  NX  outatom_counter= 10
len( NX ).bonds= 3
processing b= CX - NX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
processing b= NX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= NX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 12
len( CX ).bonds= 3
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - NX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 14
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 15
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 16
len( CX ).bonds= 3
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
processing b= OX - CX  activeTors= 1
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
CX wL: queue= [(<Atom instance> ligcovalent:A:CYS276:CX, <Atom instance> ligcovalent:A:CYS276:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 17
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS276:CX, <Atom instance> ligcovalent:A:CYS276:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS276:CX, <Atom instance> ligcovalent:A:CYS276:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS276:CX, <Atom instance> ligcovalent:A:CYS276:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS276:CX, <Atom instance> ligcovalent:A:CYS276:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS276:CX, <Atom instance> ligcovalent:A:CYS276:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS276:CX, <Atom instance> ligcovalent:A:CYS276:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 17
len( CX ).bonds= 3
skipping b= CX - CX
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 18
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 19
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= []
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS276:CX, <Atom instance> ligcovalent:A:CYS276:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS276:CX, <Atom instance> ligcovalent:A:CYS276:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 19
len( CX ).bonds= 2
skipping b= NX - CX
skipping b= CX - CX
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS276:CX, <Atom instance> ligcovalent:A:CYS276:OX)]
newQ= [(<Atom instance> ligcovalent:A:CYS276:CX, <Atom instance> ligcovalent:A:CYS276:OX)]
@@@@len(newq)= 1
queue= [(<Atom instance> ligcovalent:A:CYS276:CX, <Atom instance> ligcovalent:A:CYS276:OX)]


writing and calling wL with nA= OX - 19
wBF2: wrote  OX
!!!2:calling wL


in writeLevel with  OX  outatom_counter= 20
len( OX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []
 currently queue= CX - OX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS276:CX, <Atom instance> ligcovalent:A:CYS276:OX)]
 processing queue entry:  CX - OX
in wBF with fromAtom= CX + startAtom= OX startAtom.used= 0
wBF: wrote  OX
self.outatom_counter= 21


writing and calling wL with nA= CX - 21
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 22
len( CX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []
 currently queue=
CX : OX : queue= []
wrote flex file ligcovalent_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: ligcovalent_flex.pdbqt
wrote rigid file: ligcovalent_rigid.pdbqt
4---done
setting PYTHONHOME environment
setting PYTHONHOME environment
!unable to use ligand.TORSDOF! torsdof always set to ligand.ndihe= 7
5---done
 concat 10 log files... done.
Job finished, good luck!
rm: 无法删除'chimera.com': 没有那个文件或目录
rm: 无法删除'tmp.mol2': 没有那个文件或目录
Done
Processing residue A:CYS241
[start] output filename is: ligcovalent_single.pdb
CHAIN A
Writing output filename: ligcovalent_single.pdb
1---ligcovalent.pdb prepared...
1.5--done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= fixed  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  fixed
merged  0  nonpolar hydrogens
end of base class init
using std outputfilename  fixed.pdbqt
wrote  fixed  to  fixed.pdbqt
2---done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= ligcovalent  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  ligcovalent
merged  21  nonpolar hydrogens
end of base class init
using std outputfilename  ligcovalent.pdbqt
wrote  ligcovalent  to  ligcovalent.pdbqt
3---done
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> fixed:A:CYS241 with 6 MolKit.molecule.Atom]
calling setAutoFlexFields with  fixed:A:CYS241
in setAutoFlexFields with  fixed:A:CYS241
len(rotatables)= 1
returning res.torscount= 1
res.root= CA
ntors= 1
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= fixed_flex.pdbqt
res_total= 1
in writeResidue with  fixed:A:CYS241
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS241:CA, <Atom instance> fixed:A:CYS241:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS241:CA, <Atom instance> fixed:A:CYS241:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS241:N, <Atom instance> fixed:A:CYS241:CA)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3


writing and calling wL with nA= SG - 3
wBF2: wrote  SG
!!!2:calling wL


in writeLevel with  SG  outatom_counter= 4
len( SG ).bonds= 1
skipping b= CB - SG
returning queue= []
newQ= []
 currently queue=
CA : CB : queue= []
wrote flex file fixed_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: fixed_flex.pdbqt
wrote rigid file: fixed_rigid.pdbqt
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> ligcovalent:A:CYS241 with 28 MolKit.molecule.Atom]
calling setAutoFlexFields with  ligcovalent:A:CYS241
in setAutoFlexFields with  ligcovalent:A:CYS241
len(rotatables)= 8
returning res.torscount= 7
res.root= CA
ntors= 7
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= ligcovalent_flex.pdbqt
res_total= 7
in writeResidue with  ligcovalent:A:CYS241
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS241:N, <Atom instance> ligcovalent:A:CYS241:CA)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS241:CA, <Atom instance> ligcovalent:A:CYS241:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS241:CA, <Atom instance> ligcovalent:A:CYS241:CB)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3
 currently queue= CB - SG ,
CA : CB : queue= [(<Atom instance> ligcovalent:A:CYS241:CB, <Atom instance> ligcovalent:A:CYS241:SG)]
 processing queue entry:  CB - SG
in wBF with fromAtom= CB + startAtom= SG startAtom.used= 0
wBF: wrote  SG
self.outatom_counter= 4
 currently queue= SG - CX ,
CB : SG : queue= [(<Atom instance> ligcovalent:A:CYS241:SG, <Atom instance> ligcovalent:A:CYS241:CX)]
 processing queue entry:  SG - CX
in wBF with fromAtom= SG + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 5
 currently queue= CX - CX ,
SG : CX : queue= [(<Atom instance> ligcovalent:A:CYS241:CX, <Atom instance> ligcovalent:A:CYS241:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 6
 currently queue= CX - CX , CX - CX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS241:CX, <Atom instance> ligcovalent:A:CYS241:CX), (<Atom instance> ligcovalent:A:CYS241:CX, <Atom instance> ligcovalent:A:CYS241:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 7


writing and calling wL with nA= OX - 7
wBF2: wrote  OX
!!!2:calling wL


in writeLevel with  OX  outatom_counter= 8
len( OX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []


writing and calling wL with nA= NX - 8
wBF2: wrote  NX
!!!2:calling wL


in writeLevel with  NX  outatom_counter= 9
len( NX ).bonds= 3
skipping b= NX - CX
processing b= NX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
processing b= CX - NX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 11
len( CX ).bonds= 2
skipping b= NX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 12
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 13
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 14
len( CX ).bonds= 3
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 15
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 16
len( CX ).bonds= 3
processing b= OX - CX  activeTors= 1
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
CX wL: queue= [(<Atom instance> ligcovalent:A:CYS241:CX, <Atom instance> ligcovalent:A:CYS241:OX)]
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 17
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 18
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS241:CX, <Atom instance> ligcovalent:A:CYS241:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS241:CX, <Atom instance> ligcovalent:A:CYS241:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS241:CX, <Atom instance> ligcovalent:A:CYS241:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS241:CX, <Atom instance> ligcovalent:A:CYS241:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS241:CX, <Atom instance> ligcovalent:A:CYS241:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS241:CX, <Atom instance> ligcovalent:A:CYS241:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS241:CX, <Atom instance> ligcovalent:A:CYS241:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS241:CX, <Atom instance> ligcovalent:A:CYS241:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS241:CX, <Atom instance> ligcovalent:A:CYS241:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS241:CX, <Atom instance> ligcovalent:A:CYS241:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS241:CX, <Atom instance> ligcovalent:A:CYS241:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS241:CX, <Atom instance> ligcovalent:A:CYS241:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 18
len( CX ).bonds= 3
skipping b= CX - CX
skipping b= CX - NX
skipping b= CX - CX
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS241:CX, <Atom instance> ligcovalent:A:CYS241:OX)]
newQ= [(<Atom instance> ligcovalent:A:CYS241:CX, <Atom instance> ligcovalent:A:CYS241:OX)]
@@@@len(newq)= 1
queue= [(<Atom instance> ligcovalent:A:CYS241:CX, <Atom instance> ligcovalent:A:CYS241:OX)]
 currently queue= CX - OX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS241:CX, <Atom instance> ligcovalent:A:CYS241:OX)]
 processing queue entry:  CX - OX
in wBF with fromAtom= CX + startAtom= OX startAtom.used= 0
wBF: wrote  OX
self.outatom_counter= 19


writing and calling wL with nA= CX - 19
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 20
len( CX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []
 currently queue=
CX : OX : queue= []
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 21


writing and calling wL with nA= CX - 21
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 22
len( CX ).bonds= 1
skipping b= CX - CX
returning queue= []
newQ= []
 currently queue=
CX : CX : queue= []
wrote flex file ligcovalent_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: ligcovalent_flex.pdbqt
wrote rigid file: ligcovalent_rigid.pdbqt
4---done
setting PYTHONHOME environment
setting PYTHONHOME environment
!unable to use ligand.TORSDOF! torsdof always set to ligand.ndihe= 7
5---done
 concat 10 log files... done.
Job finished, good luck!
rm: 无法删除'chimera.com': 没有那个文件或目录
rm: 无法删除'tmp.mol2': 没有那个文件或目录
Done
Processing residue A:CYS678
[start] output filename is: ligcovalent_single.pdb
CHAIN A
Writing output filename: ligcovalent_single.pdb
1---ligcovalent.pdb prepared...
1.5--done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= fixed  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  fixed
merged  0  nonpolar hydrogens
end of base class init
using std outputfilename  fixed.pdbqt
wrote  fixed  to  fixed.pdbqt
2---done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= ligcovalent  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  ligcovalent
merged  21  nonpolar hydrogens
end of base class init
using std outputfilename  ligcovalent.pdbqt
wrote  ligcovalent  to  ligcovalent.pdbqt
3---done
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> fixed:A:CYS678 with 6 MolKit.molecule.Atom]
calling setAutoFlexFields with  fixed:A:CYS678
in setAutoFlexFields with  fixed:A:CYS678
len(rotatables)= 1
returning res.torscount= 1
res.root= CA
ntors= 1
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= fixed_flex.pdbqt
res_total= 1
in writeResidue with  fixed:A:CYS678
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS678:N, <Atom instance> fixed:A:CYS678:CA)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS678:CA, <Atom instance> fixed:A:CYS678:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS678:CA, <Atom instance> fixed:A:CYS678:C)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3


writing and calling wL with nA= SG - 3
wBF2: wrote  SG
!!!2:calling wL


in writeLevel with  SG  outatom_counter= 4
len( SG ).bonds= 1
skipping b= CB - SG
returning queue= []
newQ= []
 currently queue=
CA : CB : queue= []
wrote flex file fixed_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: fixed_flex.pdbqt
wrote rigid file: fixed_rigid.pdbqt
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> ligcovalent:A:CYS678 with 28 MolKit.molecule.Atom]
calling setAutoFlexFields with  ligcovalent:A:CYS678
in setAutoFlexFields with  ligcovalent:A:CYS678
len(rotatables)= 8
returning res.torscount= 7
res.root= CA
ntors= 7
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= ligcovalent_flex.pdbqt
res_total= 7
in writeResidue with  ligcovalent:A:CYS678
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS678:N, <Atom instance> ligcovalent:A:CYS678:CA)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS678:CA, <Atom instance> ligcovalent:A:CYS678:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS678:CA, <Atom instance> ligcovalent:A:CYS678:CB)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3
 currently queue= CB - SG ,
CA : CB : queue= [(<Atom instance> ligcovalent:A:CYS678:CB, <Atom instance> ligcovalent:A:CYS678:SG)]
 processing queue entry:  CB - SG
in wBF with fromAtom= CB + startAtom= SG startAtom.used= 0
wBF: wrote  SG
self.outatom_counter= 4
 currently queue= SG - CX ,
CB : SG : queue= [(<Atom instance> ligcovalent:A:CYS678:SG, <Atom instance> ligcovalent:A:CYS678:CX)]
 processing queue entry:  SG - CX
in wBF with fromAtom= SG + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 5
 currently queue= CX - CX ,
SG : CX : queue= [(<Atom instance> ligcovalent:A:CYS678:CX, <Atom instance> ligcovalent:A:CYS678:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 6
 currently queue= CX - CX , CX - CX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS678:CX, <Atom instance> ligcovalent:A:CYS678:CX), (<Atom instance> ligcovalent:A:CYS678:CX, <Atom instance> ligcovalent:A:CYS678:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 7


writing and calling wL with nA= CX - 7
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 8
len( CX ).bonds= 1
skipping b= CX - CX
returning queue= []
newQ= []
 currently queue=
CX : CX : queue= []
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 9


writing and calling wL with nA= NX - 9
wBF2: wrote  NX
!!!2:calling wL


in writeLevel with  NX  outatom_counter= 10
len( NX ).bonds= 3
processing b= CX - NX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= NX - CX
processing b= NX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 12
len( CX ).bonds= 3
skipping b= CX - NX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 14
len( CX ).bonds= 3
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 16
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 17
len( CX ).bonds= 3
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
processing b= OX - CX  activeTors= 1
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
CX wL: queue= [(<Atom instance> ligcovalent:A:CYS678:CX, <Atom instance> ligcovalent:A:CYS678:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 18
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS678:CX, <Atom instance> ligcovalent:A:CYS678:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS678:CX, <Atom instance> ligcovalent:A:CYS678:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS678:CX, <Atom instance> ligcovalent:A:CYS678:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS678:CX, <Atom instance> ligcovalent:A:CYS678:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 18
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 19
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS678:CX, <Atom instance> ligcovalent:A:CYS678:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS678:CX, <Atom instance> ligcovalent:A:CYS678:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 19
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS678:CX, <Atom instance> ligcovalent:A:CYS678:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS678:CX, <Atom instance> ligcovalent:A:CYS678:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 19
len( CX ).bonds= 2
skipping b= NX - CX
skipping b= CX - CX
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS678:CX, <Atom instance> ligcovalent:A:CYS678:OX)]
newQ= [(<Atom instance> ligcovalent:A:CYS678:CX, <Atom instance> ligcovalent:A:CYS678:OX)]
@@@@len(newq)= 1
queue= [(<Atom instance> ligcovalent:A:CYS678:CX, <Atom instance> ligcovalent:A:CYS678:OX)]


writing and calling wL with nA= OX - 19
wBF2: wrote  OX
!!!2:calling wL


in writeLevel with  OX  outatom_counter= 20
len( OX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []
 currently queue= CX - OX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS678:CX, <Atom instance> ligcovalent:A:CYS678:OX)]
 processing queue entry:  CX - OX
in wBF with fromAtom= CX + startAtom= OX startAtom.used= 0
wBF: wrote  OX
self.outatom_counter= 21


writing and calling wL with nA= CX - 21
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 22
len( CX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []
 currently queue=
CX : OX : queue= []
wrote flex file ligcovalent_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: ligcovalent_flex.pdbqt
wrote rigid file: ligcovalent_rigid.pdbqt
4---done
setting PYTHONHOME environment
setting PYTHONHOME environment
!unable to use ligand.TORSDOF! torsdof always set to ligand.ndihe= 7
5---done
 concat 10 log files... done.
Job finished, good luck!
rm: 无法删除'chimera.com': 没有那个文件或目录
rm: 无法删除'tmp.mol2': 没有那个文件或目录
Done
Processing residue A:CYS430
[start] output filename is: ligcovalent_single.pdb
CHAIN A
Writing output filename: ligcovalent_single.pdb
1---ligcovalent.pdb prepared...
1.5--done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= fixed  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  fixed
merged  0  nonpolar hydrogens
end of base class init
using std outputfilename  fixed.pdbqt
wrote  fixed  to  fixed.pdbqt
2---done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= ligcovalent  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  ligcovalent
merged  21  nonpolar hydrogens
end of base class init
using std outputfilename  ligcovalent.pdbqt
wrote  ligcovalent  to  ligcovalent.pdbqt
3---done
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> fixed:A:CYS430 with 6 MolKit.molecule.Atom]
calling setAutoFlexFields with  fixed:A:CYS430
in setAutoFlexFields with  fixed:A:CYS430
len(rotatables)= 1
returning res.torscount= 1
res.root= CA
ntors= 1
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= fixed_flex.pdbqt
res_total= 1
in writeResidue with  fixed:A:CYS430
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS430:N, <Atom instance> fixed:A:CYS430:CA)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS430:CA, <Atom instance> fixed:A:CYS430:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS430:CA, <Atom instance> fixed:A:CYS430:C)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3


writing and calling wL with nA= SG - 3
wBF2: wrote  SG
!!!2:calling wL


in writeLevel with  SG  outatom_counter= 4
len( SG ).bonds= 1
skipping b= CB - SG
returning queue= []
newQ= []
 currently queue=
CA : CB : queue= []
wrote flex file fixed_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: fixed_flex.pdbqt
wrote rigid file: fixed_rigid.pdbqt
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> ligcovalent:A:CYS430 with 28 MolKit.molecule.Atom]
calling setAutoFlexFields with  ligcovalent:A:CYS430
in setAutoFlexFields with  ligcovalent:A:CYS430
len(rotatables)= 8
returning res.torscount= 7
res.root= CA
ntors= 7
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= ligcovalent_flex.pdbqt
res_total= 7
in writeResidue with  ligcovalent:A:CYS430
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS430:N, <Atom instance> ligcovalent:A:CYS430:CA)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS430:CA, <Atom instance> ligcovalent:A:CYS430:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS430:CA, <Atom instance> ligcovalent:A:CYS430:CB)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3
 currently queue= CB - SG ,
CA : CB : queue= [(<Atom instance> ligcovalent:A:CYS430:CB, <Atom instance> ligcovalent:A:CYS430:SG)]
 processing queue entry:  CB - SG
in wBF with fromAtom= CB + startAtom= SG startAtom.used= 0
wBF: wrote  SG
self.outatom_counter= 4
 currently queue= SG - CX ,
CB : SG : queue= [(<Atom instance> ligcovalent:A:CYS430:SG, <Atom instance> ligcovalent:A:CYS430:CX)]
 processing queue entry:  SG - CX
in wBF with fromAtom= SG + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 5
 currently queue= CX - CX ,
SG : CX : queue= [(<Atom instance> ligcovalent:A:CYS430:CX, <Atom instance> ligcovalent:A:CYS430:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 6
 currently queue= CX - CX , CX - CX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS430:CX, <Atom instance> ligcovalent:A:CYS430:CX), (<Atom instance> ligcovalent:A:CYS430:CX, <Atom instance> ligcovalent:A:CYS430:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 7


writing and calling wL with nA= CX - 7
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 8
len( CX ).bonds= 1
skipping b= CX - CX
returning queue= []
newQ= []
 currently queue=
CX : CX : queue= []
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 9


writing and calling wL with nA= NX - 9
wBF2: wrote  NX
!!!2:calling wL


in writeLevel with  NX  outatom_counter= 10
len( NX ).bonds= 3
skipping b= NX - CX
processing b= NX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
processing b= CX - NX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 12
len( CX ).bonds= 2
skipping b= NX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 13
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 14
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 15
len( CX ).bonds= 3
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 16
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 17
len( CX ).bonds= 3
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
processing b= OX - CX  activeTors= 1
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
CX wL: queue= [(<Atom instance> ligcovalent:A:CYS430:CX, <Atom instance> ligcovalent:A:CYS430:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 18
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 19
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS430:CX, <Atom instance> ligcovalent:A:CYS430:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS430:CX, <Atom instance> ligcovalent:A:CYS430:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS430:CX, <Atom instance> ligcovalent:A:CYS430:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS430:CX, <Atom instance> ligcovalent:A:CYS430:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS430:CX, <Atom instance> ligcovalent:A:CYS430:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS430:CX, <Atom instance> ligcovalent:A:CYS430:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS430:CX, <Atom instance> ligcovalent:A:CYS430:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS430:CX, <Atom instance> ligcovalent:A:CYS430:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS430:CX, <Atom instance> ligcovalent:A:CYS430:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS430:CX, <Atom instance> ligcovalent:A:CYS430:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS430:CX, <Atom instance> ligcovalent:A:CYS430:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS430:CX, <Atom instance> ligcovalent:A:CYS430:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 19
len( CX ).bonds= 3
skipping b= CX - CX
skipping b= CX - NX
skipping b= CX - CX
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS430:CX, <Atom instance> ligcovalent:A:CYS430:OX)]
newQ= [(<Atom instance> ligcovalent:A:CYS430:CX, <Atom instance> ligcovalent:A:CYS430:OX)]
@@@@len(newq)= 1
queue= [(<Atom instance> ligcovalent:A:CYS430:CX, <Atom instance> ligcovalent:A:CYS430:OX)]


writing and calling wL with nA= OX - 19
wBF2: wrote  OX
!!!2:calling wL


in writeLevel with  OX  outatom_counter= 20
len( OX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []
 currently queue= CX - OX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS430:CX, <Atom instance> ligcovalent:A:CYS430:OX)]
 processing queue entry:  CX - OX
in wBF with fromAtom= CX + startAtom= OX startAtom.used= 0
wBF: wrote  OX
self.outatom_counter= 21


writing and calling wL with nA= CX - 21
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 22
len( CX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []
 currently queue=
CX : OX : queue= []
wrote flex file ligcovalent_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: ligcovalent_flex.pdbqt
wrote rigid file: ligcovalent_rigid.pdbqt
4---done
setting PYTHONHOME environment
setting PYTHONHOME environment
!unable to use ligand.TORSDOF! torsdof always set to ligand.ndihe= 7
5---done
 concat 10 log files... done.
Job finished, good luck!
rm: 无法删除'chimera.com': 没有那个文件或目录
rm: 无法删除'tmp.mol2': 没有那个文件或目录
Done
Processing residue A:CYS158
[start] output filename is: ligcovalent_single.pdb
CHAIN A
Writing output filename: ligcovalent_single.pdb
1---ligcovalent.pdb prepared...
1.5--done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= fixed  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  fixed
merged  0  nonpolar hydrogens
end of base class init
using std outputfilename  fixed.pdbqt
wrote  fixed  to  fixed.pdbqt
2---done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= ligcovalent  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  ligcovalent
merged  21  nonpolar hydrogens
end of base class init
using std outputfilename  ligcovalent.pdbqt
wrote  ligcovalent  to  ligcovalent.pdbqt
3---done
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> fixed:A:CYS158 with 6 MolKit.molecule.Atom]
calling setAutoFlexFields with  fixed:A:CYS158
in setAutoFlexFields with  fixed:A:CYS158
len(rotatables)= 1
returning res.torscount= 1
res.root= CA
ntors= 1
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= fixed_flex.pdbqt
res_total= 1
in writeResidue with  fixed:A:CYS158
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS158:CA, <Atom instance> fixed:A:CYS158:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS158:CA, <Atom instance> fixed:A:CYS158:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS158:N, <Atom instance> fixed:A:CYS158:CA)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3


writing and calling wL with nA= SG - 3
wBF2: wrote  SG
!!!2:calling wL


in writeLevel with  SG  outatom_counter= 4
len( SG ).bonds= 1
skipping b= CB - SG
returning queue= []
newQ= []
 currently queue=
CA : CB : queue= []
wrote flex file fixed_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: fixed_flex.pdbqt
wrote rigid file: fixed_rigid.pdbqt
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> ligcovalent:A:CYS158 with 28 MolKit.molecule.Atom]
calling setAutoFlexFields with  ligcovalent:A:CYS158
in setAutoFlexFields with  ligcovalent:A:CYS158
len(rotatables)= 8
returning res.torscount= 7
res.root= CA
ntors= 7
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= ligcovalent_flex.pdbqt
res_total= 7
in writeResidue with  ligcovalent:A:CYS158
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS158:N, <Atom instance> ligcovalent:A:CYS158:CA)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS158:CA, <Atom instance> ligcovalent:A:CYS158:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS158:CA, <Atom instance> ligcovalent:A:CYS158:C)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3
 currently queue= CB - SG ,
CA : CB : queue= [(<Atom instance> ligcovalent:A:CYS158:CB, <Atom instance> ligcovalent:A:CYS158:SG)]
 processing queue entry:  CB - SG
in wBF with fromAtom= CB + startAtom= SG startAtom.used= 0
wBF: wrote  SG
self.outatom_counter= 4
 currently queue= SG - CX ,
CB : SG : queue= [(<Atom instance> ligcovalent:A:CYS158:SG, <Atom instance> ligcovalent:A:CYS158:CX)]
 processing queue entry:  SG - CX
in wBF with fromAtom= SG + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 5
 currently queue= CX - CX ,
SG : CX : queue= [(<Atom instance> ligcovalent:A:CYS158:CX, <Atom instance> ligcovalent:A:CYS158:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 6
 currently queue= CX - CX , CX - CX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS158:CX, <Atom instance> ligcovalent:A:CYS158:CX), (<Atom instance> ligcovalent:A:CYS158:CX, <Atom instance> ligcovalent:A:CYS158:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 7


writing and calling wL with nA= CX - 7
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 8
len( CX ).bonds= 1
skipping b= CX - CX
returning queue= []
newQ= []
 currently queue=
CX : CX : queue= []
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 9


writing and calling wL with nA= NX - 9
wBF2: wrote  NX
!!!2:calling wL


in writeLevel with  NX  outatom_counter= 10
len( NX ).bonds= 3
processing b= CX - NX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= NX - CX
processing b= NX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 12
len( CX ).bonds= 3
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - NX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 14
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 15
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 16
len( CX ).bonds= 3
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
processing b= OX - CX  activeTors= 1
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
CX wL: queue= [(<Atom instance> ligcovalent:A:CYS158:CX, <Atom instance> ligcovalent:A:CYS158:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 17
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS158:CX, <Atom instance> ligcovalent:A:CYS158:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS158:CX, <Atom instance> ligcovalent:A:CYS158:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS158:CX, <Atom instance> ligcovalent:A:CYS158:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS158:CX, <Atom instance> ligcovalent:A:CYS158:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS158:CX, <Atom instance> ligcovalent:A:CYS158:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS158:CX, <Atom instance> ligcovalent:A:CYS158:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 17
len( CX ).bonds= 3
skipping b= CX - CX
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 18
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 19
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= []
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS158:CX, <Atom instance> ligcovalent:A:CYS158:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS158:CX, <Atom instance> ligcovalent:A:CYS158:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 19
len( CX ).bonds= 2
skipping b= NX - CX
skipping b= CX - CX
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS158:CX, <Atom instance> ligcovalent:A:CYS158:OX)]
newQ= [(<Atom instance> ligcovalent:A:CYS158:CX, <Atom instance> ligcovalent:A:CYS158:OX)]
@@@@len(newq)= 1
queue= [(<Atom instance> ligcovalent:A:CYS158:CX, <Atom instance> ligcovalent:A:CYS158:OX)]


writing and calling wL with nA= OX - 19
wBF2: wrote  OX
!!!2:calling wL


in writeLevel with  OX  outatom_counter= 20
len( OX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []
 currently queue= CX - OX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS158:CX, <Atom instance> ligcovalent:A:CYS158:OX)]
 processing queue entry:  CX - OX
in wBF with fromAtom= CX + startAtom= OX startAtom.used= 0
wBF: wrote  OX
self.outatom_counter= 21


writing and calling wL with nA= CX - 21
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 22
len( CX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []
 currently queue=
CX : OX : queue= []
wrote flex file ligcovalent_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: ligcovalent_flex.pdbqt
wrote rigid file: ligcovalent_rigid.pdbqt
4---done
setting PYTHONHOME environment
setting PYTHONHOME environment
!unable to use ligand.TORSDOF! torsdof always set to ligand.ndihe= 7
5---done
 concat 10 log files... done.
Job finished, good luck!
rm: 无法删除'chimera.com': 没有那个文件或目录
rm: 无法删除'tmp.mol2': 没有那个文件或目录
Done
Processing residue A:CYS60
[start] output filename is: ligcovalent_single.pdb
CHAIN A
Writing output filename: ligcovalent_single.pdb
1---ligcovalent.pdb prepared...
1.5--done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= fixed  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  fixed
merged  0  nonpolar hydrogens
end of base class init
using std outputfilename  fixed.pdbqt
wrote  fixed  to  fixed.pdbqt
2---done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= ligcovalent  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  ligcovalent
merged  21  nonpolar hydrogens
end of base class init
using std outputfilename  ligcovalent.pdbqt
wrote  ligcovalent  to  ligcovalent.pdbqt
3---done
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> fixed:A:CYS60 with 6 MolKit.molecule.Atom]
calling setAutoFlexFields with  fixed:A:CYS60
in setAutoFlexFields with  fixed:A:CYS60
len(rotatables)= 1
returning res.torscount= 1
res.root= CA
ntors= 1
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= fixed_flex.pdbqt
res_total= 1
in writeResidue with  fixed:A:CYS60
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS60:CA, <Atom instance> fixed:A:CYS60:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS60:CA, <Atom instance> fixed:A:CYS60:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS60:N, <Atom instance> fixed:A:CYS60:CA)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3


writing and calling wL with nA= SG - 3
wBF2: wrote  SG
!!!2:calling wL


in writeLevel with  SG  outatom_counter= 4
len( SG ).bonds= 1
skipping b= CB - SG
returning queue= []
newQ= []
 currently queue=
CA : CB : queue= []
wrote flex file fixed_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: fixed_flex.pdbqt
wrote rigid file: fixed_rigid.pdbqt
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> ligcovalent:A:CYS60 with 28 MolKit.molecule.Atom]
calling setAutoFlexFields with  ligcovalent:A:CYS60
in setAutoFlexFields with  ligcovalent:A:CYS60
len(rotatables)= 8
returning res.torscount= 7
res.root= CA
ntors= 7
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= ligcovalent_flex.pdbqt
res_total= 7
in writeResidue with  ligcovalent:A:CYS60
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS60:CA, <Atom instance> ligcovalent:A:CYS60:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS60:CA, <Atom instance> ligcovalent:A:CYS60:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS60:N, <Atom instance> ligcovalent:A:CYS60:CA)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3
 currently queue= CB - SG ,
CA : CB : queue= [(<Atom instance> ligcovalent:A:CYS60:CB, <Atom instance> ligcovalent:A:CYS60:SG)]
 processing queue entry:  CB - SG
in wBF with fromAtom= CB + startAtom= SG startAtom.used= 0
wBF: wrote  SG
self.outatom_counter= 4
 currently queue= SG - CX ,
CB : SG : queue= [(<Atom instance> ligcovalent:A:CYS60:SG, <Atom instance> ligcovalent:A:CYS60:CX)]
 processing queue entry:  SG - CX
in wBF with fromAtom= SG + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 5
 currently queue= CX - CX ,
SG : CX : queue= [(<Atom instance> ligcovalent:A:CYS60:CX, <Atom instance> ligcovalent:A:CYS60:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 6
 currently queue= CX - CX , CX - CX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS60:CX, <Atom instance> ligcovalent:A:CYS60:CX), (<Atom instance> ligcovalent:A:CYS60:CX, <Atom instance> ligcovalent:A:CYS60:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 7


writing and calling wL with nA= OX - 7
wBF2: wrote  OX
!!!2:calling wL


in writeLevel with  OX  outatom_counter= 8
len( OX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []


writing and calling wL with nA= NX - 8
wBF2: wrote  NX
!!!2:calling wL


in writeLevel with  NX  outatom_counter= 9
len( NX ).bonds= 3
processing b= CX - NX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= NX - CX
processing b= NX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 11
len( CX ).bonds= 3
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - NX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 13
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 14
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 15
len( CX ).bonds= 3
processing b= OX - CX  activeTors= 1
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
CX wL: queue= [(<Atom instance> ligcovalent:A:CYS60:CX, <Atom instance> ligcovalent:A:CYS60:OX)]
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 16
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS60:CX, <Atom instance> ligcovalent:A:CYS60:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS60:CX, <Atom instance> ligcovalent:A:CYS60:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS60:CX, <Atom instance> ligcovalent:A:CYS60:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS60:CX, <Atom instance> ligcovalent:A:CYS60:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS60:CX, <Atom instance> ligcovalent:A:CYS60:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS60:CX, <Atom instance> ligcovalent:A:CYS60:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 16
len( CX ).bonds= 3
skipping b= CX - CX
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 17
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 18
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= []
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS60:CX, <Atom instance> ligcovalent:A:CYS60:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS60:CX, <Atom instance> ligcovalent:A:CYS60:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 18
len( CX ).bonds= 2
skipping b= NX - CX
skipping b= CX - CX
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS60:CX, <Atom instance> ligcovalent:A:CYS60:OX)]
newQ= [(<Atom instance> ligcovalent:A:CYS60:CX, <Atom instance> ligcovalent:A:CYS60:OX)]
@@@@len(newq)= 1
queue= [(<Atom instance> ligcovalent:A:CYS60:CX, <Atom instance> ligcovalent:A:CYS60:OX)]
 currently queue= CX - OX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS60:CX, <Atom instance> ligcovalent:A:CYS60:OX)]
 processing queue entry:  CX - OX
in wBF with fromAtom= CX + startAtom= OX startAtom.used= 0
wBF: wrote  OX
self.outatom_counter= 19


writing and calling wL with nA= CX - 19
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 20
len( CX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []
 currently queue=
CX : OX : queue= []
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 21


writing and calling wL with nA= CX - 21
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 22
len( CX ).bonds= 1
skipping b= CX - CX
returning queue= []
newQ= []
 currently queue=
CX : CX : queue= []
wrote flex file ligcovalent_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: ligcovalent_flex.pdbqt
wrote rigid file: ligcovalent_rigid.pdbqt
4---done
setting PYTHONHOME environment
setting PYTHONHOME environment
!unable to use ligand.TORSDOF! torsdof always set to ligand.ndihe= 7
5---done
 concat 10 log files... done.
Job finished, good luck!
rm: 无法删除'chimera.com': 没有那个文件或目录
rm: 无法删除'tmp.mol2': 没有那个文件或目录
Done
Processing residue A:CYS96
[start] output filename is: ligcovalent_single.pdb
CHAIN A
Writing output filename: ligcovalent_single.pdb
1---ligcovalent.pdb prepared...
1.5--done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= fixed  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  fixed
merged  0  nonpolar hydrogens
end of base class init
using std outputfilename  fixed.pdbqt
wrote  fixed  to  fixed.pdbqt
2---done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= ligcovalent  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  ligcovalent
merged  21  nonpolar hydrogens
end of base class init
using std outputfilename  ligcovalent.pdbqt
wrote  ligcovalent  to  ligcovalent.pdbqt
3---done
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> fixed:A:CYS96 with 6 MolKit.molecule.Atom]
calling setAutoFlexFields with  fixed:A:CYS96
in setAutoFlexFields with  fixed:A:CYS96
len(rotatables)= 1
returning res.torscount= 1
res.root= CA
ntors= 1
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= fixed_flex.pdbqt
res_total= 1
in writeResidue with  fixed:A:CYS96
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS96:CA, <Atom instance> fixed:A:CYS96:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS96:CA, <Atom instance> fixed:A:CYS96:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS96:N, <Atom instance> fixed:A:CYS96:CA)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3


writing and calling wL with nA= SG - 3
wBF2: wrote  SG
!!!2:calling wL


in writeLevel with  SG  outatom_counter= 4
len( SG ).bonds= 1
skipping b= CB - SG
returning queue= []
newQ= []
 currently queue=
CA : CB : queue= []
wrote flex file fixed_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: fixed_flex.pdbqt
wrote rigid file: fixed_rigid.pdbqt
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> ligcovalent:A:CYS96 with 28 MolKit.molecule.Atom]
calling setAutoFlexFields with  ligcovalent:A:CYS96
in setAutoFlexFields with  ligcovalent:A:CYS96
len(rotatables)= 8
returning res.torscount= 7
res.root= CA
ntors= 7
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= ligcovalent_flex.pdbqt
res_total= 7
in writeResidue with  ligcovalent:A:CYS96
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS96:N, <Atom instance> ligcovalent:A:CYS96:CA)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS96:CA, <Atom instance> ligcovalent:A:CYS96:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS96:CA, <Atom instance> ligcovalent:A:CYS96:CB)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3
 currently queue= CB - SG ,
CA : CB : queue= [(<Atom instance> ligcovalent:A:CYS96:CB, <Atom instance> ligcovalent:A:CYS96:SG)]
 processing queue entry:  CB - SG
in wBF with fromAtom= CB + startAtom= SG startAtom.used= 0
wBF: wrote  SG
self.outatom_counter= 4
 currently queue= SG - CX ,
CB : SG : queue= [(<Atom instance> ligcovalent:A:CYS96:SG, <Atom instance> ligcovalent:A:CYS96:CX)]
 processing queue entry:  SG - CX
in wBF with fromAtom= SG + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 5
 currently queue= CX - CX ,
SG : CX : queue= [(<Atom instance> ligcovalent:A:CYS96:CX, <Atom instance> ligcovalent:A:CYS96:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 6
 currently queue= CX - CX , CX - CX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS96:CX, <Atom instance> ligcovalent:A:CYS96:CX), (<Atom instance> ligcovalent:A:CYS96:CX, <Atom instance> ligcovalent:A:CYS96:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 7


writing and calling wL with nA= OX - 7
wBF2: wrote  OX
!!!2:calling wL


in writeLevel with  OX  outatom_counter= 8
len( OX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []


writing and calling wL with nA= NX - 8
wBF2: wrote  NX
!!!2:calling wL


in writeLevel with  NX  outatom_counter= 9
len( NX ).bonds= 3
skipping b= NX - CX
processing b= NX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
processing b= CX - NX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 11
len( CX ).bonds= 2
skipping b= NX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 12
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 13
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 14
len( CX ).bonds= 3
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 15
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 16
len( CX ).bonds= 3
processing b= OX - CX  activeTors= 1
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
CX wL: queue= [(<Atom instance> ligcovalent:A:CYS96:CX, <Atom instance> ligcovalent:A:CYS96:OX)]
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 17
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 18
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS96:CX, <Atom instance> ligcovalent:A:CYS96:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS96:CX, <Atom instance> ligcovalent:A:CYS96:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS96:CX, <Atom instance> ligcovalent:A:CYS96:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS96:CX, <Atom instance> ligcovalent:A:CYS96:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS96:CX, <Atom instance> ligcovalent:A:CYS96:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS96:CX, <Atom instance> ligcovalent:A:CYS96:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS96:CX, <Atom instance> ligcovalent:A:CYS96:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS96:CX, <Atom instance> ligcovalent:A:CYS96:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS96:CX, <Atom instance> ligcovalent:A:CYS96:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS96:CX, <Atom instance> ligcovalent:A:CYS96:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS96:CX, <Atom instance> ligcovalent:A:CYS96:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS96:CX, <Atom instance> ligcovalent:A:CYS96:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 18
len( CX ).bonds= 3
skipping b= CX - CX
skipping b= CX - CX
skipping b= CX - NX
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS96:CX, <Atom instance> ligcovalent:A:CYS96:OX)]
newQ= [(<Atom instance> ligcovalent:A:CYS96:CX, <Atom instance> ligcovalent:A:CYS96:OX)]
@@@@len(newq)= 1
queue= [(<Atom instance> ligcovalent:A:CYS96:CX, <Atom instance> ligcovalent:A:CYS96:OX)]
 currently queue= CX - OX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS96:CX, <Atom instance> ligcovalent:A:CYS96:OX)]
 processing queue entry:  CX - OX
in wBF with fromAtom= CX + startAtom= OX startAtom.used= 0
wBF: wrote  OX
self.outatom_counter= 19


writing and calling wL with nA= CX - 19
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 20
len( CX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []
 currently queue=
CX : OX : queue= []
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 21


writing and calling wL with nA= CX - 21
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 22
len( CX ).bonds= 1
skipping b= CX - CX
returning queue= []
newQ= []
 currently queue=
CX : CX : queue= []
wrote flex file ligcovalent_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: ligcovalent_flex.pdbqt
wrote rigid file: ligcovalent_rigid.pdbqt
4---done
setting PYTHONHOME environment
setting PYTHONHOME environment
!unable to use ligand.TORSDOF! torsdof always set to ligand.ndihe= 7
5---done
 concat 10 log files... done.
Job finished, good luck!
rm: 无法删除'chimera.com': 没有那个文件或目录
rm: 无法删除'tmp.mol2': 没有那个文件或目录
Done
Processing residue A:CYS200
[start] output filename is: ligcovalent_single.pdb
CHAIN A
Writing output filename: ligcovalent_single.pdb
1---ligcovalent.pdb prepared...
1.5--done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= fixed  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  fixed
merged  0  nonpolar hydrogens
end of base class init
using std outputfilename  fixed.pdbqt
wrote  fixed  to  fixed.pdbqt
2---done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= ligcovalent  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  ligcovalent
merged  21  nonpolar hydrogens
end of base class init
using std outputfilename  ligcovalent.pdbqt
wrote  ligcovalent  to  ligcovalent.pdbqt
3---done
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> fixed:A:CYS200 with 6 MolKit.molecule.Atom]
calling setAutoFlexFields with  fixed:A:CYS200
in setAutoFlexFields with  fixed:A:CYS200
len(rotatables)= 1
returning res.torscount= 1
res.root= CA
ntors= 1
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= fixed_flex.pdbqt
res_total= 1
in writeResidue with  fixed:A:CYS200
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS200:N, <Atom instance> fixed:A:CYS200:CA)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS200:CA, <Atom instance> fixed:A:CYS200:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS200:CA, <Atom instance> fixed:A:CYS200:CB)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3


writing and calling wL with nA= SG - 3
wBF2: wrote  SG
!!!2:calling wL


in writeLevel with  SG  outatom_counter= 4
len( SG ).bonds= 1
skipping b= CB - SG
returning queue= []
newQ= []
 currently queue=
CA : CB : queue= []
wrote flex file fixed_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: fixed_flex.pdbqt
wrote rigid file: fixed_rigid.pdbqt
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> ligcovalent:A:CYS200 with 28 MolKit.molecule.Atom]
calling setAutoFlexFields with  ligcovalent:A:CYS200
in setAutoFlexFields with  ligcovalent:A:CYS200
len(rotatables)= 8
returning res.torscount= 7
res.root= CA
ntors= 7
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= ligcovalent_flex.pdbqt
res_total= 7
in writeResidue with  ligcovalent:A:CYS200
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS200:N, <Atom instance> ligcovalent:A:CYS200:CA)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS200:CA, <Atom instance> ligcovalent:A:CYS200:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS200:CA, <Atom instance> ligcovalent:A:CYS200:C)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3
 currently queue= CB - SG ,
CA : CB : queue= [(<Atom instance> ligcovalent:A:CYS200:CB, <Atom instance> ligcovalent:A:CYS200:SG)]
 processing queue entry:  CB - SG
in wBF with fromAtom= CB + startAtom= SG startAtom.used= 0
wBF: wrote  SG
self.outatom_counter= 4
 currently queue= SG - CX ,
CB : SG : queue= [(<Atom instance> ligcovalent:A:CYS200:SG, <Atom instance> ligcovalent:A:CYS200:CX)]
 processing queue entry:  SG - CX
in wBF with fromAtom= SG + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 5
 currently queue= CX - CX ,
SG : CX : queue= [(<Atom instance> ligcovalent:A:CYS200:CX, <Atom instance> ligcovalent:A:CYS200:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 6
 currently queue= CX - CX , CX - CX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS200:CX, <Atom instance> ligcovalent:A:CYS200:CX), (<Atom instance> ligcovalent:A:CYS200:CX, <Atom instance> ligcovalent:A:CYS200:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 7


writing and calling wL with nA= OX - 7
wBF2: wrote  OX
!!!2:calling wL


in writeLevel with  OX  outatom_counter= 8
len( OX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []


writing and calling wL with nA= NX - 8
wBF2: wrote  NX
!!!2:calling wL


in writeLevel with  NX  outatom_counter= 9
len( NX ).bonds= 3
skipping b= NX - CX
processing b= NX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
processing b= CX - NX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 11
len( CX ).bonds= 2
skipping b= NX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 12
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 13
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 14
len( CX ).bonds= 3
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 15
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 16
len( CX ).bonds= 3
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
processing b= OX - CX  activeTors= 1
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
CX wL: queue= [(<Atom instance> ligcovalent:A:CYS200:CX, <Atom instance> ligcovalent:A:CYS200:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 17
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 18
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS200:CX, <Atom instance> ligcovalent:A:CYS200:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS200:CX, <Atom instance> ligcovalent:A:CYS200:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS200:CX, <Atom instance> ligcovalent:A:CYS200:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS200:CX, <Atom instance> ligcovalent:A:CYS200:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS200:CX, <Atom instance> ligcovalent:A:CYS200:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS200:CX, <Atom instance> ligcovalent:A:CYS200:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS200:CX, <Atom instance> ligcovalent:A:CYS200:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS200:CX, <Atom instance> ligcovalent:A:CYS200:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS200:CX, <Atom instance> ligcovalent:A:CYS200:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS200:CX, <Atom instance> ligcovalent:A:CYS200:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS200:CX, <Atom instance> ligcovalent:A:CYS200:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS200:CX, <Atom instance> ligcovalent:A:CYS200:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 18
len( CX ).bonds= 3
skipping b= CX - CX
skipping b= CX - NX
skipping b= CX - CX
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS200:CX, <Atom instance> ligcovalent:A:CYS200:OX)]
newQ= [(<Atom instance> ligcovalent:A:CYS200:CX, <Atom instance> ligcovalent:A:CYS200:OX)]
@@@@len(newq)= 1
queue= [(<Atom instance> ligcovalent:A:CYS200:CX, <Atom instance> ligcovalent:A:CYS200:OX)]
 currently queue= CX - OX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS200:CX, <Atom instance> ligcovalent:A:CYS200:OX)]
 processing queue entry:  CX - OX
in wBF with fromAtom= CX + startAtom= OX startAtom.used= 0
wBF: wrote  OX
self.outatom_counter= 19


writing and calling wL with nA= CX - 19
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 20
len( CX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []
 currently queue=
CX : OX : queue= []
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 21


writing and calling wL with nA= CX - 21
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 22
len( CX ).bonds= 1
skipping b= CX - CX
returning queue= []
newQ= []
 currently queue=
CX : CX : queue= []
wrote flex file ligcovalent_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: ligcovalent_flex.pdbqt
wrote rigid file: ligcovalent_rigid.pdbqt
4---done
setting PYTHONHOME environment
setting PYTHONHOME environment
!unable to use ligand.TORSDOF! torsdof always set to ligand.ndihe= 7
5---done
 concat 10 log files... done.
Job finished, good luck!
rm: 无法删除'chimera.com': 没有那个文件或目录
rm: 无法删除'tmp.mol2': 没有那个文件或目录
Done
Processing residue A:CYS42
[start] output filename is: ligcovalent_single.pdb
CHAIN A
Writing output filename: ligcovalent_single.pdb
1---ligcovalent.pdb prepared...
1.5--done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= fixed  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  fixed
merged  0  nonpolar hydrogens
end of base class init
using std outputfilename  fixed.pdbqt
wrote  fixed  to  fixed.pdbqt
2---done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= ligcovalent  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  ligcovalent
merged  21  nonpolar hydrogens
end of base class init
using std outputfilename  ligcovalent.pdbqt
wrote  ligcovalent  to  ligcovalent.pdbqt
3---done
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> fixed:A:CYS42 with 6 MolKit.molecule.Atom]
calling setAutoFlexFields with  fixed:A:CYS42
in setAutoFlexFields with  fixed:A:CYS42
len(rotatables)= 2
returning res.torscount= 2
res.root= CA
ntors= 2
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= fixed_flex.pdbqt
res_total= 2
in writeResidue with  fixed:A:CYS42
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS42:N, <Atom instance> fixed:A:CYS42:CA)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS42:CA, <Atom instance> fixed:A:CYS42:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS42:CA, <Atom instance> fixed:A:CYS42:C)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3
 currently queue= CB - SG ,
CA : CB : queue= [(<Atom instance> fixed:A:CYS42:CB, <Atom instance> fixed:A:CYS42:SG)]
 processing queue entry:  CB - SG
in wBF with fromAtom= CB + startAtom= SG startAtom.used= 0
wBF: wrote  SG
self.outatom_counter= 4
 currently queue=
CB : SG : queue= []
wrote flex file fixed_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: fixed_flex.pdbqt
wrote rigid file: fixed_rigid.pdbqt
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> ligcovalent:A:CYS42 with 28 MolKit.molecule.Atom]
calling setAutoFlexFields with  ligcovalent:A:CYS42
in setAutoFlexFields with  ligcovalent:A:CYS42
len(rotatables)= 8
returning res.torscount= 7
res.root= CA
ntors= 7
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= ligcovalent_flex.pdbqt
res_total= 7
in writeResidue with  ligcovalent:A:CYS42
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS42:CA, <Atom instance> ligcovalent:A:CYS42:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS42:CA, <Atom instance> ligcovalent:A:CYS42:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS42:N, <Atom instance> ligcovalent:A:CYS42:CA)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3
 currently queue= CB - SG ,
CA : CB : queue= [(<Atom instance> ligcovalent:A:CYS42:CB, <Atom instance> ligcovalent:A:CYS42:SG)]
 processing queue entry:  CB - SG
in wBF with fromAtom= CB + startAtom= SG startAtom.used= 0
wBF: wrote  SG
self.outatom_counter= 4
 currently queue= SG - CX ,
CB : SG : queue= [(<Atom instance> ligcovalent:A:CYS42:SG, <Atom instance> ligcovalent:A:CYS42:CX)]
 processing queue entry:  SG - CX
in wBF with fromAtom= SG + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 5
 currently queue= CX - CX ,
SG : CX : queue= [(<Atom instance> ligcovalent:A:CYS42:CX, <Atom instance> ligcovalent:A:CYS42:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 6
 currently queue= CX - CX , CX - CX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS42:CX, <Atom instance> ligcovalent:A:CYS42:CX), (<Atom instance> ligcovalent:A:CYS42:CX, <Atom instance> ligcovalent:A:CYS42:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 7


writing and calling wL with nA= NX - 7
wBF2: wrote  NX
!!!2:calling wL


in writeLevel with  NX  outatom_counter= 8
len( NX ).bonds= 3
skipping b= NX - CX
processing b= NX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
processing b= CX - NX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 10
len( CX ).bonds= 2
skipping b= NX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 11
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 12
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 13
len( CX ).bonds= 3
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 14
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 15
len( CX ).bonds= 3
processing b= OX - CX  activeTors= 1
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
CX wL: queue= [(<Atom instance> ligcovalent:A:CYS42:CX, <Atom instance> ligcovalent:A:CYS42:OX)]
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 16
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 17
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS42:CX, <Atom instance> ligcovalent:A:CYS42:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS42:CX, <Atom instance> ligcovalent:A:CYS42:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS42:CX, <Atom instance> ligcovalent:A:CYS42:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS42:CX, <Atom instance> ligcovalent:A:CYS42:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS42:CX, <Atom instance> ligcovalent:A:CYS42:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS42:CX, <Atom instance> ligcovalent:A:CYS42:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS42:CX, <Atom instance> ligcovalent:A:CYS42:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS42:CX, <Atom instance> ligcovalent:A:CYS42:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS42:CX, <Atom instance> ligcovalent:A:CYS42:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS42:CX, <Atom instance> ligcovalent:A:CYS42:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS42:CX, <Atom instance> ligcovalent:A:CYS42:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS42:CX, <Atom instance> ligcovalent:A:CYS42:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 17
len( CX ).bonds= 3
skipping b= CX - CX
skipping b= CX - NX
skipping b= CX - CX
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS42:CX, <Atom instance> ligcovalent:A:CYS42:OX)]
newQ= [(<Atom instance> ligcovalent:A:CYS42:CX, <Atom instance> ligcovalent:A:CYS42:OX)]
@@@@len(newq)= 1
queue= [(<Atom instance> ligcovalent:A:CYS42:CX, <Atom instance> ligcovalent:A:CYS42:OX)]


writing and calling wL with nA= OX - 17
wBF2: wrote  OX
!!!2:calling wL


in writeLevel with  OX  outatom_counter= 18
len( OX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []
 currently queue= CX - OX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS42:CX, <Atom instance> ligcovalent:A:CYS42:OX)]
 processing queue entry:  CX - OX
in wBF with fromAtom= CX + startAtom= OX startAtom.used= 0
wBF: wrote  OX
self.outatom_counter= 19


writing and calling wL with nA= CX - 19
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 20
len( CX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []
 currently queue=
CX : OX : queue= []
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 21


writing and calling wL with nA= CX - 21
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 22
len( CX ).bonds= 1
skipping b= CX - CX
returning queue= []
newQ= []
 currently queue=
CX : CX : queue= []
wrote flex file ligcovalent_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: ligcovalent_flex.pdbqt
wrote rigid file: ligcovalent_rigid.pdbqt
4---done
setting PYTHONHOME environment
setting PYTHONHOME environment
!unable to use ligand.TORSDOF! torsdof always set to ligand.ndihe= 7
5---done
 concat 10 log files... done.
Job finished, good luck!
rm: 无法删除'chimera.com': 没有那个文件或目录
rm: 无法删除'tmp.mol2': 没有那个文件或目录
Done
Processing residue A:CYS69
[start] output filename is: ligcovalent_single.pdb
CHAIN A
Writing output filename: ligcovalent_single.pdb
1---ligcovalent.pdb prepared...
1.5--done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= fixed  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  fixed
merged  0  nonpolar hydrogens
end of base class init
using std outputfilename  fixed.pdbqt
wrote  fixed  to  fixed.pdbqt
2---done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= ligcovalent  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  ligcovalent
merged  21  nonpolar hydrogens
end of base class init
using std outputfilename  ligcovalent.pdbqt
wrote  ligcovalent  to  ligcovalent.pdbqt
3---done
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> fixed:A:CYS69 with 6 MolKit.molecule.Atom]
calling setAutoFlexFields with  fixed:A:CYS69
in setAutoFlexFields with  fixed:A:CYS69
len(rotatables)= 1
returning res.torscount= 1
res.root= CA
ntors= 1
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= fixed_flex.pdbqt
res_total= 1
in writeResidue with  fixed:A:CYS69
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS69:N, <Atom instance> fixed:A:CYS69:CA)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS69:CA, <Atom instance> fixed:A:CYS69:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS69:CA, <Atom instance> fixed:A:CYS69:CB)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3


writing and calling wL with nA= SG - 3
wBF2: wrote  SG
!!!2:calling wL


in writeLevel with  SG  outatom_counter= 4
len( SG ).bonds= 1
skipping b= CB - SG
returning queue= []
newQ= []
 currently queue=
CA : CB : queue= []
wrote flex file fixed_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: fixed_flex.pdbqt
wrote rigid file: fixed_rigid.pdbqt
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> ligcovalent:A:CYS69 with 28 MolKit.molecule.Atom]
calling setAutoFlexFields with  ligcovalent:A:CYS69
in setAutoFlexFields with  ligcovalent:A:CYS69
len(rotatables)= 8
returning res.torscount= 7
res.root= CA
ntors= 7
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= ligcovalent_flex.pdbqt
res_total= 7
in writeResidue with  ligcovalent:A:CYS69
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS69:N, <Atom instance> ligcovalent:A:CYS69:CA)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS69:CA, <Atom instance> ligcovalent:A:CYS69:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS69:CA, <Atom instance> ligcovalent:A:CYS69:CB)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3
 currently queue= CB - SG ,
CA : CB : queue= [(<Atom instance> ligcovalent:A:CYS69:CB, <Atom instance> ligcovalent:A:CYS69:SG)]
 processing queue entry:  CB - SG
in wBF with fromAtom= CB + startAtom= SG startAtom.used= 0
wBF: wrote  SG
self.outatom_counter= 4
 currently queue= SG - CX ,
CB : SG : queue= [(<Atom instance> ligcovalent:A:CYS69:SG, <Atom instance> ligcovalent:A:CYS69:CX)]
 processing queue entry:  SG - CX
in wBF with fromAtom= SG + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 5
 currently queue= CX - CX ,
SG : CX : queue= [(<Atom instance> ligcovalent:A:CYS69:CX, <Atom instance> ligcovalent:A:CYS69:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 6
 currently queue= CX - CX , CX - CX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS69:CX, <Atom instance> ligcovalent:A:CYS69:CX), (<Atom instance> ligcovalent:A:CYS69:CX, <Atom instance> ligcovalent:A:CYS69:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 7


writing and calling wL with nA= CX - 7
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 8
len( CX ).bonds= 1
skipping b= CX - CX
returning queue= []
newQ= []
 currently queue=
CX : CX : queue= []
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 9


writing and calling wL with nA= OX - 9
wBF2: wrote  OX
!!!2:calling wL


in writeLevel with  OX  outatom_counter= 10
len( OX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []


writing and calling wL with nA= NX - 10
wBF2: wrote  NX
!!!2:calling wL


in writeLevel with  NX  outatom_counter= 11
len( NX ).bonds= 3
skipping b= NX - CX
processing b= NX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
processing b= CX - NX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 13
len( CX ).bonds= 2
skipping b= NX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 14
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 15
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 16
len( CX ).bonds= 3
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 17
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 18
len( CX ).bonds= 3
processing b= OX - CX  activeTors= 1
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
CX wL: queue= [(<Atom instance> ligcovalent:A:CYS69:CX, <Atom instance> ligcovalent:A:CYS69:OX)]
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 19
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 20
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS69:CX, <Atom instance> ligcovalent:A:CYS69:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS69:CX, <Atom instance> ligcovalent:A:CYS69:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS69:CX, <Atom instance> ligcovalent:A:CYS69:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS69:CX, <Atom instance> ligcovalent:A:CYS69:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS69:CX, <Atom instance> ligcovalent:A:CYS69:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS69:CX, <Atom instance> ligcovalent:A:CYS69:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS69:CX, <Atom instance> ligcovalent:A:CYS69:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS69:CX, <Atom instance> ligcovalent:A:CYS69:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS69:CX, <Atom instance> ligcovalent:A:CYS69:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS69:CX, <Atom instance> ligcovalent:A:CYS69:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS69:CX, <Atom instance> ligcovalent:A:CYS69:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS69:CX, <Atom instance> ligcovalent:A:CYS69:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 20
len( CX ).bonds= 3
skipping b= CX - CX
skipping b= CX - NX
skipping b= CX - CX
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS69:CX, <Atom instance> ligcovalent:A:CYS69:OX)]
newQ= [(<Atom instance> ligcovalent:A:CYS69:CX, <Atom instance> ligcovalent:A:CYS69:OX)]
@@@@len(newq)= 1
queue= [(<Atom instance> ligcovalent:A:CYS69:CX, <Atom instance> ligcovalent:A:CYS69:OX)]
 currently queue= CX - OX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS69:CX, <Atom instance> ligcovalent:A:CYS69:OX)]
 processing queue entry:  CX - OX
in wBF with fromAtom= CX + startAtom= OX startAtom.used= 0
wBF: wrote  OX
self.outatom_counter= 21


writing and calling wL with nA= CX - 21
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 22
len( CX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []
 currently queue=
CX : OX : queue= []
wrote flex file ligcovalent_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: ligcovalent_flex.pdbqt
wrote rigid file: ligcovalent_rigid.pdbqt
4---done
setting PYTHONHOME environment
setting PYTHONHOME environment
!unable to use ligand.TORSDOF! torsdof always set to ligand.ndihe= 7
5---done
 concat 10 log files... done.
Job finished, good luck!
rm: 无法删除'chimera.com': 没有那个文件或目录
rm: 无法删除'tmp.mol2': 没有那个文件或目录
Done
Processing residue A:CYS286
[start] output filename is: ligcovalent_single.pdb
CHAIN A
Writing output filename: ligcovalent_single.pdb
1---ligcovalent.pdb prepared...
1.5--done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= fixed  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
Unable to assign MAP type to atom N
Sorry, there are no Gasteiger parameters available for atom fixed:A:HIS493:NE2
added gasteigercharges to  fixed
merged  0  nonpolar hydrogens
end of base class init
using std outputfilename  fixed.pdbqt
wrote  fixed  to  fixed.pdbqt
2---done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= ligcovalent  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  ligcovalent
merged  21  nonpolar hydrogens
end of base class init
using std outputfilename  ligcovalent.pdbqt
wrote  ligcovalent  to  ligcovalent.pdbqt
3---done
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> fixed:A:CYS286 with 6 MolKit.molecule.Atom]
calling setAutoFlexFields with  fixed:A:CYS286
in setAutoFlexFields with  fixed:A:CYS286
Unable to assign XYZ type to atom N
len(rotatables)= 1
returning res.torscount= 1
res.root= CA
ntors= 1
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= fixed_flex.pdbqt
res_total= 1
in writeResidue with  fixed:A:CYS286
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS286:N, <Atom instance> fixed:A:CYS286:CA)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS286:CA, <Atom instance> fixed:A:CYS286:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS286:CA, <Atom instance> fixed:A:CYS286:CB)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3


writing and calling wL with nA= SG - 3
wBF2: wrote  SG
!!!2:calling wL


in writeLevel with  SG  outatom_counter= 4
len( SG ).bonds= 1
skipping b= CB - SG
returning queue= []
newQ= []
 currently queue=
CA : CB : queue= []
wrote flex file fixed_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: fixed_flex.pdbqt
wrote rigid file: fixed_rigid.pdbqt
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> ligcovalent:A:CYS286 with 28 MolKit.molecule.Atom]
calling setAutoFlexFields with  ligcovalent:A:CYS286
in setAutoFlexFields with  ligcovalent:A:CYS286
len(rotatables)= 8
returning res.torscount= 7
res.root= CA
ntors= 7
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= ligcovalent_flex.pdbqt
res_total= 7
in writeResidue with  ligcovalent:A:CYS286
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS286:CA, <Atom instance> ligcovalent:A:CYS286:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS286:CA, <Atom instance> ligcovalent:A:CYS286:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS286:N, <Atom instance> ligcovalent:A:CYS286:CA)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3
 currently queue= CB - SG ,
CA : CB : queue= [(<Atom instance> ligcovalent:A:CYS286:CB, <Atom instance> ligcovalent:A:CYS286:SG)]
 processing queue entry:  CB - SG
in wBF with fromAtom= CB + startAtom= SG startAtom.used= 0
wBF: wrote  SG
self.outatom_counter= 4
 currently queue= SG - CX ,
CB : SG : queue= [(<Atom instance> ligcovalent:A:CYS286:SG, <Atom instance> ligcovalent:A:CYS286:CX)]
 processing queue entry:  SG - CX
in wBF with fromAtom= SG + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 5
 currently queue= CX - CX ,
SG : CX : queue= [(<Atom instance> ligcovalent:A:CYS286:CX, <Atom instance> ligcovalent:A:CYS286:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 6
 currently queue= CX - CX , CX - CX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS286:CX, <Atom instance> ligcovalent:A:CYS286:CX), (<Atom instance> ligcovalent:A:CYS286:CX, <Atom instance> ligcovalent:A:CYS286:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 7


writing and calling wL with nA= NX - 7
wBF2: wrote  NX
!!!2:calling wL


in writeLevel with  NX  outatom_counter= 8
len( NX ).bonds= 3
processing b= NX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= NX - CX
processing b= CX - NX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 10
len( CX ).bonds= 2
skipping b= NX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 11
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 12
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 13
len( CX ).bonds= 3
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 14
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 15
len( CX ).bonds= 3
processing b= OX - CX  activeTors= 1
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
CX wL: queue= [(<Atom instance> ligcovalent:A:CYS286:CX, <Atom instance> ligcovalent:A:CYS286:OX)]
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 16
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 17
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS286:CX, <Atom instance> ligcovalent:A:CYS286:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS286:CX, <Atom instance> ligcovalent:A:CYS286:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS286:CX, <Atom instance> ligcovalent:A:CYS286:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS286:CX, <Atom instance> ligcovalent:A:CYS286:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS286:CX, <Atom instance> ligcovalent:A:CYS286:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS286:CX, <Atom instance> ligcovalent:A:CYS286:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS286:CX, <Atom instance> ligcovalent:A:CYS286:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS286:CX, <Atom instance> ligcovalent:A:CYS286:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS286:CX, <Atom instance> ligcovalent:A:CYS286:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS286:CX, <Atom instance> ligcovalent:A:CYS286:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS286:CX, <Atom instance> ligcovalent:A:CYS286:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS286:CX, <Atom instance> ligcovalent:A:CYS286:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 17
len( CX ).bonds= 3
skipping b= CX - CX
skipping b= CX - NX
skipping b= CX - CX
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS286:CX, <Atom instance> ligcovalent:A:CYS286:OX)]
newQ= [(<Atom instance> ligcovalent:A:CYS286:CX, <Atom instance> ligcovalent:A:CYS286:OX)]
@@@@len(newq)= 1
queue= [(<Atom instance> ligcovalent:A:CYS286:CX, <Atom instance> ligcovalent:A:CYS286:OX)]


writing and calling wL with nA= OX - 17
wBF2: wrote  OX
!!!2:calling wL


in writeLevel with  OX  outatom_counter= 18
len( OX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []
 currently queue= CX - OX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS286:CX, <Atom instance> ligcovalent:A:CYS286:OX)]
 processing queue entry:  CX - OX
in wBF with fromAtom= CX + startAtom= OX startAtom.used= 0
wBF: wrote  OX
self.outatom_counter= 19


writing and calling wL with nA= CX - 19
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 20
len( CX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []
 currently queue=
CX : OX : queue= []
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 21


writing and calling wL with nA= CX - 21
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 22
len( CX ).bonds= 1
skipping b= CX - CX
returning queue= []
newQ= []
 currently queue=
CX : CX : queue= []
wrote flex file ligcovalent_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: ligcovalent_flex.pdbqt
wrote rigid file: ligcovalent_rigid.pdbqt
4---done
setting PYTHONHOME environment
setting PYTHONHOME environment
!unable to use ligand.TORSDOF! torsdof always set to ligand.ndihe= 7
5---done
 concat 10 log files... done.
Job finished, good luck!
rm: 无法删除'chimera.com': 没有那个文件或目录
rm: 无法删除'tmp.mol2': 没有那个文件或目录
Done
Processing residue A:CYS2501
[start] output filename is: ligcovalent_single.pdb
CHAIN A
Writing output filename: ligcovalent_single.pdb
1---ligcovalent.pdb prepared...
1.5--done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= fixed  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
Unable to assign MAP type to atom N
Sorry, there are no Gasteiger parameters available for atom fixed:A:HIS2563:NE2
added gasteigercharges to  fixed
merged  0  nonpolar hydrogens
end of base class init
using std outputfilename  fixed.pdbqt
wrote  fixed  to  fixed.pdbqt
2---done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= ligcovalent  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  ligcovalent
merged  21  nonpolar hydrogens
end of base class init
using std outputfilename  ligcovalent.pdbqt
wrote  ligcovalent  to  ligcovalent.pdbqt
3---done
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> fixed:A:CYS2501 with 6 MolKit.molecule.Atom]
calling setAutoFlexFields with  fixed:A:CYS2501
in setAutoFlexFields with  fixed:A:CYS2501
Unable to assign XYZ type to atom N
len(rotatables)= 1
returning res.torscount= 1
res.root= CA
ntors= 1
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= fixed_flex.pdbqt
res_total= 1
in writeResidue with  fixed:A:CYS2501
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS2501:CA, <Atom instance> fixed:A:CYS2501:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS2501:CA, <Atom instance> fixed:A:CYS2501:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS2501:N, <Atom instance> fixed:A:CYS2501:CA)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3


writing and calling wL with nA= SG - 3
wBF2: wrote  SG
!!!2:calling wL


in writeLevel with  SG  outatom_counter= 4
len( SG ).bonds= 1
skipping b= CB - SG
returning queue= []
newQ= []
 currently queue=
CA : CB : queue= []
wrote flex file fixed_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: fixed_flex.pdbqt
wrote rigid file: fixed_rigid.pdbqt
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> ligcovalent:A:CYS2501 with 28 MolKit.molecule.Atom]
calling setAutoFlexFields with  ligcovalent:A:CYS2501
in setAutoFlexFields with  ligcovalent:A:CYS2501
len(rotatables)= 8
returning res.torscount= 7
res.root= CA
ntors= 7
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= ligcovalent_flex.pdbqt
res_total= 7
in writeResidue with  ligcovalent:A:CYS2501
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS2501:N, <Atom instance> ligcovalent:A:CYS2501:CA)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS2501:CA, <Atom instance> ligcovalent:A:CYS2501:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS2501:CA, <Atom instance> ligcovalent:A:CYS2501:CB)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3
 currently queue= CB - SG ,
CA : CB : queue= [(<Atom instance> ligcovalent:A:CYS2501:CB, <Atom instance> ligcovalent:A:CYS2501:SG)]
 processing queue entry:  CB - SG
in wBF with fromAtom= CB + startAtom= SG startAtom.used= 0
wBF: wrote  SG
self.outatom_counter= 4
 currently queue= SG - CX ,
CB : SG : queue= [(<Atom instance> ligcovalent:A:CYS2501:SG, <Atom instance> ligcovalent:A:CYS2501:CX)]
 processing queue entry:  SG - CX
in wBF with fromAtom= SG + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 5
 currently queue= CX - CX ,
SG : CX : queue= [(<Atom instance> ligcovalent:A:CYS2501:CX, <Atom instance> ligcovalent:A:CYS2501:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 6
 currently queue= CX - CX , CX - CX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS2501:CX, <Atom instance> ligcovalent:A:CYS2501:CX), (<Atom instance> ligcovalent:A:CYS2501:CX, <Atom instance> ligcovalent:A:CYS2501:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 7


writing and calling wL with nA= CX - 7
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 8
len( CX ).bonds= 1
skipping b= CX - CX
returning queue= []
newQ= []
 currently queue=
CX : CX : queue= []
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 9


writing and calling wL with nA= NX - 9
wBF2: wrote  NX
!!!2:calling wL


in writeLevel with  NX  outatom_counter= 10
len( NX ).bonds= 3
processing b= CX - NX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= NX - CX
processing b= NX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 12
len( CX ).bonds= 3
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - NX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 14
len( CX ).bonds= 3
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 16
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 17
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= []
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 17
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 18
len( CX ).bonds= 3
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
processing b= OX - CX  activeTors= 1
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
CX wL: queue= [(<Atom instance> ligcovalent:A:CYS2501:CX, <Atom instance> ligcovalent:A:CYS2501:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 19
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS2501:CX, <Atom instance> ligcovalent:A:CYS2501:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS2501:CX, <Atom instance> ligcovalent:A:CYS2501:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS2501:CX, <Atom instance> ligcovalent:A:CYS2501:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS2501:CX, <Atom instance> ligcovalent:A:CYS2501:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS2501:CX, <Atom instance> ligcovalent:A:CYS2501:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS2501:CX, <Atom instance> ligcovalent:A:CYS2501:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 19
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS2501:CX, <Atom instance> ligcovalent:A:CYS2501:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS2501:CX, <Atom instance> ligcovalent:A:CYS2501:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 19
len( CX ).bonds= 2
skipping b= NX - CX
skipping b= CX - CX
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS2501:CX, <Atom instance> ligcovalent:A:CYS2501:OX)]
newQ= [(<Atom instance> ligcovalent:A:CYS2501:CX, <Atom instance> ligcovalent:A:CYS2501:OX)]
@@@@len(newq)= 1
queue= [(<Atom instance> ligcovalent:A:CYS2501:CX, <Atom instance> ligcovalent:A:CYS2501:OX)]


writing and calling wL with nA= OX - 19
wBF2: wrote  OX
!!!2:calling wL


in writeLevel with  OX  outatom_counter= 20
len( OX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []
 currently queue= CX - OX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS2501:CX, <Atom instance> ligcovalent:A:CYS2501:OX)]
 processing queue entry:  CX - OX
in wBF with fromAtom= CX + startAtom= OX startAtom.used= 0
wBF: wrote  OX
self.outatom_counter= 21


writing and calling wL with nA= CX - 21
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 22
len( CX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []
 currently queue=
CX : OX : queue= []
wrote flex file ligcovalent_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: ligcovalent_flex.pdbqt
wrote rigid file: ligcovalent_rigid.pdbqt
4---done
setting PYTHONHOME environment
setting PYTHONHOME environment
!unable to use ligand.TORSDOF! torsdof always set to ligand.ndihe= 7
5---done
 concat 10 log files... done.
Job finished, good luck!
rm: 无法删除'chimera.com': 没有那个文件或目录
rm: 无法删除'tmp.mol2': 没有那个文件或目录
Done
Processing residue A:CYS211
[start] output filename is: ligcovalent_single.pdb
CHAIN A
Writing output filename: ligcovalent_single.pdb
1---ligcovalent.pdb prepared...
1.5--done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= fixed  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  fixed
merged  0  nonpolar hydrogens
end of base class init
using std outputfilename  fixed.pdbqt
wrote  fixed  to  fixed.pdbqt
2---done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= ligcovalent  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  ligcovalent
merged  21  nonpolar hydrogens
end of base class init
using std outputfilename  ligcovalent.pdbqt
wrote  ligcovalent  to  ligcovalent.pdbqt
3---done
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> fixed:A:CYS211 with 6 MolKit.molecule.Atom]
calling setAutoFlexFields with  fixed:A:CYS211
in setAutoFlexFields with  fixed:A:CYS211
len(rotatables)= 1
returning res.torscount= 1
res.root= CA
ntors= 1
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= fixed_flex.pdbqt
res_total= 1
in writeResidue with  fixed:A:CYS211
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS211:CA, <Atom instance> fixed:A:CYS211:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS211:CA, <Atom instance> fixed:A:CYS211:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS211:N, <Atom instance> fixed:A:CYS211:CA)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3


writing and calling wL with nA= SG - 3
wBF2: wrote  SG
!!!2:calling wL


in writeLevel with  SG  outatom_counter= 4
len( SG ).bonds= 1
skipping b= CB - SG
returning queue= []
newQ= []
 currently queue=
CA : CB : queue= []
wrote flex file fixed_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: fixed_flex.pdbqt
wrote rigid file: fixed_rigid.pdbqt
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> ligcovalent:A:CYS211 with 28 MolKit.molecule.Atom]
calling setAutoFlexFields with  ligcovalent:A:CYS211
in setAutoFlexFields with  ligcovalent:A:CYS211
len(rotatables)= 8
returning res.torscount= 7
res.root= CA
ntors= 7
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= ligcovalent_flex.pdbqt
res_total= 7
in writeResidue with  ligcovalent:A:CYS211
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS211:N, <Atom instance> ligcovalent:A:CYS211:CA)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS211:CA, <Atom instance> ligcovalent:A:CYS211:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS211:CA, <Atom instance> ligcovalent:A:CYS211:CB)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3
 currently queue= CB - SG ,
CA : CB : queue= [(<Atom instance> ligcovalent:A:CYS211:CB, <Atom instance> ligcovalent:A:CYS211:SG)]
 processing queue entry:  CB - SG
in wBF with fromAtom= CB + startAtom= SG startAtom.used= 0
wBF: wrote  SG
self.outatom_counter= 4
 currently queue= SG - CX ,
CB : SG : queue= [(<Atom instance> ligcovalent:A:CYS211:SG, <Atom instance> ligcovalent:A:CYS211:CX)]
 processing queue entry:  SG - CX
in wBF with fromAtom= SG + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 5
 currently queue= CX - CX ,
SG : CX : queue= [(<Atom instance> ligcovalent:A:CYS211:CX, <Atom instance> ligcovalent:A:CYS211:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 6
 currently queue= CX - CX , CX - CX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS211:CX, <Atom instance> ligcovalent:A:CYS211:CX), (<Atom instance> ligcovalent:A:CYS211:CX, <Atom instance> ligcovalent:A:CYS211:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 7


writing and calling wL with nA= NX - 7
wBF2: wrote  NX
!!!2:calling wL


in writeLevel with  NX  outatom_counter= 8
len( NX ).bonds= 3
processing b= NX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= NX - CX
processing b= CX - NX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 10
len( CX ).bonds= 2
skipping b= NX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 11
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 12
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 13
len( CX ).bonds= 3
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 14
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 15
len( CX ).bonds= 3
processing b= OX - CX  activeTors= 1
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
CX wL: queue= [(<Atom instance> ligcovalent:A:CYS211:CX, <Atom instance> ligcovalent:A:CYS211:OX)]
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 16
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 17
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS211:CX, <Atom instance> ligcovalent:A:CYS211:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS211:CX, <Atom instance> ligcovalent:A:CYS211:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS211:CX, <Atom instance> ligcovalent:A:CYS211:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS211:CX, <Atom instance> ligcovalent:A:CYS211:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS211:CX, <Atom instance> ligcovalent:A:CYS211:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS211:CX, <Atom instance> ligcovalent:A:CYS211:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS211:CX, <Atom instance> ligcovalent:A:CYS211:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS211:CX, <Atom instance> ligcovalent:A:CYS211:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS211:CX, <Atom instance> ligcovalent:A:CYS211:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS211:CX, <Atom instance> ligcovalent:A:CYS211:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS211:CX, <Atom instance> ligcovalent:A:CYS211:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS211:CX, <Atom instance> ligcovalent:A:CYS211:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 17
len( CX ).bonds= 3
skipping b= CX - CX
skipping b= CX - CX
skipping b= CX - NX
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS211:CX, <Atom instance> ligcovalent:A:CYS211:OX)]
newQ= [(<Atom instance> ligcovalent:A:CYS211:CX, <Atom instance> ligcovalent:A:CYS211:OX)]
@@@@len(newq)= 1
queue= [(<Atom instance> ligcovalent:A:CYS211:CX, <Atom instance> ligcovalent:A:CYS211:OX)]


writing and calling wL with nA= OX - 17
wBF2: wrote  OX
!!!2:calling wL


in writeLevel with  OX  outatom_counter= 18
len( OX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []
 currently queue= CX - OX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS211:CX, <Atom instance> ligcovalent:A:CYS211:OX)]
 processing queue entry:  CX - OX
in wBF with fromAtom= CX + startAtom= OX startAtom.used= 0
wBF: wrote  OX
self.outatom_counter= 19


writing and calling wL with nA= CX - 19
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 20
len( CX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []
 currently queue=
CX : OX : queue= []
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 21


writing and calling wL with nA= CX - 21
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 22
len( CX ).bonds= 1
skipping b= CX - CX
returning queue= []
newQ= []
 currently queue=
CX : CX : queue= []
wrote flex file ligcovalent_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: ligcovalent_flex.pdbqt
wrote rigid file: ligcovalent_rigid.pdbqt
4---done
setting PYTHONHOME environment
setting PYTHONHOME environment
!unable to use ligand.TORSDOF! torsdof always set to ligand.ndihe= 7
5---done
 concat 10 log files... done.
Job finished, good luck!
rm: 无法删除'chimera.com': 没有那个文件或目录
rm: 无法删除'tmp.mol2': 没有那个文件或目录
Done
Processing residue A:CYS191
[start] output filename is: ligcovalent_single.pdb
CHAIN A
Writing output filename: ligcovalent_single.pdb
1---ligcovalent.pdb prepared...
1.5--done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= fixed  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  fixed
merged  0  nonpolar hydrogens
end of base class init
using std outputfilename  fixed.pdbqt
wrote  fixed  to  fixed.pdbqt
2---done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= ligcovalent  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  ligcovalent
merged  21  nonpolar hydrogens
end of base class init
using std outputfilename  ligcovalent.pdbqt
wrote  ligcovalent  to  ligcovalent.pdbqt
3---done
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> fixed:A:CYS191 with 6 MolKit.molecule.Atom]
calling setAutoFlexFields with  fixed:A:CYS191
in setAutoFlexFields with  fixed:A:CYS191
len(rotatables)= 1
returning res.torscount= 1
res.root= CA
ntors= 1
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= fixed_flex.pdbqt
res_total= 1
in writeResidue with  fixed:A:CYS191
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS191:CA, <Atom instance> fixed:A:CYS191:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS191:CA, <Atom instance> fixed:A:CYS191:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS191:N, <Atom instance> fixed:A:CYS191:CA)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3


writing and calling wL with nA= SG - 3
wBF2: wrote  SG
!!!2:calling wL


in writeLevel with  SG  outatom_counter= 4
len( SG ).bonds= 1
skipping b= CB - SG
returning queue= []
newQ= []
 currently queue=
CA : CB : queue= []
wrote flex file fixed_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: fixed_flex.pdbqt
wrote rigid file: fixed_rigid.pdbqt
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> ligcovalent:A:CYS191 with 28 MolKit.molecule.Atom]
calling setAutoFlexFields with  ligcovalent:A:CYS191
in setAutoFlexFields with  ligcovalent:A:CYS191
len(rotatables)= 8
returning res.torscount= 7
res.root= CA
ntors= 7
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= ligcovalent_flex.pdbqt
res_total= 7
in writeResidue with  ligcovalent:A:CYS191
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS191:CA, <Atom instance> ligcovalent:A:CYS191:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS191:CA, <Atom instance> ligcovalent:A:CYS191:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS191:N, <Atom instance> ligcovalent:A:CYS191:CA)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3
 currently queue= CB - SG ,
CA : CB : queue= [(<Atom instance> ligcovalent:A:CYS191:CB, <Atom instance> ligcovalent:A:CYS191:SG)]
 processing queue entry:  CB - SG
in wBF with fromAtom= CB + startAtom= SG startAtom.used= 0
wBF: wrote  SG
self.outatom_counter= 4
 currently queue= SG - CX ,
CB : SG : queue= [(<Atom instance> ligcovalent:A:CYS191:SG, <Atom instance> ligcovalent:A:CYS191:CX)]
 processing queue entry:  SG - CX
in wBF with fromAtom= SG + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 5
 currently queue= CX - CX ,
SG : CX : queue= [(<Atom instance> ligcovalent:A:CYS191:CX, <Atom instance> ligcovalent:A:CYS191:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 6
 currently queue= CX - CX , CX - CX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS191:CX, <Atom instance> ligcovalent:A:CYS191:CX), (<Atom instance> ligcovalent:A:CYS191:CX, <Atom instance> ligcovalent:A:CYS191:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 7


writing and calling wL with nA= OX - 7
wBF2: wrote  OX
!!!2:calling wL


in writeLevel with  OX  outatom_counter= 8
len( OX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []


writing and calling wL with nA= NX - 8
wBF2: wrote  NX
!!!2:calling wL


in writeLevel with  NX  outatom_counter= 9
len( NX ).bonds= 3
processing b= CX - NX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= NX - CX
processing b= NX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 11
len( CX ).bonds= 3
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - NX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 13
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 14
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 15
len( CX ).bonds= 3
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
processing b= OX - CX  activeTors= 1
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
CX wL: queue= [(<Atom instance> ligcovalent:A:CYS191:CX, <Atom instance> ligcovalent:A:CYS191:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 16
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS191:CX, <Atom instance> ligcovalent:A:CYS191:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS191:CX, <Atom instance> ligcovalent:A:CYS191:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS191:CX, <Atom instance> ligcovalent:A:CYS191:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS191:CX, <Atom instance> ligcovalent:A:CYS191:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS191:CX, <Atom instance> ligcovalent:A:CYS191:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS191:CX, <Atom instance> ligcovalent:A:CYS191:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 16
len( CX ).bonds= 3
skipping b= CX - CX
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 17
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 18
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= []
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS191:CX, <Atom instance> ligcovalent:A:CYS191:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS191:CX, <Atom instance> ligcovalent:A:CYS191:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 18
len( CX ).bonds= 2
skipping b= NX - CX
skipping b= CX - CX
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS191:CX, <Atom instance> ligcovalent:A:CYS191:OX)]
newQ= [(<Atom instance> ligcovalent:A:CYS191:CX, <Atom instance> ligcovalent:A:CYS191:OX)]
@@@@len(newq)= 1
queue= [(<Atom instance> ligcovalent:A:CYS191:CX, <Atom instance> ligcovalent:A:CYS191:OX)]
 currently queue= CX - OX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS191:CX, <Atom instance> ligcovalent:A:CYS191:OX)]
 processing queue entry:  CX - OX
in wBF with fromAtom= CX + startAtom= OX startAtom.used= 0
wBF: wrote  OX
self.outatom_counter= 19


writing and calling wL with nA= CX - 19
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 20
len( CX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []
 currently queue=
CX : OX : queue= []
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 21


writing and calling wL with nA= CX - 21
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 22
len( CX ).bonds= 1
skipping b= CX - CX
returning queue= []
newQ= []
 currently queue=
CX : CX : queue= []
wrote flex file ligcovalent_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: ligcovalent_flex.pdbqt
wrote rigid file: ligcovalent_rigid.pdbqt
4---done
setting PYTHONHOME environment
setting PYTHONHOME environment
!unable to use ligand.TORSDOF! torsdof always set to ligand.ndihe= 7
5---done
 concat 10 log files... done.
Job finished, good luck!
rm: 无法删除'chimera.com': 没有那个文件或目录
rm: 无法删除'tmp.mol2': 没有那个文件或目录
Done
Processing residue A:CYS184
[start] output filename is: ligcovalent_single.pdb
CHAIN A
Writing output filename: ligcovalent_single.pdb
1---ligcovalent.pdb prepared...
1.5--done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= fixed  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  fixed
merged  0  nonpolar hydrogens
end of base class init
using std outputfilename  fixed.pdbqt
wrote  fixed  to  fixed.pdbqt
2---done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= ligcovalent  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  ligcovalent
merged  21  nonpolar hydrogens
end of base class init
using std outputfilename  ligcovalent.pdbqt
wrote  ligcovalent  to  ligcovalent.pdbqt
3---done
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> fixed:A:CYS184 with 6 MolKit.molecule.Atom]
calling setAutoFlexFields with  fixed:A:CYS184
in setAutoFlexFields with  fixed:A:CYS184
len(rotatables)= 1
returning res.torscount= 1
res.root= CA
ntors= 1
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= fixed_flex.pdbqt
res_total= 1
in writeResidue with  fixed:A:CYS184
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS184:N, <Atom instance> fixed:A:CYS184:CA)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS184:CA, <Atom instance> fixed:A:CYS184:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS184:CA, <Atom instance> fixed:A:CYS184:C)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3


writing and calling wL with nA= SG - 3
wBF2: wrote  SG
!!!2:calling wL


in writeLevel with  SG  outatom_counter= 4
len( SG ).bonds= 1
skipping b= CB - SG
returning queue= []
newQ= []
 currently queue=
CA : CB : queue= []
wrote flex file fixed_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: fixed_flex.pdbqt
wrote rigid file: fixed_rigid.pdbqt
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> ligcovalent:A:CYS184 with 28 MolKit.molecule.Atom]
calling setAutoFlexFields with  ligcovalent:A:CYS184
in setAutoFlexFields with  ligcovalent:A:CYS184
len(rotatables)= 8
returning res.torscount= 7
res.root= CA
ntors= 7
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= ligcovalent_flex.pdbqt
res_total= 7
in writeResidue with  ligcovalent:A:CYS184
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS184:CA, <Atom instance> ligcovalent:A:CYS184:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS184:CA, <Atom instance> ligcovalent:A:CYS184:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS184:N, <Atom instance> ligcovalent:A:CYS184:CA)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3
 currently queue= CB - SG ,
CA : CB : queue= [(<Atom instance> ligcovalent:A:CYS184:CB, <Atom instance> ligcovalent:A:CYS184:SG)]
 processing queue entry:  CB - SG
in wBF with fromAtom= CB + startAtom= SG startAtom.used= 0
wBF: wrote  SG
self.outatom_counter= 4
 currently queue= SG - CX ,
CB : SG : queue= [(<Atom instance> ligcovalent:A:CYS184:SG, <Atom instance> ligcovalent:A:CYS184:CX)]
 processing queue entry:  SG - CX
in wBF with fromAtom= SG + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 5
 currently queue= CX - CX ,
SG : CX : queue= [(<Atom instance> ligcovalent:A:CYS184:CX, <Atom instance> ligcovalent:A:CYS184:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 6
 currently queue= CX - CX , CX - CX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS184:CX, <Atom instance> ligcovalent:A:CYS184:CX), (<Atom instance> ligcovalent:A:CYS184:CX, <Atom instance> ligcovalent:A:CYS184:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 7


writing and calling wL with nA= CX - 7
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 8
len( CX ).bonds= 1
skipping b= CX - CX
returning queue= []
newQ= []
 currently queue=
CX : CX : queue= []
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 9


writing and calling wL with nA= NX - 9
wBF2: wrote  NX
!!!2:calling wL


in writeLevel with  NX  outatom_counter= 10
len( NX ).bonds= 3
processing b= NX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= NX - CX
processing b= CX - NX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 12
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= NX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 13
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 14
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 15
len( CX ).bonds= 3
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 16
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 17
len( CX ).bonds= 3
processing b= OX - CX  activeTors= 1
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
CX wL: queue= [(<Atom instance> ligcovalent:A:CYS184:CX, <Atom instance> ligcovalent:A:CYS184:OX)]
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 18
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 19
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS184:CX, <Atom instance> ligcovalent:A:CYS184:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS184:CX, <Atom instance> ligcovalent:A:CYS184:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS184:CX, <Atom instance> ligcovalent:A:CYS184:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS184:CX, <Atom instance> ligcovalent:A:CYS184:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS184:CX, <Atom instance> ligcovalent:A:CYS184:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS184:CX, <Atom instance> ligcovalent:A:CYS184:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS184:CX, <Atom instance> ligcovalent:A:CYS184:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS184:CX, <Atom instance> ligcovalent:A:CYS184:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS184:CX, <Atom instance> ligcovalent:A:CYS184:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS184:CX, <Atom instance> ligcovalent:A:CYS184:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS184:CX, <Atom instance> ligcovalent:A:CYS184:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS184:CX, <Atom instance> ligcovalent:A:CYS184:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 19
len( CX ).bonds= 3
skipping b= CX - CX
skipping b= CX - NX
skipping b= CX - CX
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS184:CX, <Atom instance> ligcovalent:A:CYS184:OX)]
newQ= [(<Atom instance> ligcovalent:A:CYS184:CX, <Atom instance> ligcovalent:A:CYS184:OX)]
@@@@len(newq)= 1
queue= [(<Atom instance> ligcovalent:A:CYS184:CX, <Atom instance> ligcovalent:A:CYS184:OX)]


writing and calling wL with nA= OX - 19
wBF2: wrote  OX
!!!2:calling wL


in writeLevel with  OX  outatom_counter= 20
len( OX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []
 currently queue= CX - OX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS184:CX, <Atom instance> ligcovalent:A:CYS184:OX)]
 processing queue entry:  CX - OX
in wBF with fromAtom= CX + startAtom= OX startAtom.used= 0
wBF: wrote  OX
self.outatom_counter= 21


writing and calling wL with nA= CX - 21
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 22
len( CX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []
 currently queue=
CX : OX : queue= []
wrote flex file ligcovalent_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: ligcovalent_flex.pdbqt
wrote rigid file: ligcovalent_rigid.pdbqt
4---done
setting PYTHONHOME environment
setting PYTHONHOME environment
!unable to use ligand.TORSDOF! torsdof always set to ligand.ndihe= 7
5---done
 concat 10 log files... done.
Job finished, good luck!
rm: 无法删除'chimera.com': 没有那个文件或目录
rm: 无法删除'tmp.mol2': 没有那个文件或目录
Done
Processing residue A:CYS314
[start] output filename is: ligcovalent_single.pdb
CHAIN A
Writing output filename: ligcovalent_single.pdb
1---ligcovalent.pdb prepared...
1.5--done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= fixed  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  fixed
merged  0  nonpolar hydrogens
end of base class init
using std outputfilename  fixed.pdbqt
wrote  fixed  to  fixed.pdbqt
2---done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= ligcovalent  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  ligcovalent
merged  21  nonpolar hydrogens
end of base class init
using std outputfilename  ligcovalent.pdbqt
wrote  ligcovalent  to  ligcovalent.pdbqt
3---done
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> fixed:A:CYS314 with 6 MolKit.molecule.Atom]
calling setAutoFlexFields with  fixed:A:CYS314
in setAutoFlexFields with  fixed:A:CYS314
len(rotatables)= 1
returning res.torscount= 1
res.root= CA
ntors= 1
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= fixed_flex.pdbqt
res_total= 1
in writeResidue with  fixed:A:CYS314
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS314:CA, <Atom instance> fixed:A:CYS314:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS314:CA, <Atom instance> fixed:A:CYS314:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS314:N, <Atom instance> fixed:A:CYS314:CA)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3


writing and calling wL with nA= SG - 3
wBF2: wrote  SG
!!!2:calling wL


in writeLevel with  SG  outatom_counter= 4
len( SG ).bonds= 1
skipping b= CB - SG
returning queue= []
newQ= []
 currently queue=
CA : CB : queue= []
wrote flex file fixed_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: fixed_flex.pdbqt
wrote rigid file: fixed_rigid.pdbqt
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> ligcovalent:A:CYS314 with 28 MolKit.molecule.Atom]
calling setAutoFlexFields with  ligcovalent:A:CYS314
in setAutoFlexFields with  ligcovalent:A:CYS314
len(rotatables)= 8
returning res.torscount= 7
res.root= CA
ntors= 7
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= ligcovalent_flex.pdbqt
res_total= 7
in writeResidue with  ligcovalent:A:CYS314
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS314:N, <Atom instance> ligcovalent:A:CYS314:CA)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS314:CA, <Atom instance> ligcovalent:A:CYS314:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS314:CA, <Atom instance> ligcovalent:A:CYS314:CB)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3
 currently queue= CB - SG ,
CA : CB : queue= [(<Atom instance> ligcovalent:A:CYS314:CB, <Atom instance> ligcovalent:A:CYS314:SG)]
 processing queue entry:  CB - SG
in wBF with fromAtom= CB + startAtom= SG startAtom.used= 0
wBF: wrote  SG
self.outatom_counter= 4
 currently queue= SG - CX ,
CB : SG : queue= [(<Atom instance> ligcovalent:A:CYS314:SG, <Atom instance> ligcovalent:A:CYS314:CX)]
 processing queue entry:  SG - CX
in wBF with fromAtom= SG + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 5
 currently queue= CX - CX ,
SG : CX : queue= [(<Atom instance> ligcovalent:A:CYS314:CX, <Atom instance> ligcovalent:A:CYS314:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 6
 currently queue= CX - CX , CX - CX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS314:CX, <Atom instance> ligcovalent:A:CYS314:CX), (<Atom instance> ligcovalent:A:CYS314:CX, <Atom instance> ligcovalent:A:CYS314:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 7


writing and calling wL with nA= OX - 7
wBF2: wrote  OX
!!!2:calling wL


in writeLevel with  OX  outatom_counter= 8
len( OX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []


writing and calling wL with nA= NX - 8
wBF2: wrote  NX
!!!2:calling wL


in writeLevel with  NX  outatom_counter= 9
len( NX ).bonds= 3
processing b= CX - NX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= NX - CX
processing b= NX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 11
len( CX ).bonds= 3
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - NX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 13
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 14
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 15
len( CX ).bonds= 3
processing b= OX - CX  activeTors= 1
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
CX wL: queue= [(<Atom instance> ligcovalent:A:CYS314:CX, <Atom instance> ligcovalent:A:CYS314:OX)]
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 16
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS314:CX, <Atom instance> ligcovalent:A:CYS314:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS314:CX, <Atom instance> ligcovalent:A:CYS314:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS314:CX, <Atom instance> ligcovalent:A:CYS314:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS314:CX, <Atom instance> ligcovalent:A:CYS314:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS314:CX, <Atom instance> ligcovalent:A:CYS314:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS314:CX, <Atom instance> ligcovalent:A:CYS314:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 16
len( CX ).bonds= 3
skipping b= CX - CX
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 17
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 18
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= []
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS314:CX, <Atom instance> ligcovalent:A:CYS314:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS314:CX, <Atom instance> ligcovalent:A:CYS314:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 18
len( CX ).bonds= 2
skipping b= NX - CX
skipping b= CX - CX
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS314:CX, <Atom instance> ligcovalent:A:CYS314:OX)]
newQ= [(<Atom instance> ligcovalent:A:CYS314:CX, <Atom instance> ligcovalent:A:CYS314:OX)]
@@@@len(newq)= 1
queue= [(<Atom instance> ligcovalent:A:CYS314:CX, <Atom instance> ligcovalent:A:CYS314:OX)]
 currently queue= CX - OX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS314:CX, <Atom instance> ligcovalent:A:CYS314:OX)]
 processing queue entry:  CX - OX
in wBF with fromAtom= CX + startAtom= OX startAtom.used= 0
wBF: wrote  OX
self.outatom_counter= 19


writing and calling wL with nA= CX - 19
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 20
len( CX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []
 currently queue=
CX : OX : queue= []
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 21


writing and calling wL with nA= CX - 21
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 22
len( CX ).bonds= 1
skipping b= CX - CX
returning queue= []
newQ= []
 currently queue=
CX : CX : queue= []
wrote flex file ligcovalent_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: ligcovalent_flex.pdbqt
wrote rigid file: ligcovalent_rigid.pdbqt
4---done
setting PYTHONHOME environment
setting PYTHONHOME environment
!unable to use ligand.TORSDOF! torsdof always set to ligand.ndihe= 7
5---done
 concat 10 log files... done.
Job finished, good luck!
rm: 无法删除'chimera.com': 没有那个文件或目录
rm: 无法删除'tmp.mol2': 没有那个文件或目录
Done
Processing residue A:CYS380
[start] output filename is: ligcovalent_single.pdb
CHAIN A
Writing output filename: ligcovalent_single.pdb
1---ligcovalent.pdb prepared...
1.5--done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= fixed  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  fixed
merged  0  nonpolar hydrogens
end of base class init
using std outputfilename  fixed.pdbqt
wrote  fixed  to  fixed.pdbqt
2---done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= ligcovalent  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  ligcovalent
merged  21  nonpolar hydrogens
end of base class init
using std outputfilename  ligcovalent.pdbqt
wrote  ligcovalent  to  ligcovalent.pdbqt
3---done
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> fixed:A:CYS380 with 6 MolKit.molecule.Atom]
calling setAutoFlexFields with  fixed:A:CYS380
in setAutoFlexFields with  fixed:A:CYS380
len(rotatables)= 1
returning res.torscount= 1
res.root= CA
ntors= 1
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= fixed_flex.pdbqt
res_total= 1
in writeResidue with  fixed:A:CYS380
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS380:CA, <Atom instance> fixed:A:CYS380:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS380:CA, <Atom instance> fixed:A:CYS380:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS380:N, <Atom instance> fixed:A:CYS380:CA)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3


writing and calling wL with nA= SG - 3
wBF2: wrote  SG
!!!2:calling wL


in writeLevel with  SG  outatom_counter= 4
len( SG ).bonds= 1
skipping b= CB - SG
returning queue= []
newQ= []
 currently queue=
CA : CB : queue= []
wrote flex file fixed_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: fixed_flex.pdbqt
wrote rigid file: fixed_rigid.pdbqt
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> ligcovalent:A:CYS380 with 28 MolKit.molecule.Atom]
calling setAutoFlexFields with  ligcovalent:A:CYS380
in setAutoFlexFields with  ligcovalent:A:CYS380
len(rotatables)= 8
returning res.torscount= 7
res.root= CA
ntors= 7
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= ligcovalent_flex.pdbqt
res_total= 7
in writeResidue with  ligcovalent:A:CYS380
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS380:CA, <Atom instance> ligcovalent:A:CYS380:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS380:CA, <Atom instance> ligcovalent:A:CYS380:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS380:N, <Atom instance> ligcovalent:A:CYS380:CA)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3
 currently queue= CB - SG ,
CA : CB : queue= [(<Atom instance> ligcovalent:A:CYS380:CB, <Atom instance> ligcovalent:A:CYS380:SG)]
 processing queue entry:  CB - SG
in wBF with fromAtom= CB + startAtom= SG startAtom.used= 0
wBF: wrote  SG
self.outatom_counter= 4
 currently queue= SG - CX ,
CB : SG : queue= [(<Atom instance> ligcovalent:A:CYS380:SG, <Atom instance> ligcovalent:A:CYS380:CX)]
 processing queue entry:  SG - CX
in wBF with fromAtom= SG + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 5
 currently queue= CX - CX ,
SG : CX : queue= [(<Atom instance> ligcovalent:A:CYS380:CX, <Atom instance> ligcovalent:A:CYS380:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 6
 currently queue= CX - CX , CX - CX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS380:CX, <Atom instance> ligcovalent:A:CYS380:CX), (<Atom instance> ligcovalent:A:CYS380:CX, <Atom instance> ligcovalent:A:CYS380:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 7


writing and calling wL with nA= CX - 7
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 8
len( CX ).bonds= 1
skipping b= CX - CX
returning queue= []
newQ= []
 currently queue=
CX : CX : queue= []
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 9


writing and calling wL with nA= NX - 9
wBF2: wrote  NX
!!!2:calling wL


in writeLevel with  NX  outatom_counter= 10
len( NX ).bonds= 3
processing b= NX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= NX - CX
processing b= CX - NX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 12
len( CX ).bonds= 2
skipping b= NX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 13
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 14
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 15
len( CX ).bonds= 3
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 16
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 17
len( CX ).bonds= 3
processing b= OX - CX  activeTors= 1
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
CX wL: queue= [(<Atom instance> ligcovalent:A:CYS380:CX, <Atom instance> ligcovalent:A:CYS380:OX)]
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 18
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 19
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS380:CX, <Atom instance> ligcovalent:A:CYS380:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS380:CX, <Atom instance> ligcovalent:A:CYS380:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS380:CX, <Atom instance> ligcovalent:A:CYS380:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS380:CX, <Atom instance> ligcovalent:A:CYS380:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS380:CX, <Atom instance> ligcovalent:A:CYS380:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS380:CX, <Atom instance> ligcovalent:A:CYS380:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS380:CX, <Atom instance> ligcovalent:A:CYS380:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS380:CX, <Atom instance> ligcovalent:A:CYS380:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS380:CX, <Atom instance> ligcovalent:A:CYS380:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS380:CX, <Atom instance> ligcovalent:A:CYS380:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS380:CX, <Atom instance> ligcovalent:A:CYS380:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS380:CX, <Atom instance> ligcovalent:A:CYS380:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 19
len( CX ).bonds= 3
skipping b= CX - CX
skipping b= CX - NX
skipping b= CX - CX
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS380:CX, <Atom instance> ligcovalent:A:CYS380:OX)]
newQ= [(<Atom instance> ligcovalent:A:CYS380:CX, <Atom instance> ligcovalent:A:CYS380:OX)]
@@@@len(newq)= 1
queue= [(<Atom instance> ligcovalent:A:CYS380:CX, <Atom instance> ligcovalent:A:CYS380:OX)]


writing and calling wL with nA= OX - 19
wBF2: wrote  OX
!!!2:calling wL


in writeLevel with  OX  outatom_counter= 20
len( OX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []
 currently queue= CX - OX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS380:CX, <Atom instance> ligcovalent:A:CYS380:OX)]
 processing queue entry:  CX - OX
in wBF with fromAtom= CX + startAtom= OX startAtom.used= 0
wBF: wrote  OX
self.outatom_counter= 21


writing and calling wL with nA= CX - 21
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 22
len( CX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []
 currently queue=
CX : OX : queue= []
wrote flex file ligcovalent_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: ligcovalent_flex.pdbqt
wrote rigid file: ligcovalent_rigid.pdbqt
4---done
setting PYTHONHOME environment
setting PYTHONHOME environment
!unable to use ligand.TORSDOF! torsdof always set to ligand.ndihe= 7
5---done
 concat 10 log files... done.
Job finished, good luck!
rm: 无法删除'chimera.com': 没有那个文件或目录
rm: 无法删除'tmp.mol2': 没有那个文件或目录
Done
Processing residue A:CYS85
[start] output filename is: ligcovalent_single.pdb
CHAIN A
Writing output filename: ligcovalent_single.pdb
1---ligcovalent.pdb prepared...
1.5--done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= fixed  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  fixed
merged  0  nonpolar hydrogens
end of base class init
using std outputfilename  fixed.pdbqt
wrote  fixed  to  fixed.pdbqt
2---done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= ligcovalent  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  ligcovalent
merged  21  nonpolar hydrogens
end of base class init
using std outputfilename  ligcovalent.pdbqt
wrote  ligcovalent  to  ligcovalent.pdbqt
3---done
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> fixed:A:CYS85 with 6 MolKit.molecule.Atom]
calling setAutoFlexFields with  fixed:A:CYS85
in setAutoFlexFields with  fixed:A:CYS85
len(rotatables)= 1
returning res.torscount= 1
res.root= CA
ntors= 1
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= fixed_flex.pdbqt
res_total= 1
in writeResidue with  fixed:A:CYS85
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS85:N, <Atom instance> fixed:A:CYS85:CA)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS85:CA, <Atom instance> fixed:A:CYS85:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS85:CA, <Atom instance> fixed:A:CYS85:C)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3


writing and calling wL with nA= SG - 3
wBF2: wrote  SG
!!!2:calling wL


in writeLevel with  SG  outatom_counter= 4
len( SG ).bonds= 1
skipping b= CB - SG
returning queue= []
newQ= []
 currently queue=
CA : CB : queue= []
wrote flex file fixed_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: fixed_flex.pdbqt
wrote rigid file: fixed_rigid.pdbqt
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> ligcovalent:A:CYS85 with 28 MolKit.molecule.Atom]
calling setAutoFlexFields with  ligcovalent:A:CYS85
in setAutoFlexFields with  ligcovalent:A:CYS85
len(rotatables)= 8
returning res.torscount= 7
res.root= CA
ntors= 7
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= ligcovalent_flex.pdbqt
res_total= 7
in writeResidue with  ligcovalent:A:CYS85
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS85:N, <Atom instance> ligcovalent:A:CYS85:CA)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS85:CA, <Atom instance> ligcovalent:A:CYS85:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS85:CA, <Atom instance> ligcovalent:A:CYS85:CB)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3
 currently queue= CB - SG ,
CA : CB : queue= [(<Atom instance> ligcovalent:A:CYS85:CB, <Atom instance> ligcovalent:A:CYS85:SG)]
 processing queue entry:  CB - SG
in wBF with fromAtom= CB + startAtom= SG startAtom.used= 0
wBF: wrote  SG
self.outatom_counter= 4
 currently queue= SG - CX ,
CB : SG : queue= [(<Atom instance> ligcovalent:A:CYS85:SG, <Atom instance> ligcovalent:A:CYS85:CX)]
 processing queue entry:  SG - CX
in wBF with fromAtom= SG + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 5
 currently queue= CX - CX ,
SG : CX : queue= [(<Atom instance> ligcovalent:A:CYS85:CX, <Atom instance> ligcovalent:A:CYS85:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 6
 currently queue= CX - CX , CX - CX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS85:CX, <Atom instance> ligcovalent:A:CYS85:CX), (<Atom instance> ligcovalent:A:CYS85:CX, <Atom instance> ligcovalent:A:CYS85:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 7


writing and calling wL with nA= NX - 7
wBF2: wrote  NX
!!!2:calling wL


in writeLevel with  NX  outatom_counter= 8
len( NX ).bonds= 3
skipping b= NX - CX
processing b= NX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
processing b= CX - NX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 10
len( CX ).bonds= 2
skipping b= NX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 11
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 12
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 13
len( CX ).bonds= 3
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 14
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 15
len( CX ).bonds= 3
processing b= OX - CX  activeTors= 1
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
CX wL: queue= [(<Atom instance> ligcovalent:A:CYS85:CX, <Atom instance> ligcovalent:A:CYS85:OX)]
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 16
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 17
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS85:CX, <Atom instance> ligcovalent:A:CYS85:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS85:CX, <Atom instance> ligcovalent:A:CYS85:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS85:CX, <Atom instance> ligcovalent:A:CYS85:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS85:CX, <Atom instance> ligcovalent:A:CYS85:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS85:CX, <Atom instance> ligcovalent:A:CYS85:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS85:CX, <Atom instance> ligcovalent:A:CYS85:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS85:CX, <Atom instance> ligcovalent:A:CYS85:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS85:CX, <Atom instance> ligcovalent:A:CYS85:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS85:CX, <Atom instance> ligcovalent:A:CYS85:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS85:CX, <Atom instance> ligcovalent:A:CYS85:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS85:CX, <Atom instance> ligcovalent:A:CYS85:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS85:CX, <Atom instance> ligcovalent:A:CYS85:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 17
len( CX ).bonds= 3
skipping b= CX - CX
skipping b= CX - NX
skipping b= CX - CX
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS85:CX, <Atom instance> ligcovalent:A:CYS85:OX)]
newQ= [(<Atom instance> ligcovalent:A:CYS85:CX, <Atom instance> ligcovalent:A:CYS85:OX)]
@@@@len(newq)= 1
queue= [(<Atom instance> ligcovalent:A:CYS85:CX, <Atom instance> ligcovalent:A:CYS85:OX)]


writing and calling wL with nA= OX - 17
wBF2: wrote  OX
!!!2:calling wL


in writeLevel with  OX  outatom_counter= 18
len( OX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []
 currently queue= CX - OX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS85:CX, <Atom instance> ligcovalent:A:CYS85:OX)]
 processing queue entry:  CX - OX
in wBF with fromAtom= CX + startAtom= OX startAtom.used= 0
wBF: wrote  OX
self.outatom_counter= 19


writing and calling wL with nA= CX - 19
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 20
len( CX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []
 currently queue=
CX : OX : queue= []
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 21


writing and calling wL with nA= CX - 21
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 22
len( CX ).bonds= 1
skipping b= CX - CX
returning queue= []
newQ= []
 currently queue=
CX : CX : queue= []
wrote flex file ligcovalent_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: ligcovalent_flex.pdbqt
wrote rigid file: ligcovalent_rigid.pdbqt
4---done
setting PYTHONHOME environment
setting PYTHONHOME environment
!unable to use ligand.TORSDOF! torsdof always set to ligand.ndihe= 7
5---done
 concat 10 log files... done.
Job finished, good luck!
rm: 无法删除'chimera.com': 没有那个文件或目录
rm: 无法删除'tmp.mol2': 没有那个文件或目录
Done
Processing residue A:CYS144
[start] output filename is: ligcovalent_single.pdb
CHAIN A
Writing output filename: ligcovalent_single.pdb
1---ligcovalent.pdb prepared...
1.5--done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= fixed  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  fixed
merged  0  nonpolar hydrogens
end of base class init
using std outputfilename  fixed.pdbqt
wrote  fixed  to  fixed.pdbqt
2---done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= ligcovalent  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  ligcovalent
merged  21  nonpolar hydrogens
end of base class init
using std outputfilename  ligcovalent.pdbqt
wrote  ligcovalent  to  ligcovalent.pdbqt
3---done
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> fixed:A:CYS144 with 6 MolKit.molecule.Atom]
calling setAutoFlexFields with  fixed:A:CYS144
in setAutoFlexFields with  fixed:A:CYS144
len(rotatables)= 1
returning res.torscount= 1
res.root= CA
ntors= 1
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= fixed_flex.pdbqt
res_total= 1
in writeResidue with  fixed:A:CYS144
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS144:N, <Atom instance> fixed:A:CYS144:CA)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS144:CA, <Atom instance> fixed:A:CYS144:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS144:CA, <Atom instance> fixed:A:CYS144:C)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3


writing and calling wL with nA= SG - 3
wBF2: wrote  SG
!!!2:calling wL


in writeLevel with  SG  outatom_counter= 4
len( SG ).bonds= 1
skipping b= CB - SG
returning queue= []
newQ= []
 currently queue=
CA : CB : queue= []
wrote flex file fixed_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: fixed_flex.pdbqt
wrote rigid file: fixed_rigid.pdbqt
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> ligcovalent:A:CYS144 with 28 MolKit.molecule.Atom]
calling setAutoFlexFields with  ligcovalent:A:CYS144
in setAutoFlexFields with  ligcovalent:A:CYS144
len(rotatables)= 8
returning res.torscount= 7
res.root= CA
ntors= 7
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= ligcovalent_flex.pdbqt
res_total= 7
in writeResidue with  ligcovalent:A:CYS144
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS144:CA, <Atom instance> ligcovalent:A:CYS144:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS144:CA, <Atom instance> ligcovalent:A:CYS144:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS144:N, <Atom instance> ligcovalent:A:CYS144:CA)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3
 currently queue= CB - SG ,
CA : CB : queue= [(<Atom instance> ligcovalent:A:CYS144:CB, <Atom instance> ligcovalent:A:CYS144:SG)]
 processing queue entry:  CB - SG
in wBF with fromAtom= CB + startAtom= SG startAtom.used= 0
wBF: wrote  SG
self.outatom_counter= 4
 currently queue= SG - CX ,
CB : SG : queue= [(<Atom instance> ligcovalent:A:CYS144:SG, <Atom instance> ligcovalent:A:CYS144:CX)]
 processing queue entry:  SG - CX
in wBF with fromAtom= SG + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 5
 currently queue= CX - CX ,
SG : CX : queue= [(<Atom instance> ligcovalent:A:CYS144:CX, <Atom instance> ligcovalent:A:CYS144:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 6
 currently queue= CX - CX , CX - CX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS144:CX, <Atom instance> ligcovalent:A:CYS144:CX), (<Atom instance> ligcovalent:A:CYS144:CX, <Atom instance> ligcovalent:A:CYS144:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 7


writing and calling wL with nA= CX - 7
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 8
len( CX ).bonds= 1
skipping b= CX - CX
returning queue= []
newQ= []
 currently queue=
CX : CX : queue= []
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 9


writing and calling wL with nA= OX - 9
wBF2: wrote  OX
!!!2:calling wL


in writeLevel with  OX  outatom_counter= 10
len( OX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []


writing and calling wL with nA= NX - 10
wBF2: wrote  NX
!!!2:calling wL


in writeLevel with  NX  outatom_counter= 11
len( NX ).bonds= 3
processing b= CX - NX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= NX - CX
processing b= NX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 13
len( CX ).bonds= 3
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - NX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 15
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 16
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 17
len( CX ).bonds= 3
processing b= OX - CX  activeTors= 1
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
CX wL: queue= [(<Atom instance> ligcovalent:A:CYS144:CX, <Atom instance> ligcovalent:A:CYS144:OX)]
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 18
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS144:CX, <Atom instance> ligcovalent:A:CYS144:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS144:CX, <Atom instance> ligcovalent:A:CYS144:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS144:CX, <Atom instance> ligcovalent:A:CYS144:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS144:CX, <Atom instance> ligcovalent:A:CYS144:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS144:CX, <Atom instance> ligcovalent:A:CYS144:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS144:CX, <Atom instance> ligcovalent:A:CYS144:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 18
len( CX ).bonds= 3
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 19
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 20
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= []
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS144:CX, <Atom instance> ligcovalent:A:CYS144:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS144:CX, <Atom instance> ligcovalent:A:CYS144:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 20
len( CX ).bonds= 2
skipping b= NX - CX
skipping b= CX - CX
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS144:CX, <Atom instance> ligcovalent:A:CYS144:OX)]
newQ= [(<Atom instance> ligcovalent:A:CYS144:CX, <Atom instance> ligcovalent:A:CYS144:OX)]
@@@@len(newq)= 1
queue= [(<Atom instance> ligcovalent:A:CYS144:CX, <Atom instance> ligcovalent:A:CYS144:OX)]
 currently queue= CX - OX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS144:CX, <Atom instance> ligcovalent:A:CYS144:OX)]
 processing queue entry:  CX - OX
in wBF with fromAtom= CX + startAtom= OX startAtom.used= 0
wBF: wrote  OX
self.outatom_counter= 21


writing and calling wL with nA= CX - 21
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 22
len( CX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []
 currently queue=
CX : OX : queue= []
wrote flex file ligcovalent_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: ligcovalent_flex.pdbqt
wrote rigid file: ligcovalent_rigid.pdbqt
4---done
setting PYTHONHOME environment
setting PYTHONHOME environment
!unable to use ligand.TORSDOF! torsdof always set to ligand.ndihe= 7
5---done
 concat 10 log files... done.
Job finished, good luck!
rm: 无法删除'chimera.com': 没有那个文件或目录
rm: 无法删除'tmp.mol2': 没有那个文件或目录
Done
Processing residue A:CYS87
[start] output filename is: ligcovalent_single.pdb
CHAIN A
Writing output filename: ligcovalent_single.pdb
1---ligcovalent.pdb prepared...
1.5--done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= fixed  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  fixed
merged  0  nonpolar hydrogens
end of base class init
using std outputfilename  fixed.pdbqt
wrote  fixed  to  fixed.pdbqt
2---done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= ligcovalent  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  ligcovalent
merged  21  nonpolar hydrogens
end of base class init
using std outputfilename  ligcovalent.pdbqt
wrote  ligcovalent  to  ligcovalent.pdbqt
3---done
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> fixed:A:CYS87 with 6 MolKit.molecule.Atom]
calling setAutoFlexFields with  fixed:A:CYS87
in setAutoFlexFields with  fixed:A:CYS87
len(rotatables)= 1
returning res.torscount= 1
res.root= CA
ntors= 1
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= fixed_flex.pdbqt
res_total= 1
in writeResidue with  fixed:A:CYS87
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS87:CA, <Atom instance> fixed:A:CYS87:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS87:CA, <Atom instance> fixed:A:CYS87:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS87:N, <Atom instance> fixed:A:CYS87:CA)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3


writing and calling wL with nA= SG - 3
wBF2: wrote  SG
!!!2:calling wL


in writeLevel with  SG  outatom_counter= 4
len( SG ).bonds= 1
skipping b= CB - SG
returning queue= []
newQ= []
 currently queue=
CA : CB : queue= []
wrote flex file fixed_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: fixed_flex.pdbqt
wrote rigid file: fixed_rigid.pdbqt
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> ligcovalent:A:CYS87 with 28 MolKit.molecule.Atom]
calling setAutoFlexFields with  ligcovalent:A:CYS87
in setAutoFlexFields with  ligcovalent:A:CYS87
len(rotatables)= 8
returning res.torscount= 7
res.root= CA
ntors= 7
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= ligcovalent_flex.pdbqt
res_total= 7
in writeResidue with  ligcovalent:A:CYS87
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS87:N, <Atom instance> ligcovalent:A:CYS87:CA)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS87:CA, <Atom instance> ligcovalent:A:CYS87:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS87:CA, <Atom instance> ligcovalent:A:CYS87:C)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3
 currently queue= CB - SG ,
CA : CB : queue= [(<Atom instance> ligcovalent:A:CYS87:CB, <Atom instance> ligcovalent:A:CYS87:SG)]
 processing queue entry:  CB - SG
in wBF with fromAtom= CB + startAtom= SG startAtom.used= 0
wBF: wrote  SG
self.outatom_counter= 4
 currently queue= SG - CX ,
CB : SG : queue= [(<Atom instance> ligcovalent:A:CYS87:SG, <Atom instance> ligcovalent:A:CYS87:CX)]
 processing queue entry:  SG - CX
in wBF with fromAtom= SG + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 5
 currently queue= CX - CX ,
SG : CX : queue= [(<Atom instance> ligcovalent:A:CYS87:CX, <Atom instance> ligcovalent:A:CYS87:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 6
 currently queue= CX - CX , CX - CX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS87:CX, <Atom instance> ligcovalent:A:CYS87:CX), (<Atom instance> ligcovalent:A:CYS87:CX, <Atom instance> ligcovalent:A:CYS87:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 7


writing and calling wL with nA= OX - 7
wBF2: wrote  OX
!!!2:calling wL


in writeLevel with  OX  outatom_counter= 8
len( OX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []


writing and calling wL with nA= NX - 8
wBF2: wrote  NX
!!!2:calling wL


in writeLevel with  NX  outatom_counter= 9
len( NX ).bonds= 3
skipping b= NX - CX
processing b= NX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
processing b= CX - NX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 11
len( CX ).bonds= 2
skipping b= NX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 12
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 13
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 14
len( CX ).bonds= 3
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 15
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 16
len( CX ).bonds= 3
processing b= OX - CX  activeTors= 1
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
CX wL: queue= [(<Atom instance> ligcovalent:A:CYS87:CX, <Atom instance> ligcovalent:A:CYS87:OX)]
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 17
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 18
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS87:CX, <Atom instance> ligcovalent:A:CYS87:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS87:CX, <Atom instance> ligcovalent:A:CYS87:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS87:CX, <Atom instance> ligcovalent:A:CYS87:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS87:CX, <Atom instance> ligcovalent:A:CYS87:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS87:CX, <Atom instance> ligcovalent:A:CYS87:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS87:CX, <Atom instance> ligcovalent:A:CYS87:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS87:CX, <Atom instance> ligcovalent:A:CYS87:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS87:CX, <Atom instance> ligcovalent:A:CYS87:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS87:CX, <Atom instance> ligcovalent:A:CYS87:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS87:CX, <Atom instance> ligcovalent:A:CYS87:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS87:CX, <Atom instance> ligcovalent:A:CYS87:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS87:CX, <Atom instance> ligcovalent:A:CYS87:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 18
len( CX ).bonds= 3
skipping b= CX - CX
skipping b= CX - NX
skipping b= CX - CX
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS87:CX, <Atom instance> ligcovalent:A:CYS87:OX)]
newQ= [(<Atom instance> ligcovalent:A:CYS87:CX, <Atom instance> ligcovalent:A:CYS87:OX)]
@@@@len(newq)= 1
queue= [(<Atom instance> ligcovalent:A:CYS87:CX, <Atom instance> ligcovalent:A:CYS87:OX)]
 currently queue= CX - OX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS87:CX, <Atom instance> ligcovalent:A:CYS87:OX)]
 processing queue entry:  CX - OX
in wBF with fromAtom= CX + startAtom= OX startAtom.used= 0
wBF: wrote  OX
self.outatom_counter= 19


writing and calling wL with nA= CX - 19
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 20
len( CX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []
 currently queue=
CX : OX : queue= []
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 21


writing and calling wL with nA= CX - 21
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 22
len( CX ).bonds= 1
skipping b= CX - CX
returning queue= []
newQ= []
 currently queue=
CX : CX : queue= []
wrote flex file ligcovalent_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: ligcovalent_flex.pdbqt
wrote rigid file: ligcovalent_rigid.pdbqt
4---done
setting PYTHONHOME environment
setting PYTHONHOME environment
!unable to use ligand.TORSDOF! torsdof always set to ligand.ndihe= 7
5---done
 concat 10 log files... done.
Job finished, good luck!
rm: 无法删除'chimera.com': 没有那个文件或目录
rm: 无法删除'tmp.mol2': 没有那个文件或目录
Done
Processing residue A:CYS172
[start] output filename is: ligcovalent_single.pdb
CHAIN A
Writing output filename: ligcovalent_single.pdb
1---ligcovalent.pdb prepared...
1.5--done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= fixed  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  fixed
merged  0  nonpolar hydrogens
end of base class init
using std outputfilename  fixed.pdbqt
wrote  fixed  to  fixed.pdbqt
2---done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= ligcovalent  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  ligcovalent
merged  21  nonpolar hydrogens
end of base class init
using std outputfilename  ligcovalent.pdbqt
wrote  ligcovalent  to  ligcovalent.pdbqt
3---done
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> fixed:A:CYS172 with 6 MolKit.molecule.Atom]
calling setAutoFlexFields with  fixed:A:CYS172
in setAutoFlexFields with  fixed:A:CYS172
len(rotatables)= 1
returning res.torscount= 1
res.root= CA
ntors= 1
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= fixed_flex.pdbqt
res_total= 1
in writeResidue with  fixed:A:CYS172
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS172:CA, <Atom instance> fixed:A:CYS172:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS172:CA, <Atom instance> fixed:A:CYS172:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS172:N, <Atom instance> fixed:A:CYS172:CA)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3


writing and calling wL with nA= SG - 3
wBF2: wrote  SG
!!!2:calling wL


in writeLevel with  SG  outatom_counter= 4
len( SG ).bonds= 1
skipping b= CB - SG
returning queue= []
newQ= []
 currently queue=
CA : CB : queue= []
wrote flex file fixed_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: fixed_flex.pdbqt
wrote rigid file: fixed_rigid.pdbqt
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> ligcovalent:A:CYS172 with 28 MolKit.molecule.Atom]
calling setAutoFlexFields with  ligcovalent:A:CYS172
in setAutoFlexFields with  ligcovalent:A:CYS172
len(rotatables)= 8
returning res.torscount= 7
res.root= CA
ntors= 7
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= ligcovalent_flex.pdbqt
res_total= 7
in writeResidue with  ligcovalent:A:CYS172
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS172:N, <Atom instance> ligcovalent:A:CYS172:CA)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS172:CA, <Atom instance> ligcovalent:A:CYS172:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS172:CA, <Atom instance> ligcovalent:A:CYS172:CB)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3
 currently queue= CB - SG ,
CA : CB : queue= [(<Atom instance> ligcovalent:A:CYS172:CB, <Atom instance> ligcovalent:A:CYS172:SG)]
 processing queue entry:  CB - SG
in wBF with fromAtom= CB + startAtom= SG startAtom.used= 0
wBF: wrote  SG
self.outatom_counter= 4
 currently queue= SG - CX ,
CB : SG : queue= [(<Atom instance> ligcovalent:A:CYS172:SG, <Atom instance> ligcovalent:A:CYS172:CX)]
 processing queue entry:  SG - CX
in wBF with fromAtom= SG + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 5
 currently queue= CX - CX ,
SG : CX : queue= [(<Atom instance> ligcovalent:A:CYS172:CX, <Atom instance> ligcovalent:A:CYS172:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 6
 currently queue= CX - CX , CX - CX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS172:CX, <Atom instance> ligcovalent:A:CYS172:CX), (<Atom instance> ligcovalent:A:CYS172:CX, <Atom instance> ligcovalent:A:CYS172:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 7


writing and calling wL with nA= OX - 7
wBF2: wrote  OX
!!!2:calling wL


in writeLevel with  OX  outatom_counter= 8
len( OX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []


writing and calling wL with nA= NX - 8
wBF2: wrote  NX
!!!2:calling wL


in writeLevel with  NX  outatom_counter= 9
len( NX ).bonds= 3
processing b= NX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= NX - CX
processing b= CX - NX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 11
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= NX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 12
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 13
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 14
len( CX ).bonds= 3
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 15
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 16
len( CX ).bonds= 3
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
processing b= OX - CX  activeTors= 1
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
CX wL: queue= [(<Atom instance> ligcovalent:A:CYS172:CX, <Atom instance> ligcovalent:A:CYS172:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 17
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 18
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS172:CX, <Atom instance> ligcovalent:A:CYS172:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS172:CX, <Atom instance> ligcovalent:A:CYS172:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS172:CX, <Atom instance> ligcovalent:A:CYS172:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS172:CX, <Atom instance> ligcovalent:A:CYS172:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS172:CX, <Atom instance> ligcovalent:A:CYS172:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS172:CX, <Atom instance> ligcovalent:A:CYS172:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS172:CX, <Atom instance> ligcovalent:A:CYS172:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS172:CX, <Atom instance> ligcovalent:A:CYS172:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS172:CX, <Atom instance> ligcovalent:A:CYS172:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS172:CX, <Atom instance> ligcovalent:A:CYS172:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS172:CX, <Atom instance> ligcovalent:A:CYS172:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS172:CX, <Atom instance> ligcovalent:A:CYS172:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 18
len( CX ).bonds= 3
skipping b= CX - CX
skipping b= CX - NX
skipping b= CX - CX
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS172:CX, <Atom instance> ligcovalent:A:CYS172:OX)]
newQ= [(<Atom instance> ligcovalent:A:CYS172:CX, <Atom instance> ligcovalent:A:CYS172:OX)]
@@@@len(newq)= 1
queue= [(<Atom instance> ligcovalent:A:CYS172:CX, <Atom instance> ligcovalent:A:CYS172:OX)]
 currently queue= CX - OX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS172:CX, <Atom instance> ligcovalent:A:CYS172:OX)]
 processing queue entry:  CX - OX
in wBF with fromAtom= CX + startAtom= OX startAtom.used= 0
wBF: wrote  OX
self.outatom_counter= 19


writing and calling wL with nA= CX - 19
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 20
len( CX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []
 currently queue=
CX : OX : queue= []
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 21


writing and calling wL with nA= CX - 21
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 22
len( CX ).bonds= 1
skipping b= CX - CX
returning queue= []
newQ= []
 currently queue=
CX : CX : queue= []
wrote flex file ligcovalent_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: ligcovalent_flex.pdbqt
wrote rigid file: ligcovalent_rigid.pdbqt
4---done
setting PYTHONHOME environment
setting PYTHONHOME environment
!unable to use ligand.TORSDOF! torsdof always set to ligand.ndihe= 7
5---done
 concat 10 log files... done.
Job finished, good luck!
rm: 无法删除'chimera.com': 没有那个文件或目录
rm: 无法删除'tmp.mol2': 没有那个文件或目录
Done
Processing residue A:CYS874
[start] output filename is: ligcovalent_single.pdb
CHAIN A
Writing output filename: ligcovalent_single.pdb
1---ligcovalent.pdb prepared...
1.5--done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= fixed  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  fixed
merged  0  nonpolar hydrogens
end of base class init
using std outputfilename  fixed.pdbqt
wrote  fixed  to  fixed.pdbqt
2---done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= ligcovalent  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  ligcovalent
merged  21  nonpolar hydrogens
end of base class init
using std outputfilename  ligcovalent.pdbqt
wrote  ligcovalent  to  ligcovalent.pdbqt
3---done
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> fixed:A:CYS874 with 6 MolKit.molecule.Atom]
calling setAutoFlexFields with  fixed:A:CYS874
in setAutoFlexFields with  fixed:A:CYS874
len(rotatables)= 1
returning res.torscount= 1
res.root= CA
ntors= 1
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= fixed_flex.pdbqt
res_total= 1
in writeResidue with  fixed:A:CYS874
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS874:CA, <Atom instance> fixed:A:CYS874:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS874:CA, <Atom instance> fixed:A:CYS874:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS874:N, <Atom instance> fixed:A:CYS874:CA)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3


writing and calling wL with nA= SG - 3
wBF2: wrote  SG
!!!2:calling wL


in writeLevel with  SG  outatom_counter= 4
len( SG ).bonds= 1
skipping b= CB - SG
returning queue= []
newQ= []
 currently queue=
CA : CB : queue= []
wrote flex file fixed_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: fixed_flex.pdbqt
wrote rigid file: fixed_rigid.pdbqt
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> ligcovalent:A:CYS874 with 28 MolKit.molecule.Atom]
calling setAutoFlexFields with  ligcovalent:A:CYS874
in setAutoFlexFields with  ligcovalent:A:CYS874
len(rotatables)= 8
returning res.torscount= 7
res.root= CA
ntors= 7
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= ligcovalent_flex.pdbqt
res_total= 7
in writeResidue with  ligcovalent:A:CYS874
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS874:N, <Atom instance> ligcovalent:A:CYS874:CA)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS874:CA, <Atom instance> ligcovalent:A:CYS874:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS874:CA, <Atom instance> ligcovalent:A:CYS874:C)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3
 currently queue= CB - SG ,
CA : CB : queue= [(<Atom instance> ligcovalent:A:CYS874:CB, <Atom instance> ligcovalent:A:CYS874:SG)]
 processing queue entry:  CB - SG
in wBF with fromAtom= CB + startAtom= SG startAtom.used= 0
wBF: wrote  SG
self.outatom_counter= 4
 currently queue= SG - CX ,
CB : SG : queue= [(<Atom instance> ligcovalent:A:CYS874:SG, <Atom instance> ligcovalent:A:CYS874:CX)]
 processing queue entry:  SG - CX
in wBF with fromAtom= SG + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 5
 currently queue= CX - CX ,
SG : CX : queue= [(<Atom instance> ligcovalent:A:CYS874:CX, <Atom instance> ligcovalent:A:CYS874:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 6
 currently queue= CX - CX , CX - CX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS874:CX, <Atom instance> ligcovalent:A:CYS874:CX), (<Atom instance> ligcovalent:A:CYS874:CX, <Atom instance> ligcovalent:A:CYS874:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 7


writing and calling wL with nA= OX - 7
wBF2: wrote  OX
!!!2:calling wL


in writeLevel with  OX  outatom_counter= 8
len( OX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []


writing and calling wL with nA= NX - 8
wBF2: wrote  NX
!!!2:calling wL


in writeLevel with  NX  outatom_counter= 9
len( NX ).bonds= 3
processing b= CX - NX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= NX - CX
processing b= NX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 11
len( CX ).bonds= 3
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - NX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 13
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 14
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 15
len( CX ).bonds= 3
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
processing b= OX - CX  activeTors= 1
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
CX wL: queue= [(<Atom instance> ligcovalent:A:CYS874:CX, <Atom instance> ligcovalent:A:CYS874:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 16
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS874:CX, <Atom instance> ligcovalent:A:CYS874:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS874:CX, <Atom instance> ligcovalent:A:CYS874:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS874:CX, <Atom instance> ligcovalent:A:CYS874:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS874:CX, <Atom instance> ligcovalent:A:CYS874:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS874:CX, <Atom instance> ligcovalent:A:CYS874:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS874:CX, <Atom instance> ligcovalent:A:CYS874:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 16
len( CX ).bonds= 3
skipping b= CX - CX
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 17
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 18
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= []
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS874:CX, <Atom instance> ligcovalent:A:CYS874:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS874:CX, <Atom instance> ligcovalent:A:CYS874:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 18
len( CX ).bonds= 2
skipping b= NX - CX
skipping b= CX - CX
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS874:CX, <Atom instance> ligcovalent:A:CYS874:OX)]
newQ= [(<Atom instance> ligcovalent:A:CYS874:CX, <Atom instance> ligcovalent:A:CYS874:OX)]
@@@@len(newq)= 1
queue= [(<Atom instance> ligcovalent:A:CYS874:CX, <Atom instance> ligcovalent:A:CYS874:OX)]
 currently queue= CX - OX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS874:CX, <Atom instance> ligcovalent:A:CYS874:OX)]
 processing queue entry:  CX - OX
in wBF with fromAtom= CX + startAtom= OX startAtom.used= 0
wBF: wrote  OX
self.outatom_counter= 19


writing and calling wL with nA= CX - 19
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 20
len( CX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []
 currently queue=
CX : OX : queue= []
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 21


writing and calling wL with nA= CX - 21
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 22
len( CX ).bonds= 1
skipping b= CX - CX
returning queue= []
newQ= []
 currently queue=
CX : CX : queue= []
wrote flex file ligcovalent_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: ligcovalent_flex.pdbqt
wrote rigid file: ligcovalent_rigid.pdbqt
4---done
setting PYTHONHOME environment
setting PYTHONHOME environment
!unable to use ligand.TORSDOF! torsdof always set to ligand.ndihe= 7
5---done
 concat 10 log files... done.
Job finished, good luck!
rm: 无法删除'chimera.com': 没有那个文件或目录
rm: 无法删除'tmp.mol2': 没有那个文件或目录
Done
Processing residue A:CYS773
[start] output filename is: ligcovalent_single.pdb
CHAIN A
Writing output filename: ligcovalent_single.pdb
1---ligcovalent.pdb prepared...
1.5--done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= fixed  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
Unable to assign MAP type to atom N
Sorry, there are no Gasteiger parameters available for atom fixed:A:HIS494:NE2
added gasteigercharges to  fixed
merged  0  nonpolar hydrogens
end of base class init
using std outputfilename  fixed.pdbqt
wrote  fixed  to  fixed.pdbqt
2---done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= ligcovalent  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  ligcovalent
merged  21  nonpolar hydrogens
end of base class init
using std outputfilename  ligcovalent.pdbqt
wrote  ligcovalent  to  ligcovalent.pdbqt
3---done
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> fixed:A:CYS773 with 6 MolKit.molecule.Atom]
calling setAutoFlexFields with  fixed:A:CYS773
in setAutoFlexFields with  fixed:A:CYS773
Unable to assign XYZ type to atom N
len(rotatables)= 1
returning res.torscount= 1
res.root= CA
ntors= 1
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= fixed_flex.pdbqt
res_total= 1
in writeResidue with  fixed:A:CYS773
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS773:N, <Atom instance> fixed:A:CYS773:CA)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS773:CA, <Atom instance> fixed:A:CYS773:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS773:CA, <Atom instance> fixed:A:CYS773:CB)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3


writing and calling wL with nA= SG - 3
wBF2: wrote  SG
!!!2:calling wL


in writeLevel with  SG  outatom_counter= 4
len( SG ).bonds= 1
skipping b= CB - SG
returning queue= []
newQ= []
 currently queue=
CA : CB : queue= []
wrote flex file fixed_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: fixed_flex.pdbqt
wrote rigid file: fixed_rigid.pdbqt
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> ligcovalent:A:CYS773 with 28 MolKit.molecule.Atom]
calling setAutoFlexFields with  ligcovalent:A:CYS773
in setAutoFlexFields with  ligcovalent:A:CYS773
len(rotatables)= 8
returning res.torscount= 7
res.root= CA
ntors= 7
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= ligcovalent_flex.pdbqt
res_total= 7
in writeResidue with  ligcovalent:A:CYS773
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS773:CA, <Atom instance> ligcovalent:A:CYS773:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS773:CA, <Atom instance> ligcovalent:A:CYS773:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS773:N, <Atom instance> ligcovalent:A:CYS773:CA)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3
 currently queue= CB - SG ,
CA : CB : queue= [(<Atom instance> ligcovalent:A:CYS773:CB, <Atom instance> ligcovalent:A:CYS773:SG)]
 processing queue entry:  CB - SG
in wBF with fromAtom= CB + startAtom= SG startAtom.used= 0
wBF: wrote  SG
self.outatom_counter= 4
 currently queue= SG - CX ,
CB : SG : queue= [(<Atom instance> ligcovalent:A:CYS773:SG, <Atom instance> ligcovalent:A:CYS773:CX)]
 processing queue entry:  SG - CX
in wBF with fromAtom= SG + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 5
 currently queue= CX - CX ,
SG : CX : queue= [(<Atom instance> ligcovalent:A:CYS773:CX, <Atom instance> ligcovalent:A:CYS773:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 6
 currently queue= CX - CX , CX - CX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS773:CX, <Atom instance> ligcovalent:A:CYS773:CX), (<Atom instance> ligcovalent:A:CYS773:CX, <Atom instance> ligcovalent:A:CYS773:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 7


writing and calling wL with nA= CX - 7
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 8
len( CX ).bonds= 1
skipping b= CX - CX
returning queue= []
newQ= []
 currently queue=
CX : CX : queue= []
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 9


writing and calling wL with nA= NX - 9
wBF2: wrote  NX
!!!2:calling wL


in writeLevel with  NX  outatom_counter= 10
len( NX ).bonds= 3
processing b= CX - NX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
processing b= NX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= NX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 12
len( CX ).bonds= 3
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - NX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 14
len( CX ).bonds= 3
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 16
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 17
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= []
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 17
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 18
len( CX ).bonds= 3
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
processing b= OX - CX  activeTors= 1
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
CX wL: queue= [(<Atom instance> ligcovalent:A:CYS773:CX, <Atom instance> ligcovalent:A:CYS773:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 19
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS773:CX, <Atom instance> ligcovalent:A:CYS773:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS773:CX, <Atom instance> ligcovalent:A:CYS773:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS773:CX, <Atom instance> ligcovalent:A:CYS773:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS773:CX, <Atom instance> ligcovalent:A:CYS773:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS773:CX, <Atom instance> ligcovalent:A:CYS773:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS773:CX, <Atom instance> ligcovalent:A:CYS773:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 19
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS773:CX, <Atom instance> ligcovalent:A:CYS773:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS773:CX, <Atom instance> ligcovalent:A:CYS773:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 19
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= NX - CX
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS773:CX, <Atom instance> ligcovalent:A:CYS773:OX)]
newQ= [(<Atom instance> ligcovalent:A:CYS773:CX, <Atom instance> ligcovalent:A:CYS773:OX)]
@@@@len(newq)= 1
queue= [(<Atom instance> ligcovalent:A:CYS773:CX, <Atom instance> ligcovalent:A:CYS773:OX)]


writing and calling wL with nA= OX - 19
wBF2: wrote  OX
!!!2:calling wL


in writeLevel with  OX  outatom_counter= 20
len( OX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []
 currently queue= CX - OX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS773:CX, <Atom instance> ligcovalent:A:CYS773:OX)]
 processing queue entry:  CX - OX
in wBF with fromAtom= CX + startAtom= OX startAtom.used= 0
wBF: wrote  OX
self.outatom_counter= 21


writing and calling wL with nA= CX - 21
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 22
len( CX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []
 currently queue=
CX : OX : queue= []
wrote flex file ligcovalent_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: ligcovalent_flex.pdbqt
wrote rigid file: ligcovalent_rigid.pdbqt
4---done
setting PYTHONHOME environment
setting PYTHONHOME environment
!unable to use ligand.TORSDOF! torsdof always set to ligand.ndihe= 7
5---done
 concat 10 log files... done.
Job finished, good luck!
rm: 无法删除'chimera.com': 没有那个文件或目录
rm: 无法删除'tmp.mol2': 没有那个文件或目录
Done
Processing residue A:CYS139
[start] output filename is: ligcovalent_single.pdb
CHAIN A
Writing output filename: ligcovalent_single.pdb
1---ligcovalent.pdb prepared...
1.5--done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= fixed  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  fixed
merged  0  nonpolar hydrogens
end of base class init
using std outputfilename  fixed.pdbqt
wrote  fixed  to  fixed.pdbqt
2---done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= ligcovalent  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  ligcovalent
merged  21  nonpolar hydrogens
end of base class init
using std outputfilename  ligcovalent.pdbqt
wrote  ligcovalent  to  ligcovalent.pdbqt
3---done
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> fixed:A:CYS139 with 6 MolKit.molecule.Atom]
calling setAutoFlexFields with  fixed:A:CYS139
in setAutoFlexFields with  fixed:A:CYS139
len(rotatables)= 1
returning res.torscount= 1
res.root= CA
ntors= 1
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= fixed_flex.pdbqt
res_total= 1
in writeResidue with  fixed:A:CYS139
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS139:CA, <Atom instance> fixed:A:CYS139:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS139:CA, <Atom instance> fixed:A:CYS139:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS139:N, <Atom instance> fixed:A:CYS139:CA)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3


writing and calling wL with nA= SG - 3
wBF2: wrote  SG
!!!2:calling wL


in writeLevel with  SG  outatom_counter= 4
len( SG ).bonds= 1
skipping b= CB - SG
returning queue= []
newQ= []
 currently queue=
CA : CB : queue= []
wrote flex file fixed_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: fixed_flex.pdbqt
wrote rigid file: fixed_rigid.pdbqt
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> ligcovalent:A:CYS139 with 28 MolKit.molecule.Atom]
calling setAutoFlexFields with  ligcovalent:A:CYS139
in setAutoFlexFields with  ligcovalent:A:CYS139
len(rotatables)= 8
returning res.torscount= 7
res.root= CA
ntors= 7
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= ligcovalent_flex.pdbqt
res_total= 7
in writeResidue with  ligcovalent:A:CYS139
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS139:CA, <Atom instance> ligcovalent:A:CYS139:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS139:CA, <Atom instance> ligcovalent:A:CYS139:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS139:N, <Atom instance> ligcovalent:A:CYS139:CA)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3
 currently queue= CB - SG ,
CA : CB : queue= [(<Atom instance> ligcovalent:A:CYS139:CB, <Atom instance> ligcovalent:A:CYS139:SG)]
 processing queue entry:  CB - SG
in wBF with fromAtom= CB + startAtom= SG startAtom.used= 0
wBF: wrote  SG
self.outatom_counter= 4
 currently queue= SG - CX ,
CB : SG : queue= [(<Atom instance> ligcovalent:A:CYS139:SG, <Atom instance> ligcovalent:A:CYS139:CX)]
 processing queue entry:  SG - CX
in wBF with fromAtom= SG + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 5
 currently queue= CX - CX ,
SG : CX : queue= [(<Atom instance> ligcovalent:A:CYS139:CX, <Atom instance> ligcovalent:A:CYS139:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 6
 currently queue= CX - CX , CX - CX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS139:CX, <Atom instance> ligcovalent:A:CYS139:CX), (<Atom instance> ligcovalent:A:CYS139:CX, <Atom instance> ligcovalent:A:CYS139:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 7


writing and calling wL with nA= CX - 7
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 8
len( CX ).bonds= 1
skipping b= CX - CX
returning queue= []
newQ= []
 currently queue=
CX : CX : queue= []
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 9


writing and calling wL with nA= NX - 9
wBF2: wrote  NX
!!!2:calling wL


in writeLevel with  NX  outatom_counter= 10
len( NX ).bonds= 3
processing b= CX - NX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
processing b= NX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= NX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 12
len( CX ).bonds= 3
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - NX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 14
len( CX ).bonds= 3
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 16
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 17
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= []
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 17
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 18
len( CX ).bonds= 3
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
processing b= OX - CX  activeTors= 1
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
CX wL: queue= [(<Atom instance> ligcovalent:A:CYS139:CX, <Atom instance> ligcovalent:A:CYS139:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 19
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS139:CX, <Atom instance> ligcovalent:A:CYS139:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS139:CX, <Atom instance> ligcovalent:A:CYS139:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS139:CX, <Atom instance> ligcovalent:A:CYS139:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS139:CX, <Atom instance> ligcovalent:A:CYS139:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS139:CX, <Atom instance> ligcovalent:A:CYS139:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS139:CX, <Atom instance> ligcovalent:A:CYS139:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 19
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS139:CX, <Atom instance> ligcovalent:A:CYS139:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS139:CX, <Atom instance> ligcovalent:A:CYS139:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 19
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= NX - CX
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS139:CX, <Atom instance> ligcovalent:A:CYS139:OX)]
newQ= [(<Atom instance> ligcovalent:A:CYS139:CX, <Atom instance> ligcovalent:A:CYS139:OX)]
@@@@len(newq)= 1
queue= [(<Atom instance> ligcovalent:A:CYS139:CX, <Atom instance> ligcovalent:A:CYS139:OX)]


writing and calling wL with nA= OX - 19
wBF2: wrote  OX
!!!2:calling wL


in writeLevel with  OX  outatom_counter= 20
len( OX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []
 currently queue= CX - OX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS139:CX, <Atom instance> ligcovalent:A:CYS139:OX)]
 processing queue entry:  CX - OX
in wBF with fromAtom= CX + startAtom= OX startAtom.used= 0
wBF: wrote  OX
self.outatom_counter= 21


writing and calling wL with nA= CX - 21
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 22
len( CX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []
 currently queue=
CX : OX : queue= []
wrote flex file ligcovalent_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: ligcovalent_flex.pdbqt
wrote rigid file: ligcovalent_rigid.pdbqt
4---done
setting PYTHONHOME environment
setting PYTHONHOME environment
!unable to use ligand.TORSDOF! torsdof always set to ligand.ndihe= 7
5---done
 concat 10 log files... done.
Job finished, good luck!
rm: 无法删除'chimera.com': 没有那个文件或目录
rm: 无法删除'tmp.mol2': 没有那个文件或目录
Done
Processing residue A:CYS207
[start] output filename is: ligcovalent_single.pdb
CHAIN A
Writing output filename: ligcovalent_single.pdb
1---ligcovalent.pdb prepared...
1.5--done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= fixed  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  fixed
merged  0  nonpolar hydrogens
end of base class init
using std outputfilename  fixed.pdbqt
wrote  fixed  to  fixed.pdbqt
2---done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= ligcovalent  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  ligcovalent
merged  21  nonpolar hydrogens
end of base class init
using std outputfilename  ligcovalent.pdbqt
wrote  ligcovalent  to  ligcovalent.pdbqt
3---done
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> fixed:A:CYS207 with 6 MolKit.molecule.Atom]
calling setAutoFlexFields with  fixed:A:CYS207
in setAutoFlexFields with  fixed:A:CYS207
len(rotatables)= 1
returning res.torscount= 1
res.root= CA
ntors= 1
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= fixed_flex.pdbqt
res_total= 1
in writeResidue with  fixed:A:CYS207
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS207:CA, <Atom instance> fixed:A:CYS207:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS207:CA, <Atom instance> fixed:A:CYS207:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS207:N, <Atom instance> fixed:A:CYS207:CA)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3


writing and calling wL with nA= SG - 3
wBF2: wrote  SG
!!!2:calling wL


in writeLevel with  SG  outatom_counter= 4
len( SG ).bonds= 1
skipping b= CB - SG
returning queue= []
newQ= []
 currently queue=
CA : CB : queue= []
wrote flex file fixed_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: fixed_flex.pdbqt
wrote rigid file: fixed_rigid.pdbqt
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> ligcovalent:A:CYS207 with 28 MolKit.molecule.Atom]
calling setAutoFlexFields with  ligcovalent:A:CYS207
in setAutoFlexFields with  ligcovalent:A:CYS207
len(rotatables)= 8
returning res.torscount= 7
res.root= CA
ntors= 7
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= ligcovalent_flex.pdbqt
res_total= 7
in writeResidue with  ligcovalent:A:CYS207
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS207:CA, <Atom instance> ligcovalent:A:CYS207:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS207:CA, <Atom instance> ligcovalent:A:CYS207:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS207:N, <Atom instance> ligcovalent:A:CYS207:CA)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3
 currently queue= CB - SG ,
CA : CB : queue= [(<Atom instance> ligcovalent:A:CYS207:CB, <Atom instance> ligcovalent:A:CYS207:SG)]
 processing queue entry:  CB - SG
in wBF with fromAtom= CB + startAtom= SG startAtom.used= 0
wBF: wrote  SG
self.outatom_counter= 4
 currently queue= SG - CX ,
CB : SG : queue= [(<Atom instance> ligcovalent:A:CYS207:SG, <Atom instance> ligcovalent:A:CYS207:CX)]
 processing queue entry:  SG - CX
in wBF with fromAtom= SG + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 5
 currently queue= CX - CX ,
SG : CX : queue= [(<Atom instance> ligcovalent:A:CYS207:CX, <Atom instance> ligcovalent:A:CYS207:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 6
 currently queue= CX - CX , CX - CX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS207:CX, <Atom instance> ligcovalent:A:CYS207:CX), (<Atom instance> ligcovalent:A:CYS207:CX, <Atom instance> ligcovalent:A:CYS207:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 7


writing and calling wL with nA= CX - 7
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 8
len( CX ).bonds= 1
skipping b= CX - CX
returning queue= []
newQ= []
 currently queue=
CX : CX : queue= []
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 9


writing and calling wL with nA= OX - 9
wBF2: wrote  OX
!!!2:calling wL


in writeLevel with  OX  outatom_counter= 10
len( OX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []


writing and calling wL with nA= NX - 10
wBF2: wrote  NX
!!!2:calling wL


in writeLevel with  NX  outatom_counter= 11
len( NX ).bonds= 3
processing b= CX - NX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= NX - CX
processing b= NX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 13
len( CX ).bonds= 3
skipping b= CX - NX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 15
len( CX ).bonds= 3
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 17
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 18
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= []
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 18
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 19
len( CX ).bonds= 3
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
processing b= OX - CX  activeTors= 1
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
CX wL: queue= [(<Atom instance> ligcovalent:A:CYS207:CX, <Atom instance> ligcovalent:A:CYS207:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 20
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS207:CX, <Atom instance> ligcovalent:A:CYS207:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS207:CX, <Atom instance> ligcovalent:A:CYS207:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS207:CX, <Atom instance> ligcovalent:A:CYS207:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS207:CX, <Atom instance> ligcovalent:A:CYS207:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS207:CX, <Atom instance> ligcovalent:A:CYS207:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS207:CX, <Atom instance> ligcovalent:A:CYS207:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 20
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS207:CX, <Atom instance> ligcovalent:A:CYS207:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS207:CX, <Atom instance> ligcovalent:A:CYS207:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 20
len( CX ).bonds= 2
skipping b= NX - CX
skipping b= CX - CX
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS207:CX, <Atom instance> ligcovalent:A:CYS207:OX)]
newQ= [(<Atom instance> ligcovalent:A:CYS207:CX, <Atom instance> ligcovalent:A:CYS207:OX)]
@@@@len(newq)= 1
queue= [(<Atom instance> ligcovalent:A:CYS207:CX, <Atom instance> ligcovalent:A:CYS207:OX)]
 currently queue= CX - OX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS207:CX, <Atom instance> ligcovalent:A:CYS207:OX)]
 processing queue entry:  CX - OX
in wBF with fromAtom= CX + startAtom= OX startAtom.used= 0
wBF: wrote  OX
self.outatom_counter= 21


writing and calling wL with nA= CX - 21
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 22
len( CX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []
 currently queue=
CX : OX : queue= []
wrote flex file ligcovalent_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: ligcovalent_flex.pdbqt
wrote rigid file: ligcovalent_rigid.pdbqt
4---done
setting PYTHONHOME environment
setting PYTHONHOME environment
!unable to use ligand.TORSDOF! torsdof always set to ligand.ndihe= 7
5---done
 concat 10 log files... done.
Job finished, good luck!
rm: 无法删除'chimera.com': 没有那个文件或目录
rm: 无法删除'tmp.mol2': 没有那个文件或目录
Done
Processing residue A:CYS379
[start] output filename is: ligcovalent_single.pdb
CHAIN A
Writing output filename: ligcovalent_single.pdb
1---ligcovalent.pdb prepared...
1.5--done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= fixed  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  fixed
merged  0  nonpolar hydrogens
end of base class init
using std outputfilename  fixed.pdbqt
wrote  fixed  to  fixed.pdbqt
2---done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= ligcovalent  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  ligcovalent
merged  21  nonpolar hydrogens
end of base class init
using std outputfilename  ligcovalent.pdbqt
wrote  ligcovalent  to  ligcovalent.pdbqt
3---done
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> fixed:A:CYS379 with 6 MolKit.molecule.Atom]
calling setAutoFlexFields with  fixed:A:CYS379
in setAutoFlexFields with  fixed:A:CYS379
len(rotatables)= 1
returning res.torscount= 1
res.root= CA
ntors= 1
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= fixed_flex.pdbqt
res_total= 1
in writeResidue with  fixed:A:CYS379
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS379:CA, <Atom instance> fixed:A:CYS379:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS379:CA, <Atom instance> fixed:A:CYS379:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS379:N, <Atom instance> fixed:A:CYS379:CA)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3


writing and calling wL with nA= SG - 3
wBF2: wrote  SG
!!!2:calling wL


in writeLevel with  SG  outatom_counter= 4
len( SG ).bonds= 1
skipping b= CB - SG
returning queue= []
newQ= []
 currently queue=
CA : CB : queue= []
wrote flex file fixed_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: fixed_flex.pdbqt
wrote rigid file: fixed_rigid.pdbqt
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> ligcovalent:A:CYS379 with 28 MolKit.molecule.Atom]
calling setAutoFlexFields with  ligcovalent:A:CYS379
in setAutoFlexFields with  ligcovalent:A:CYS379
len(rotatables)= 8
returning res.torscount= 7
res.root= CA
ntors= 7
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= ligcovalent_flex.pdbqt
res_total= 7
in writeResidue with  ligcovalent:A:CYS379
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS379:N, <Atom instance> ligcovalent:A:CYS379:CA)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS379:CA, <Atom instance> ligcovalent:A:CYS379:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS379:CA, <Atom instance> ligcovalent:A:CYS379:C)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3
 currently queue= CB - SG ,
CA : CB : queue= [(<Atom instance> ligcovalent:A:CYS379:CB, <Atom instance> ligcovalent:A:CYS379:SG)]
 processing queue entry:  CB - SG
in wBF with fromAtom= CB + startAtom= SG startAtom.used= 0
wBF: wrote  SG
self.outatom_counter= 4
 currently queue= SG - CX ,
CB : SG : queue= [(<Atom instance> ligcovalent:A:CYS379:SG, <Atom instance> ligcovalent:A:CYS379:CX)]
 processing queue entry:  SG - CX
in wBF with fromAtom= SG + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 5
 currently queue= CX - CX ,
SG : CX : queue= [(<Atom instance> ligcovalent:A:CYS379:CX, <Atom instance> ligcovalent:A:CYS379:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 6
 currently queue= CX - CX , CX - CX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS379:CX, <Atom instance> ligcovalent:A:CYS379:CX), (<Atom instance> ligcovalent:A:CYS379:CX, <Atom instance> ligcovalent:A:CYS379:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 7


writing and calling wL with nA= OX - 7
wBF2: wrote  OX
!!!2:calling wL


in writeLevel with  OX  outatom_counter= 8
len( OX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []


writing and calling wL with nA= NX - 8
wBF2: wrote  NX
!!!2:calling wL


in writeLevel with  NX  outatom_counter= 9
len( NX ).bonds= 3
skipping b= NX - CX
processing b= NX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
processing b= CX - NX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 11
len( CX ).bonds= 2
skipping b= NX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 12
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 13
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 14
len( CX ).bonds= 3
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 15
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 16
len( CX ).bonds= 3
processing b= OX - CX  activeTors= 1
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
CX wL: queue= [(<Atom instance> ligcovalent:A:CYS379:CX, <Atom instance> ligcovalent:A:CYS379:OX)]
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 17
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 18
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS379:CX, <Atom instance> ligcovalent:A:CYS379:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS379:CX, <Atom instance> ligcovalent:A:CYS379:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS379:CX, <Atom instance> ligcovalent:A:CYS379:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS379:CX, <Atom instance> ligcovalent:A:CYS379:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS379:CX, <Atom instance> ligcovalent:A:CYS379:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS379:CX, <Atom instance> ligcovalent:A:CYS379:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS379:CX, <Atom instance> ligcovalent:A:CYS379:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS379:CX, <Atom instance> ligcovalent:A:CYS379:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS379:CX, <Atom instance> ligcovalent:A:CYS379:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS379:CX, <Atom instance> ligcovalent:A:CYS379:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS379:CX, <Atom instance> ligcovalent:A:CYS379:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS379:CX, <Atom instance> ligcovalent:A:CYS379:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 18
len( CX ).bonds= 3
skipping b= CX - CX
skipping b= CX - CX
skipping b= CX - NX
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS379:CX, <Atom instance> ligcovalent:A:CYS379:OX)]
newQ= [(<Atom instance> ligcovalent:A:CYS379:CX, <Atom instance> ligcovalent:A:CYS379:OX)]
@@@@len(newq)= 1
queue= [(<Atom instance> ligcovalent:A:CYS379:CX, <Atom instance> ligcovalent:A:CYS379:OX)]
 currently queue= CX - OX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS379:CX, <Atom instance> ligcovalent:A:CYS379:OX)]
 processing queue entry:  CX - OX
in wBF with fromAtom= CX + startAtom= OX startAtom.used= 0
wBF: wrote  OX
self.outatom_counter= 19


writing and calling wL with nA= CX - 19
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 20
len( CX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []
 currently queue=
CX : OX : queue= []
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 21


writing and calling wL with nA= CX - 21
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 22
len( CX ).bonds= 1
skipping b= CX - CX
returning queue= []
newQ= []
 currently queue=
CX : CX : queue= []
wrote flex file ligcovalent_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: ligcovalent_flex.pdbqt
wrote rigid file: ligcovalent_rigid.pdbqt
4---done
setting PYTHONHOME environment
setting PYTHONHOME environment
!unable to use ligand.TORSDOF! torsdof always set to ligand.ndihe= 7
5---done
 concat 10 log files... done.
Job finished, good luck!
rm: 无法删除'chimera.com': 没有那个文件或目录
rm: 无法删除'tmp.mol2': 没有那个文件或目录
Done
Processing residue A:CYS269
[start] output filename is: ligcovalent_single.pdb
CHAIN A
Writing output filename: ligcovalent_single.pdb
1---ligcovalent.pdb prepared...
1.5--done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= fixed  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  fixed
merged  0  nonpolar hydrogens
end of base class init
using std outputfilename  fixed.pdbqt
wrote  fixed  to  fixed.pdbqt
2---done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= ligcovalent  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  ligcovalent
merged  21  nonpolar hydrogens
end of base class init
using std outputfilename  ligcovalent.pdbqt
wrote  ligcovalent  to  ligcovalent.pdbqt
3---done
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> fixed:A:CYS269 with 6 MolKit.molecule.Atom]
calling setAutoFlexFields with  fixed:A:CYS269
in setAutoFlexFields with  fixed:A:CYS269
len(rotatables)= 1
returning res.torscount= 1
res.root= CA
ntors= 1
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= fixed_flex.pdbqt
res_total= 1
in writeResidue with  fixed:A:CYS269
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS269:N, <Atom instance> fixed:A:CYS269:CA)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS269:CA, <Atom instance> fixed:A:CYS269:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS269:CA, <Atom instance> fixed:A:CYS269:CB)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3


writing and calling wL with nA= SG - 3
wBF2: wrote  SG
!!!2:calling wL


in writeLevel with  SG  outatom_counter= 4
len( SG ).bonds= 1
skipping b= CB - SG
returning queue= []
newQ= []
 currently queue=
CA : CB : queue= []
wrote flex file fixed_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: fixed_flex.pdbqt
wrote rigid file: fixed_rigid.pdbqt
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> ligcovalent:A:CYS269 with 28 MolKit.molecule.Atom]
calling setAutoFlexFields with  ligcovalent:A:CYS269
in setAutoFlexFields with  ligcovalent:A:CYS269
len(rotatables)= 8
returning res.torscount= 7
res.root= CA
ntors= 7
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= ligcovalent_flex.pdbqt
res_total= 7
in writeResidue with  ligcovalent:A:CYS269
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS269:N, <Atom instance> ligcovalent:A:CYS269:CA)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS269:CA, <Atom instance> ligcovalent:A:CYS269:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS269:CA, <Atom instance> ligcovalent:A:CYS269:CB)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3
 currently queue= CB - SG ,
CA : CB : queue= [(<Atom instance> ligcovalent:A:CYS269:CB, <Atom instance> ligcovalent:A:CYS269:SG)]
 processing queue entry:  CB - SG
in wBF with fromAtom= CB + startAtom= SG startAtom.used= 0
wBF: wrote  SG
self.outatom_counter= 4
 currently queue= SG - CX ,
CB : SG : queue= [(<Atom instance> ligcovalent:A:CYS269:SG, <Atom instance> ligcovalent:A:CYS269:CX)]
 processing queue entry:  SG - CX
in wBF with fromAtom= SG + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 5
 currently queue= CX - CX ,
SG : CX : queue= [(<Atom instance> ligcovalent:A:CYS269:CX, <Atom instance> ligcovalent:A:CYS269:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 6
 currently queue= CX - CX , CX - CX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS269:CX, <Atom instance> ligcovalent:A:CYS269:CX), (<Atom instance> ligcovalent:A:CYS269:CX, <Atom instance> ligcovalent:A:CYS269:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 7


writing and calling wL with nA= OX - 7
wBF2: wrote  OX
!!!2:calling wL


in writeLevel with  OX  outatom_counter= 8
len( OX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []


writing and calling wL with nA= NX - 8
wBF2: wrote  NX
!!!2:calling wL


in writeLevel with  NX  outatom_counter= 9
len( NX ).bonds= 3
processing b= CX - NX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= NX - CX
processing b= NX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 11
len( CX ).bonds= 3
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - NX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 13
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 14
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 15
len( CX ).bonds= 3
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
processing b= OX - CX  activeTors= 1
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
CX wL: queue= [(<Atom instance> ligcovalent:A:CYS269:CX, <Atom instance> ligcovalent:A:CYS269:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 16
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS269:CX, <Atom instance> ligcovalent:A:CYS269:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS269:CX, <Atom instance> ligcovalent:A:CYS269:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS269:CX, <Atom instance> ligcovalent:A:CYS269:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS269:CX, <Atom instance> ligcovalent:A:CYS269:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS269:CX, <Atom instance> ligcovalent:A:CYS269:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS269:CX, <Atom instance> ligcovalent:A:CYS269:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 16
len( CX ).bonds= 3
skipping b= CX - CX
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 17
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 18
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= []
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS269:CX, <Atom instance> ligcovalent:A:CYS269:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS269:CX, <Atom instance> ligcovalent:A:CYS269:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 18
len( CX ).bonds= 2
skipping b= NX - CX
skipping b= CX - CX
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS269:CX, <Atom instance> ligcovalent:A:CYS269:OX)]
newQ= [(<Atom instance> ligcovalent:A:CYS269:CX, <Atom instance> ligcovalent:A:CYS269:OX)]
@@@@len(newq)= 1
queue= [(<Atom instance> ligcovalent:A:CYS269:CX, <Atom instance> ligcovalent:A:CYS269:OX)]
 currently queue= CX - OX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS269:CX, <Atom instance> ligcovalent:A:CYS269:OX)]
 processing queue entry:  CX - OX
in wBF with fromAtom= CX + startAtom= OX startAtom.used= 0
wBF: wrote  OX
self.outatom_counter= 19


writing and calling wL with nA= CX - 19
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 20
len( CX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []
 currently queue=
CX : OX : queue= []
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 21


writing and calling wL with nA= CX - 21
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 22
len( CX ).bonds= 1
skipping b= CX - CX
returning queue= []
newQ= []
 currently queue=
CX : CX : queue= []
wrote flex file ligcovalent_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: ligcovalent_flex.pdbqt
wrote rigid file: ligcovalent_rigid.pdbqt
4---done
setting PYTHONHOME environment
setting PYTHONHOME environment
!unable to use ligand.TORSDOF! torsdof always set to ligand.ndihe= 7
5---done
 concat 10 log files... done.
Job finished, good luck!
rm: 无法删除'chimera.com': 没有那个文件或目录
rm: 无法删除'tmp.mol2': 没有那个文件或目录
Done
Processing residue A:CYS424
[start] output filename is: ligcovalent_single.pdb
CHAIN A
Writing output filename: ligcovalent_single.pdb
1---ligcovalent.pdb prepared...
1.5--done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= fixed  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  fixed
merged  0  nonpolar hydrogens
end of base class init
using std outputfilename  fixed.pdbqt
wrote  fixed  to  fixed.pdbqt
2---done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= ligcovalent  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  ligcovalent
merged  21  nonpolar hydrogens
end of base class init
using std outputfilename  ligcovalent.pdbqt
wrote  ligcovalent  to  ligcovalent.pdbqt
3---done
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> fixed:A:CYS424 with 6 MolKit.molecule.Atom]
calling setAutoFlexFields with  fixed:A:CYS424
in setAutoFlexFields with  fixed:A:CYS424
len(rotatables)= 1
returning res.torscount= 1
res.root= CA
ntors= 1
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= fixed_flex.pdbqt
res_total= 1
in writeResidue with  fixed:A:CYS424
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS424:CA, <Atom instance> fixed:A:CYS424:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS424:CA, <Atom instance> fixed:A:CYS424:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS424:N, <Atom instance> fixed:A:CYS424:CA)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3


writing and calling wL with nA= SG - 3
wBF2: wrote  SG
!!!2:calling wL


in writeLevel with  SG  outatom_counter= 4
len( SG ).bonds= 1
skipping b= CB - SG
returning queue= []
newQ= []
 currently queue=
CA : CB : queue= []
wrote flex file fixed_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: fixed_flex.pdbqt
wrote rigid file: fixed_rigid.pdbqt
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> ligcovalent:A:CYS424 with 28 MolKit.molecule.Atom]
calling setAutoFlexFields with  ligcovalent:A:CYS424
in setAutoFlexFields with  ligcovalent:A:CYS424
len(rotatables)= 8
returning res.torscount= 7
res.root= CA
ntors= 7
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= ligcovalent_flex.pdbqt
res_total= 7
in writeResidue with  ligcovalent:A:CYS424
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS424:CA, <Atom instance> ligcovalent:A:CYS424:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS424:CA, <Atom instance> ligcovalent:A:CYS424:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS424:N, <Atom instance> ligcovalent:A:CYS424:CA)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3
 currently queue= CB - SG ,
CA : CB : queue= [(<Atom instance> ligcovalent:A:CYS424:CB, <Atom instance> ligcovalent:A:CYS424:SG)]
 processing queue entry:  CB - SG
in wBF with fromAtom= CB + startAtom= SG startAtom.used= 0
wBF: wrote  SG
self.outatom_counter= 4
 currently queue= SG - CX ,
CB : SG : queue= [(<Atom instance> ligcovalent:A:CYS424:SG, <Atom instance> ligcovalent:A:CYS424:CX)]
 processing queue entry:  SG - CX
in wBF with fromAtom= SG + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 5
 currently queue= CX - CX ,
SG : CX : queue= [(<Atom instance> ligcovalent:A:CYS424:CX, <Atom instance> ligcovalent:A:CYS424:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 6
 currently queue= CX - CX , CX - CX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS424:CX, <Atom instance> ligcovalent:A:CYS424:CX), (<Atom instance> ligcovalent:A:CYS424:CX, <Atom instance> ligcovalent:A:CYS424:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 7


writing and calling wL with nA= CX - 7
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 8
len( CX ).bonds= 1
skipping b= CX - CX
returning queue= []
newQ= []
 currently queue=
CX : CX : queue= []
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 9


writing and calling wL with nA= NX - 9
wBF2: wrote  NX
!!!2:calling wL


in writeLevel with  NX  outatom_counter= 10
len( NX ).bonds= 3
processing b= NX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= NX - CX
processing b= CX - NX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 12
len( CX ).bonds= 2
skipping b= NX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 13
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 14
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 15
len( CX ).bonds= 3
skipping b= CX - CX
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 16
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 17
len( CX ).bonds= 3
processing b= OX - CX  activeTors= 1
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
CX wL: queue= [(<Atom instance> ligcovalent:A:CYS424:CX, <Atom instance> ligcovalent:A:CYS424:OX)]
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 18
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 19
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS424:CX, <Atom instance> ligcovalent:A:CYS424:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS424:CX, <Atom instance> ligcovalent:A:CYS424:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS424:CX, <Atom instance> ligcovalent:A:CYS424:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS424:CX, <Atom instance> ligcovalent:A:CYS424:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS424:CX, <Atom instance> ligcovalent:A:CYS424:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS424:CX, <Atom instance> ligcovalent:A:CYS424:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS424:CX, <Atom instance> ligcovalent:A:CYS424:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS424:CX, <Atom instance> ligcovalent:A:CYS424:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS424:CX, <Atom instance> ligcovalent:A:CYS424:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS424:CX, <Atom instance> ligcovalent:A:CYS424:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS424:CX, <Atom instance> ligcovalent:A:CYS424:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS424:CX, <Atom instance> ligcovalent:A:CYS424:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 19
len( CX ).bonds= 3
skipping b= CX - NX
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS424:CX, <Atom instance> ligcovalent:A:CYS424:OX)]
newQ= [(<Atom instance> ligcovalent:A:CYS424:CX, <Atom instance> ligcovalent:A:CYS424:OX)]
@@@@len(newq)= 1
queue= [(<Atom instance> ligcovalent:A:CYS424:CX, <Atom instance> ligcovalent:A:CYS424:OX)]


writing and calling wL with nA= OX - 19
wBF2: wrote  OX
!!!2:calling wL


in writeLevel with  OX  outatom_counter= 20
len( OX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []
 currently queue= CX - OX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS424:CX, <Atom instance> ligcovalent:A:CYS424:OX)]
 processing queue entry:  CX - OX
in wBF with fromAtom= CX + startAtom= OX startAtom.used= 0
wBF: wrote  OX
self.outatom_counter= 21


writing and calling wL with nA= CX - 21
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 22
len( CX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []
 currently queue=
CX : OX : queue= []
wrote flex file ligcovalent_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: ligcovalent_flex.pdbqt
wrote rigid file: ligcovalent_rigid.pdbqt
4---done
setting PYTHONHOME environment
setting PYTHONHOME environment
!unable to use ligand.TORSDOF! torsdof always set to ligand.ndihe= 7
5---done
 concat 10 log files... done.
Job finished, good luck!
rm: 无法删除'chimera.com': 没有那个文件或目录
rm: 无法删除'tmp.mol2': 没有那个文件或目录
Done
Processing residue A:CYS106
[start] output filename is: ligcovalent_single.pdb
CHAIN A
Writing output filename: ligcovalent_single.pdb
1---ligcovalent.pdb prepared...
1.5--done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= fixed  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  fixed
merged  0  nonpolar hydrogens
end of base class init
using std outputfilename  fixed.pdbqt
wrote  fixed  to  fixed.pdbqt
2---done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= ligcovalent  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  ligcovalent
merged  21  nonpolar hydrogens
end of base class init
using std outputfilename  ligcovalent.pdbqt
wrote  ligcovalent  to  ligcovalent.pdbqt
3---done
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> fixed:A:CYS106 with 6 MolKit.molecule.Atom]
calling setAutoFlexFields with  fixed:A:CYS106
in setAutoFlexFields with  fixed:A:CYS106
len(rotatables)= 1
returning res.torscount= 1
res.root= CA
ntors= 1
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= fixed_flex.pdbqt
res_total= 1
in writeResidue with  fixed:A:CYS106
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS106:CA, <Atom instance> fixed:A:CYS106:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS106:CA, <Atom instance> fixed:A:CYS106:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS106:N, <Atom instance> fixed:A:CYS106:CA)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3


writing and calling wL with nA= SG - 3
wBF2: wrote  SG
!!!2:calling wL


in writeLevel with  SG  outatom_counter= 4
len( SG ).bonds= 1
skipping b= CB - SG
returning queue= []
newQ= []
 currently queue=
CA : CB : queue= []
wrote flex file fixed_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: fixed_flex.pdbqt
wrote rigid file: fixed_rigid.pdbqt
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> ligcovalent:A:CYS106 with 28 MolKit.molecule.Atom]
calling setAutoFlexFields with  ligcovalent:A:CYS106
in setAutoFlexFields with  ligcovalent:A:CYS106
len(rotatables)= 8
returning res.torscount= 7
res.root= CA
ntors= 7
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= ligcovalent_flex.pdbqt
res_total= 7
in writeResidue with  ligcovalent:A:CYS106
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS106:N, <Atom instance> ligcovalent:A:CYS106:CA)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS106:CA, <Atom instance> ligcovalent:A:CYS106:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS106:CA, <Atom instance> ligcovalent:A:CYS106:CB)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3
 currently queue= CB - SG ,
CA : CB : queue= [(<Atom instance> ligcovalent:A:CYS106:CB, <Atom instance> ligcovalent:A:CYS106:SG)]
 processing queue entry:  CB - SG
in wBF with fromAtom= CB + startAtom= SG startAtom.used= 0
wBF: wrote  SG
self.outatom_counter= 4
 currently queue= SG - CX ,
CB : SG : queue= [(<Atom instance> ligcovalent:A:CYS106:SG, <Atom instance> ligcovalent:A:CYS106:CX)]
 processing queue entry:  SG - CX
in wBF with fromAtom= SG + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 5
 currently queue= CX - CX ,
SG : CX : queue= [(<Atom instance> ligcovalent:A:CYS106:CX, <Atom instance> ligcovalent:A:CYS106:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 6
 currently queue= CX - CX , CX - CX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS106:CX, <Atom instance> ligcovalent:A:CYS106:CX), (<Atom instance> ligcovalent:A:CYS106:CX, <Atom instance> ligcovalent:A:CYS106:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 7


writing and calling wL with nA= OX - 7
wBF2: wrote  OX
!!!2:calling wL


in writeLevel with  OX  outatom_counter= 8
len( OX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []


writing and calling wL with nA= NX - 8
wBF2: wrote  NX
!!!2:calling wL


in writeLevel with  NX  outatom_counter= 9
len( NX ).bonds= 3
skipping b= NX - CX
processing b= NX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
processing b= CX - NX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 11
len( CX ).bonds= 2
skipping b= NX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 12
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 13
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 14
len( CX ).bonds= 3
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 15
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 16
len( CX ).bonds= 3
processing b= OX - CX  activeTors= 1
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
CX wL: queue= [(<Atom instance> ligcovalent:A:CYS106:CX, <Atom instance> ligcovalent:A:CYS106:OX)]
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 17
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 18
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS106:CX, <Atom instance> ligcovalent:A:CYS106:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS106:CX, <Atom instance> ligcovalent:A:CYS106:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS106:CX, <Atom instance> ligcovalent:A:CYS106:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS106:CX, <Atom instance> ligcovalent:A:CYS106:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS106:CX, <Atom instance> ligcovalent:A:CYS106:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS106:CX, <Atom instance> ligcovalent:A:CYS106:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS106:CX, <Atom instance> ligcovalent:A:CYS106:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS106:CX, <Atom instance> ligcovalent:A:CYS106:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS106:CX, <Atom instance> ligcovalent:A:CYS106:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS106:CX, <Atom instance> ligcovalent:A:CYS106:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS106:CX, <Atom instance> ligcovalent:A:CYS106:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS106:CX, <Atom instance> ligcovalent:A:CYS106:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 18
len( CX ).bonds= 3
skipping b= CX - CX
skipping b= CX - NX
skipping b= CX - CX
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS106:CX, <Atom instance> ligcovalent:A:CYS106:OX)]
newQ= [(<Atom instance> ligcovalent:A:CYS106:CX, <Atom instance> ligcovalent:A:CYS106:OX)]
@@@@len(newq)= 1
queue= [(<Atom instance> ligcovalent:A:CYS106:CX, <Atom instance> ligcovalent:A:CYS106:OX)]
 currently queue= CX - OX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS106:CX, <Atom instance> ligcovalent:A:CYS106:OX)]
 processing queue entry:  CX - OX
in wBF with fromAtom= CX + startAtom= OX startAtom.used= 0
wBF: wrote  OX
self.outatom_counter= 19


writing and calling wL with nA= CX - 19
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 20
len( CX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []
 currently queue=
CX : OX : queue= []
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 21


writing and calling wL with nA= CX - 21
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 22
len( CX ).bonds= 1
skipping b= CX - CX
returning queue= []
newQ= []
 currently queue=
CX : CX : queue= []
wrote flex file ligcovalent_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: ligcovalent_flex.pdbqt
wrote rigid file: ligcovalent_rigid.pdbqt
4---done
setting PYTHONHOME environment
setting PYTHONHOME environment
!unable to use ligand.TORSDOF! torsdof always set to ligand.ndihe= 7
5---done
 concat 10 log files... done.
Job finished, good luck!
rm: 无法删除'chimera.com': 没有那个文件或目录
rm: 无法删除'tmp.mol2': 没有那个文件或目录
Done
Processing residue A:CYS214
[start] output filename is: ligcovalent_single.pdb
CHAIN A
Writing output filename: ligcovalent_single.pdb
1---ligcovalent.pdb prepared...
1.5--done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= fixed  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  fixed
merged  0  nonpolar hydrogens
end of base class init
using std outputfilename  fixed.pdbqt
wrote  fixed  to  fixed.pdbqt
2---done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= ligcovalent  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  ligcovalent
merged  21  nonpolar hydrogens
end of base class init
using std outputfilename  ligcovalent.pdbqt
wrote  ligcovalent  to  ligcovalent.pdbqt
3---done
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> fixed:A:CYS214 with 6 MolKit.molecule.Atom]
calling setAutoFlexFields with  fixed:A:CYS214
in setAutoFlexFields with  fixed:A:CYS214
len(rotatables)= 1
returning res.torscount= 1
res.root= CA
ntors= 1
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= fixed_flex.pdbqt
res_total= 1
in writeResidue with  fixed:A:CYS214
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS214:CA, <Atom instance> fixed:A:CYS214:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS214:CA, <Atom instance> fixed:A:CYS214:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS214:N, <Atom instance> fixed:A:CYS214:CA)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3


writing and calling wL with nA= SG - 3
wBF2: wrote  SG
!!!2:calling wL


in writeLevel with  SG  outatom_counter= 4
len( SG ).bonds= 1
skipping b= CB - SG
returning queue= []
newQ= []
 currently queue=
CA : CB : queue= []
wrote flex file fixed_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: fixed_flex.pdbqt
wrote rigid file: fixed_rigid.pdbqt
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> ligcovalent:A:CYS214 with 28 MolKit.molecule.Atom]
calling setAutoFlexFields with  ligcovalent:A:CYS214
in setAutoFlexFields with  ligcovalent:A:CYS214
len(rotatables)= 8
returning res.torscount= 7
res.root= CA
ntors= 7
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= ligcovalent_flex.pdbqt
res_total= 7
in writeResidue with  ligcovalent:A:CYS214
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS214:CA, <Atom instance> ligcovalent:A:CYS214:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS214:CA, <Atom instance> ligcovalent:A:CYS214:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS214:N, <Atom instance> ligcovalent:A:CYS214:CA)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3
 currently queue= CB - SG ,
CA : CB : queue= [(<Atom instance> ligcovalent:A:CYS214:CB, <Atom instance> ligcovalent:A:CYS214:SG)]
 processing queue entry:  CB - SG
in wBF with fromAtom= CB + startAtom= SG startAtom.used= 0
wBF: wrote  SG
self.outatom_counter= 4
 currently queue= SG - CX ,
CB : SG : queue= [(<Atom instance> ligcovalent:A:CYS214:SG, <Atom instance> ligcovalent:A:CYS214:CX)]
 processing queue entry:  SG - CX
in wBF with fromAtom= SG + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 5
 currently queue= CX - CX ,
SG : CX : queue= [(<Atom instance> ligcovalent:A:CYS214:CX, <Atom instance> ligcovalent:A:CYS214:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 6
 currently queue= CX - CX , CX - CX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS214:CX, <Atom instance> ligcovalent:A:CYS214:CX), (<Atom instance> ligcovalent:A:CYS214:CX, <Atom instance> ligcovalent:A:CYS214:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 7


writing and calling wL with nA= CX - 7
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 8
len( CX ).bonds= 1
skipping b= CX - CX
returning queue= []
newQ= []
 currently queue=
CX : CX : queue= []
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 9


writing and calling wL with nA= NX - 9
wBF2: wrote  NX
!!!2:calling wL


in writeLevel with  NX  outatom_counter= 10
len( NX ).bonds= 3
processing b= CX - NX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
processing b= NX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= NX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 12
len( CX ).bonds= 3
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - NX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 14
len( CX ).bonds= 3
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 16
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 17
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= []
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 17
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 18
len( CX ).bonds= 3
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
processing b= OX - CX  activeTors= 1
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
CX wL: queue= [(<Atom instance> ligcovalent:A:CYS214:CX, <Atom instance> ligcovalent:A:CYS214:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 19
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS214:CX, <Atom instance> ligcovalent:A:CYS214:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS214:CX, <Atom instance> ligcovalent:A:CYS214:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS214:CX, <Atom instance> ligcovalent:A:CYS214:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS214:CX, <Atom instance> ligcovalent:A:CYS214:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS214:CX, <Atom instance> ligcovalent:A:CYS214:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS214:CX, <Atom instance> ligcovalent:A:CYS214:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 19
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS214:CX, <Atom instance> ligcovalent:A:CYS214:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS214:CX, <Atom instance> ligcovalent:A:CYS214:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 19
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= NX - CX
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS214:CX, <Atom instance> ligcovalent:A:CYS214:OX)]
newQ= [(<Atom instance> ligcovalent:A:CYS214:CX, <Atom instance> ligcovalent:A:CYS214:OX)]
@@@@len(newq)= 1
queue= [(<Atom instance> ligcovalent:A:CYS214:CX, <Atom instance> ligcovalent:A:CYS214:OX)]


writing and calling wL with nA= OX - 19
wBF2: wrote  OX
!!!2:calling wL


in writeLevel with  OX  outatom_counter= 20
len( OX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []
 currently queue= CX - OX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS214:CX, <Atom instance> ligcovalent:A:CYS214:OX)]
 processing queue entry:  CX - OX
in wBF with fromAtom= CX + startAtom= OX startAtom.used= 0
wBF: wrote  OX
self.outatom_counter= 21


writing and calling wL with nA= CX - 21
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 22
len( CX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []
 currently queue=
CX : OX : queue= []
wrote flex file ligcovalent_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: ligcovalent_flex.pdbqt
wrote rigid file: ligcovalent_rigid.pdbqt
4---done
setting PYTHONHOME environment
setting PYTHONHOME environment
!unable to use ligand.TORSDOF! torsdof always set to ligand.ndihe= 7
5---done
 concat 10 log files... done.
Job finished, good luck!
rm: 无法删除'chimera.com': 没有那个文件或目录
rm: 无法删除'tmp.mol2': 没有那个文件或目录
Done
Processing residue A:CYS229
[start] output filename is: ligcovalent_single.pdb
CHAIN A
Writing output filename: ligcovalent_single.pdb
1---ligcovalent.pdb prepared...
1.5--done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= fixed  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  fixed
merged  0  nonpolar hydrogens
end of base class init
using std outputfilename  fixed.pdbqt
wrote  fixed  to  fixed.pdbqt
2---done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= ligcovalent  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  ligcovalent
merged  21  nonpolar hydrogens
end of base class init
using std outputfilename  ligcovalent.pdbqt
wrote  ligcovalent  to  ligcovalent.pdbqt
3---done
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> fixed:A:CYS229 with 6 MolKit.molecule.Atom]
calling setAutoFlexFields with  fixed:A:CYS229
in setAutoFlexFields with  fixed:A:CYS229
len(rotatables)= 1
returning res.torscount= 1
res.root= CA
ntors= 1
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= fixed_flex.pdbqt
res_total= 1
in writeResidue with  fixed:A:CYS229
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS229:N, <Atom instance> fixed:A:CYS229:CA)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS229:CA, <Atom instance> fixed:A:CYS229:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS229:CA, <Atom instance> fixed:A:CYS229:C)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3


writing and calling wL with nA= SG - 3
wBF2: wrote  SG
!!!2:calling wL


in writeLevel with  SG  outatom_counter= 4
len( SG ).bonds= 1
skipping b= CB - SG
returning queue= []
newQ= []
 currently queue=
CA : CB : queue= []
wrote flex file fixed_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: fixed_flex.pdbqt
wrote rigid file: fixed_rigid.pdbqt
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> ligcovalent:A:CYS229 with 28 MolKit.molecule.Atom]
calling setAutoFlexFields with  ligcovalent:A:CYS229
in setAutoFlexFields with  ligcovalent:A:CYS229
len(rotatables)= 8
returning res.torscount= 7
res.root= CA
ntors= 7
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= ligcovalent_flex.pdbqt
res_total= 7
in writeResidue with  ligcovalent:A:CYS229
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS229:N, <Atom instance> ligcovalent:A:CYS229:CA)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS229:CA, <Atom instance> ligcovalent:A:CYS229:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS229:CA, <Atom instance> ligcovalent:A:CYS229:C)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3
 currently queue= CB - SG ,
CA : CB : queue= [(<Atom instance> ligcovalent:A:CYS229:CB, <Atom instance> ligcovalent:A:CYS229:SG)]
 processing queue entry:  CB - SG
in wBF with fromAtom= CB + startAtom= SG startAtom.used= 0
wBF: wrote  SG
self.outatom_counter= 4
 currently queue= SG - CX ,
CB : SG : queue= [(<Atom instance> ligcovalent:A:CYS229:SG, <Atom instance> ligcovalent:A:CYS229:CX)]
 processing queue entry:  SG - CX
in wBF with fromAtom= SG + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 5
 currently queue= CX - CX ,
SG : CX : queue= [(<Atom instance> ligcovalent:A:CYS229:CX, <Atom instance> ligcovalent:A:CYS229:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 6
 currently queue= CX - CX , CX - CX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS229:CX, <Atom instance> ligcovalent:A:CYS229:CX), (<Atom instance> ligcovalent:A:CYS229:CX, <Atom instance> ligcovalent:A:CYS229:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 7


writing and calling wL with nA= OX - 7
wBF2: wrote  OX
!!!2:calling wL


in writeLevel with  OX  outatom_counter= 8
len( OX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []


writing and calling wL with nA= NX - 8
wBF2: wrote  NX
!!!2:calling wL


in writeLevel with  NX  outatom_counter= 9
len( NX ).bonds= 3
skipping b= NX - CX
processing b= NX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
processing b= CX - NX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 11
len( CX ).bonds= 2
skipping b= NX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 12
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 13
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 14
len( CX ).bonds= 3
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 15
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 16
len( CX ).bonds= 3
processing b= OX - CX  activeTors= 1
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
CX wL: queue= [(<Atom instance> ligcovalent:A:CYS229:CX, <Atom instance> ligcovalent:A:CYS229:OX)]
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 17
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 18
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS229:CX, <Atom instance> ligcovalent:A:CYS229:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS229:CX, <Atom instance> ligcovalent:A:CYS229:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS229:CX, <Atom instance> ligcovalent:A:CYS229:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS229:CX, <Atom instance> ligcovalent:A:CYS229:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS229:CX, <Atom instance> ligcovalent:A:CYS229:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS229:CX, <Atom instance> ligcovalent:A:CYS229:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS229:CX, <Atom instance> ligcovalent:A:CYS229:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS229:CX, <Atom instance> ligcovalent:A:CYS229:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS229:CX, <Atom instance> ligcovalent:A:CYS229:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS229:CX, <Atom instance> ligcovalent:A:CYS229:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS229:CX, <Atom instance> ligcovalent:A:CYS229:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS229:CX, <Atom instance> ligcovalent:A:CYS229:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 18
len( CX ).bonds= 3
skipping b= CX - CX
skipping b= CX - NX
skipping b= CX - CX
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS229:CX, <Atom instance> ligcovalent:A:CYS229:OX)]
newQ= [(<Atom instance> ligcovalent:A:CYS229:CX, <Atom instance> ligcovalent:A:CYS229:OX)]
@@@@len(newq)= 1
queue= [(<Atom instance> ligcovalent:A:CYS229:CX, <Atom instance> ligcovalent:A:CYS229:OX)]
 currently queue= CX - OX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS229:CX, <Atom instance> ligcovalent:A:CYS229:OX)]
 processing queue entry:  CX - OX
in wBF with fromAtom= CX + startAtom= OX startAtom.used= 0
wBF: wrote  OX
self.outatom_counter= 19


writing and calling wL with nA= CX - 19
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 20
len( CX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []
 currently queue=
CX : OX : queue= []
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 21


writing and calling wL with nA= CX - 21
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 22
len( CX ).bonds= 1
skipping b= CX - CX
returning queue= []
newQ= []
 currently queue=
CX : CX : queue= []
wrote flex file ligcovalent_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: ligcovalent_flex.pdbqt
wrote rigid file: ligcovalent_rigid.pdbqt
4---done
setting PYTHONHOME environment
setting PYTHONHOME environment
!unable to use ligand.TORSDOF! torsdof always set to ligand.ndihe= 7
5---done
 concat 10 log files... done.
Job finished, good luck!
rm: 无法删除'chimera.com': 没有那个文件或目录
rm: 无法删除'tmp.mol2': 没有那个文件或目录
Done
Processing residue A:CYS146
[start] output filename is: ligcovalent_single.pdb
CHAIN A
Writing output filename: ligcovalent_single.pdb
1---ligcovalent.pdb prepared...
1.5--done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= fixed  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  fixed
merged  0  nonpolar hydrogens
end of base class init
using std outputfilename  fixed.pdbqt
wrote  fixed  to  fixed.pdbqt
2---done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= ligcovalent  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  ligcovalent
merged  21  nonpolar hydrogens
end of base class init
using std outputfilename  ligcovalent.pdbqt
wrote  ligcovalent  to  ligcovalent.pdbqt
3---done
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> fixed:A:CYS146 with 6 MolKit.molecule.Atom]
calling setAutoFlexFields with  fixed:A:CYS146
in setAutoFlexFields with  fixed:A:CYS146
len(rotatables)= 1
returning res.torscount= 1
res.root= CA
ntors= 1
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= fixed_flex.pdbqt
res_total= 1
in writeResidue with  fixed:A:CYS146
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS146:N, <Atom instance> fixed:A:CYS146:CA)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS146:CA, <Atom instance> fixed:A:CYS146:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS146:CA, <Atom instance> fixed:A:CYS146:CB)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3


writing and calling wL with nA= SG - 3
wBF2: wrote  SG
!!!2:calling wL


in writeLevel with  SG  outatom_counter= 4
len( SG ).bonds= 1
skipping b= CB - SG
returning queue= []
newQ= []
 currently queue=
CA : CB : queue= []
wrote flex file fixed_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: fixed_flex.pdbqt
wrote rigid file: fixed_rigid.pdbqt
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> ligcovalent:A:CYS146 with 28 MolKit.molecule.Atom]
calling setAutoFlexFields with  ligcovalent:A:CYS146
in setAutoFlexFields with  ligcovalent:A:CYS146
len(rotatables)= 8
returning res.torscount= 7
res.root= CA
ntors= 7
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= ligcovalent_flex.pdbqt
res_total= 7
in writeResidue with  ligcovalent:A:CYS146
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS146:CA, <Atom instance> ligcovalent:A:CYS146:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS146:CA, <Atom instance> ligcovalent:A:CYS146:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS146:N, <Atom instance> ligcovalent:A:CYS146:CA)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3
 currently queue= CB - SG ,
CA : CB : queue= [(<Atom instance> ligcovalent:A:CYS146:CB, <Atom instance> ligcovalent:A:CYS146:SG)]
 processing queue entry:  CB - SG
in wBF with fromAtom= CB + startAtom= SG startAtom.used= 0
wBF: wrote  SG
self.outatom_counter= 4
 currently queue= SG - CX ,
CB : SG : queue= [(<Atom instance> ligcovalent:A:CYS146:SG, <Atom instance> ligcovalent:A:CYS146:CX)]
 processing queue entry:  SG - CX
in wBF with fromAtom= SG + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 5
 currently queue= CX - CX ,
SG : CX : queue= [(<Atom instance> ligcovalent:A:CYS146:CX, <Atom instance> ligcovalent:A:CYS146:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 6
 currently queue= CX - CX , CX - CX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS146:CX, <Atom instance> ligcovalent:A:CYS146:CX), (<Atom instance> ligcovalent:A:CYS146:CX, <Atom instance> ligcovalent:A:CYS146:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 7


writing and calling wL with nA= OX - 7
wBF2: wrote  OX
!!!2:calling wL


in writeLevel with  OX  outatom_counter= 8
len( OX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []


writing and calling wL with nA= NX - 8
wBF2: wrote  NX
!!!2:calling wL


in writeLevel with  NX  outatom_counter= 9
len( NX ).bonds= 3
skipping b= NX - CX
processing b= NX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
processing b= CX - NX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 11
len( CX ).bonds= 2
skipping b= NX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 12
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 13
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 14
len( CX ).bonds= 3
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 15
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 16
len( CX ).bonds= 3
processing b= OX - CX  activeTors= 1
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
CX wL: queue= [(<Atom instance> ligcovalent:A:CYS146:CX, <Atom instance> ligcovalent:A:CYS146:OX)]
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 17
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 18
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS146:CX, <Atom instance> ligcovalent:A:CYS146:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS146:CX, <Atom instance> ligcovalent:A:CYS146:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS146:CX, <Atom instance> ligcovalent:A:CYS146:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS146:CX, <Atom instance> ligcovalent:A:CYS146:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS146:CX, <Atom instance> ligcovalent:A:CYS146:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS146:CX, <Atom instance> ligcovalent:A:CYS146:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS146:CX, <Atom instance> ligcovalent:A:CYS146:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS146:CX, <Atom instance> ligcovalent:A:CYS146:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS146:CX, <Atom instance> ligcovalent:A:CYS146:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS146:CX, <Atom instance> ligcovalent:A:CYS146:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS146:CX, <Atom instance> ligcovalent:A:CYS146:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS146:CX, <Atom instance> ligcovalent:A:CYS146:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 18
len( CX ).bonds= 3
skipping b= CX - CX
skipping b= CX - CX
skipping b= CX - NX
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS146:CX, <Atom instance> ligcovalent:A:CYS146:OX)]
newQ= [(<Atom instance> ligcovalent:A:CYS146:CX, <Atom instance> ligcovalent:A:CYS146:OX)]
@@@@len(newq)= 1
queue= [(<Atom instance> ligcovalent:A:CYS146:CX, <Atom instance> ligcovalent:A:CYS146:OX)]
 currently queue= CX - OX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS146:CX, <Atom instance> ligcovalent:A:CYS146:OX)]
 processing queue entry:  CX - OX
in wBF with fromAtom= CX + startAtom= OX startAtom.used= 0
wBF: wrote  OX
self.outatom_counter= 19


writing and calling wL with nA= CX - 19
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 20
len( CX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []
 currently queue=
CX : OX : queue= []
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 21


writing and calling wL with nA= CX - 21
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 22
len( CX ).bonds= 1
skipping b= CX - CX
returning queue= []
newQ= []
 currently queue=
CX : CX : queue= []
wrote flex file ligcovalent_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: ligcovalent_flex.pdbqt
wrote rigid file: ligcovalent_rigid.pdbqt
4---done
setting PYTHONHOME environment
setting PYTHONHOME environment
!unable to use ligand.TORSDOF! torsdof always set to ligand.ndihe= 7
5---done
 concat 10 log files... done.
Job finished, good luck!
rm: 无法删除'chimera.com': 没有那个文件或目录
rm: 无法删除'tmp.mol2': 没有那个文件或目录
Done
Processing residue A:CYS52
[start] output filename is: ligcovalent_single.pdb
CHAIN A
Writing output filename: ligcovalent_single.pdb
1---ligcovalent.pdb prepared...
1.5--done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= fixed  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  fixed
merged  0  nonpolar hydrogens
end of base class init
using std outputfilename  fixed.pdbqt
wrote  fixed  to  fixed.pdbqt
2---done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= ligcovalent  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  ligcovalent
merged  21  nonpolar hydrogens
end of base class init
using std outputfilename  ligcovalent.pdbqt
wrote  ligcovalent  to  ligcovalent.pdbqt
3---done
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> fixed:A:CYS52 with 6 MolKit.molecule.Atom]
calling setAutoFlexFields with  fixed:A:CYS52
in setAutoFlexFields with  fixed:A:CYS52
len(rotatables)= 1
returning res.torscount= 1
res.root= CA
ntors= 1
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= fixed_flex.pdbqt
res_total= 1
in writeResidue with  fixed:A:CYS52
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS52:CA, <Atom instance> fixed:A:CYS52:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS52:CA, <Atom instance> fixed:A:CYS52:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS52:N, <Atom instance> fixed:A:CYS52:CA)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3


writing and calling wL with nA= SG - 3
wBF2: wrote  SG
!!!2:calling wL


in writeLevel with  SG  outatom_counter= 4
len( SG ).bonds= 1
skipping b= CB - SG
returning queue= []
newQ= []
 currently queue=
CA : CB : queue= []
wrote flex file fixed_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: fixed_flex.pdbqt
wrote rigid file: fixed_rigid.pdbqt
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> ligcovalent:A:CYS52 with 28 MolKit.molecule.Atom]
calling setAutoFlexFields with  ligcovalent:A:CYS52
in setAutoFlexFields with  ligcovalent:A:CYS52
len(rotatables)= 8
returning res.torscount= 7
res.root= CA
ntors= 7
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= ligcovalent_flex.pdbqt
res_total= 7
in writeResidue with  ligcovalent:A:CYS52
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS52:N, <Atom instance> ligcovalent:A:CYS52:CA)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS52:CA, <Atom instance> ligcovalent:A:CYS52:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS52:CA, <Atom instance> ligcovalent:A:CYS52:CB)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3
 currently queue= CB - SG ,
CA : CB : queue= [(<Atom instance> ligcovalent:A:CYS52:CB, <Atom instance> ligcovalent:A:CYS52:SG)]
 processing queue entry:  CB - SG
in wBF with fromAtom= CB + startAtom= SG startAtom.used= 0
wBF: wrote  SG
self.outatom_counter= 4
 currently queue= SG - CX ,
CB : SG : queue= [(<Atom instance> ligcovalent:A:CYS52:SG, <Atom instance> ligcovalent:A:CYS52:CX)]
 processing queue entry:  SG - CX
in wBF with fromAtom= SG + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 5
 currently queue= CX - CX ,
SG : CX : queue= [(<Atom instance> ligcovalent:A:CYS52:CX, <Atom instance> ligcovalent:A:CYS52:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 6
 currently queue= CX - CX , CX - CX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS52:CX, <Atom instance> ligcovalent:A:CYS52:CX), (<Atom instance> ligcovalent:A:CYS52:CX, <Atom instance> ligcovalent:A:CYS52:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 7


writing and calling wL with nA= OX - 7
wBF2: wrote  OX
!!!2:calling wL


in writeLevel with  OX  outatom_counter= 8
len( OX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []


writing and calling wL with nA= NX - 8
wBF2: wrote  NX
!!!2:calling wL


in writeLevel with  NX  outatom_counter= 9
len( NX ).bonds= 3
processing b= CX - NX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
processing b= NX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= NX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 11
len( CX ).bonds= 3
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - NX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 13
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 14
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 15
len( CX ).bonds= 3
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
processing b= OX - CX  activeTors= 1
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
CX wL: queue= [(<Atom instance> ligcovalent:A:CYS52:CX, <Atom instance> ligcovalent:A:CYS52:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 16
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS52:CX, <Atom instance> ligcovalent:A:CYS52:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS52:CX, <Atom instance> ligcovalent:A:CYS52:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS52:CX, <Atom instance> ligcovalent:A:CYS52:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS52:CX, <Atom instance> ligcovalent:A:CYS52:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS52:CX, <Atom instance> ligcovalent:A:CYS52:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS52:CX, <Atom instance> ligcovalent:A:CYS52:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 16
len( CX ).bonds= 3
skipping b= CX - CX
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 17
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 18
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= []
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS52:CX, <Atom instance> ligcovalent:A:CYS52:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS52:CX, <Atom instance> ligcovalent:A:CYS52:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 18
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= NX - CX
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS52:CX, <Atom instance> ligcovalent:A:CYS52:OX)]
newQ= [(<Atom instance> ligcovalent:A:CYS52:CX, <Atom instance> ligcovalent:A:CYS52:OX)]
@@@@len(newq)= 1
queue= [(<Atom instance> ligcovalent:A:CYS52:CX, <Atom instance> ligcovalent:A:CYS52:OX)]
 currently queue= CX - OX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS52:CX, <Atom instance> ligcovalent:A:CYS52:OX)]
 processing queue entry:  CX - OX
in wBF with fromAtom= CX + startAtom= OX startAtom.used= 0
wBF: wrote  OX
self.outatom_counter= 19


writing and calling wL with nA= CX - 19
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 20
len( CX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []
 currently queue=
CX : OX : queue= []
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 21


writing and calling wL with nA= CX - 21
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 22
len( CX ).bonds= 1
skipping b= CX - CX
returning queue= []
newQ= []
 currently queue=
CX : CX : queue= []
wrote flex file ligcovalent_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: ligcovalent_flex.pdbqt
wrote rigid file: ligcovalent_rigid.pdbqt
4---done
setting PYTHONHOME environment
setting PYTHONHOME environment
!unable to use ligand.TORSDOF! torsdof always set to ligand.ndihe= 7
5---done
 concat 10 log files... done.
Job finished, good luck!
rm: 无法删除'chimera.com': 没有那个文件或目录
rm: 无法删除'tmp.mol2': 没有那个文件或目录
Done
Processing residue A:CYS72
[start] output filename is: ligcovalent_single.pdb
CHAIN A
Writing output filename: ligcovalent_single.pdb
1---ligcovalent.pdb prepared...
1.5--done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= fixed  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  fixed
merged  0  nonpolar hydrogens
end of base class init
using std outputfilename  fixed.pdbqt
wrote  fixed  to  fixed.pdbqt
2---done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= ligcovalent  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  ligcovalent
merged  21  nonpolar hydrogens
end of base class init
using std outputfilename  ligcovalent.pdbqt
wrote  ligcovalent  to  ligcovalent.pdbqt
3---done
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> fixed:A:CYS72 with 6 MolKit.molecule.Atom]
calling setAutoFlexFields with  fixed:A:CYS72
in setAutoFlexFields with  fixed:A:CYS72
len(rotatables)= 1
returning res.torscount= 1
res.root= CA
ntors= 1
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= fixed_flex.pdbqt
res_total= 1
in writeResidue with  fixed:A:CYS72
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS72:CA, <Atom instance> fixed:A:CYS72:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS72:CA, <Atom instance> fixed:A:CYS72:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS72:N, <Atom instance> fixed:A:CYS72:CA)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3


writing and calling wL with nA= SG - 3
wBF2: wrote  SG
!!!2:calling wL


in writeLevel with  SG  outatom_counter= 4
len( SG ).bonds= 1
skipping b= CB - SG
returning queue= []
newQ= []
 currently queue=
CA : CB : queue= []
wrote flex file fixed_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: fixed_flex.pdbqt
wrote rigid file: fixed_rigid.pdbqt
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> ligcovalent:A:CYS72 with 28 MolKit.molecule.Atom]
calling setAutoFlexFields with  ligcovalent:A:CYS72
in setAutoFlexFields with  ligcovalent:A:CYS72
len(rotatables)= 8
returning res.torscount= 7
res.root= CA
ntors= 7
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= ligcovalent_flex.pdbqt
res_total= 7
in writeResidue with  ligcovalent:A:CYS72
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS72:N, <Atom instance> ligcovalent:A:CYS72:CA)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS72:CA, <Atom instance> ligcovalent:A:CYS72:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS72:CA, <Atom instance> ligcovalent:A:CYS72:C)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3
 currently queue= CB - SG ,
CA : CB : queue= [(<Atom instance> ligcovalent:A:CYS72:CB, <Atom instance> ligcovalent:A:CYS72:SG)]
 processing queue entry:  CB - SG
in wBF with fromAtom= CB + startAtom= SG startAtom.used= 0
wBF: wrote  SG
self.outatom_counter= 4
 currently queue= SG - CX ,
CB : SG : queue= [(<Atom instance> ligcovalent:A:CYS72:SG, <Atom instance> ligcovalent:A:CYS72:CX)]
 processing queue entry:  SG - CX
in wBF with fromAtom= SG + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 5
 currently queue= CX - CX ,
SG : CX : queue= [(<Atom instance> ligcovalent:A:CYS72:CX, <Atom instance> ligcovalent:A:CYS72:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 6
 currently queue= CX - CX , CX - CX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS72:CX, <Atom instance> ligcovalent:A:CYS72:CX), (<Atom instance> ligcovalent:A:CYS72:CX, <Atom instance> ligcovalent:A:CYS72:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 7


writing and calling wL with nA= CX - 7
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 8
len( CX ).bonds= 1
skipping b= CX - CX
returning queue= []
newQ= []
 currently queue=
CX : CX : queue= []
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 9


writing and calling wL with nA= OX - 9
wBF2: wrote  OX
!!!2:calling wL


in writeLevel with  OX  outatom_counter= 10
len( OX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []


writing and calling wL with nA= NX - 10
wBF2: wrote  NX
!!!2:calling wL


in writeLevel with  NX  outatom_counter= 11
len( NX ).bonds= 3
processing b= CX - NX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
processing b= NX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= NX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 13
len( CX ).bonds= 3
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - NX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 15
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 16
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 17
len( CX ).bonds= 3
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
processing b= OX - CX  activeTors= 1
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
CX wL: queue= [(<Atom instance> ligcovalent:A:CYS72:CX, <Atom instance> ligcovalent:A:CYS72:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 18
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS72:CX, <Atom instance> ligcovalent:A:CYS72:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS72:CX, <Atom instance> ligcovalent:A:CYS72:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS72:CX, <Atom instance> ligcovalent:A:CYS72:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS72:CX, <Atom instance> ligcovalent:A:CYS72:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS72:CX, <Atom instance> ligcovalent:A:CYS72:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS72:CX, <Atom instance> ligcovalent:A:CYS72:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 18
len( CX ).bonds= 3
skipping b= CX - CX
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 19
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 20
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= []
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS72:CX, <Atom instance> ligcovalent:A:CYS72:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS72:CX, <Atom instance> ligcovalent:A:CYS72:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 20
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= NX - CX
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS72:CX, <Atom instance> ligcovalent:A:CYS72:OX)]
newQ= [(<Atom instance> ligcovalent:A:CYS72:CX, <Atom instance> ligcovalent:A:CYS72:OX)]
@@@@len(newq)= 1
queue= [(<Atom instance> ligcovalent:A:CYS72:CX, <Atom instance> ligcovalent:A:CYS72:OX)]
 currently queue= CX - OX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS72:CX, <Atom instance> ligcovalent:A:CYS72:OX)]
 processing queue entry:  CX - OX
in wBF with fromAtom= CX + startAtom= OX startAtom.used= 0
wBF: wrote  OX
self.outatom_counter= 21


writing and calling wL with nA= CX - 21
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 22
len( CX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []
 currently queue=
CX : OX : queue= []
wrote flex file ligcovalent_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: ligcovalent_flex.pdbqt
wrote rigid file: ligcovalent_rigid.pdbqt
4---done
setting PYTHONHOME environment
setting PYTHONHOME environment
!unable to use ligand.TORSDOF! torsdof always set to ligand.ndihe= 7
5---done
 concat 10 log files... done.
Job finished, good luck!
rm: 无法删除'chimera.com': 没有那个文件或目录
rm: 无法删除'tmp.mol2': 没有那个文件或目录
Done
Processing residue A:CYS194
[start] output filename is: ligcovalent_single.pdb
CHAIN A
Writing output filename: ligcovalent_single.pdb
1---ligcovalent.pdb prepared...
1.5--done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= fixed  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  fixed
merged  0  nonpolar hydrogens
end of base class init
using std outputfilename  fixed.pdbqt
wrote  fixed  to  fixed.pdbqt
2---done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= ligcovalent  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  ligcovalent
merged  21  nonpolar hydrogens
end of base class init
using std outputfilename  ligcovalent.pdbqt
wrote  ligcovalent  to  ligcovalent.pdbqt
3---done
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> fixed:A:CYS194 with 6 MolKit.molecule.Atom]
calling setAutoFlexFields with  fixed:A:CYS194
in setAutoFlexFields with  fixed:A:CYS194
len(rotatables)= 1
returning res.torscount= 1
res.root= CA
ntors= 1
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= fixed_flex.pdbqt
res_total= 1
in writeResidue with  fixed:A:CYS194
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS194:CA, <Atom instance> fixed:A:CYS194:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS194:CA, <Atom instance> fixed:A:CYS194:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS194:N, <Atom instance> fixed:A:CYS194:CA)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3


writing and calling wL with nA= SG - 3
wBF2: wrote  SG
!!!2:calling wL


in writeLevel with  SG  outatom_counter= 4
len( SG ).bonds= 1
skipping b= CB - SG
returning queue= []
newQ= []
 currently queue=
CA : CB : queue= []
wrote flex file fixed_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: fixed_flex.pdbqt
wrote rigid file: fixed_rigid.pdbqt
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> ligcovalent:A:CYS194 with 28 MolKit.molecule.Atom]
calling setAutoFlexFields with  ligcovalent:A:CYS194
in setAutoFlexFields with  ligcovalent:A:CYS194
len(rotatables)= 8
returning res.torscount= 7
res.root= CA
ntors= 7
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= ligcovalent_flex.pdbqt
res_total= 7
in writeResidue with  ligcovalent:A:CYS194
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS194:N, <Atom instance> ligcovalent:A:CYS194:CA)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS194:CA, <Atom instance> ligcovalent:A:CYS194:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS194:CA, <Atom instance> ligcovalent:A:CYS194:CB)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3
 currently queue= CB - SG ,
CA : CB : queue= [(<Atom instance> ligcovalent:A:CYS194:CB, <Atom instance> ligcovalent:A:CYS194:SG)]
 processing queue entry:  CB - SG
in wBF with fromAtom= CB + startAtom= SG startAtom.used= 0
wBF: wrote  SG
self.outatom_counter= 4
 currently queue= SG - CX ,
CB : SG : queue= [(<Atom instance> ligcovalent:A:CYS194:SG, <Atom instance> ligcovalent:A:CYS194:CX)]
 processing queue entry:  SG - CX
in wBF with fromAtom= SG + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 5
 currently queue= CX - CX ,
SG : CX : queue= [(<Atom instance> ligcovalent:A:CYS194:CX, <Atom instance> ligcovalent:A:CYS194:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 6
 currently queue= CX - CX , CX - CX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS194:CX, <Atom instance> ligcovalent:A:CYS194:CX), (<Atom instance> ligcovalent:A:CYS194:CX, <Atom instance> ligcovalent:A:CYS194:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 7


writing and calling wL with nA= CX - 7
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 8
len( CX ).bonds= 1
skipping b= CX - CX
returning queue= []
newQ= []
 currently queue=
CX : CX : queue= []
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 9


writing and calling wL with nA= NX - 9
wBF2: wrote  NX
!!!2:calling wL


in writeLevel with  NX  outatom_counter= 10
len( NX ).bonds= 3
processing b= NX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= NX - CX
processing b= CX - NX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 12
len( CX ).bonds= 2
skipping b= NX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 13
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 14
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 15
len( CX ).bonds= 3
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 16
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 17
len( CX ).bonds= 3
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
processing b= OX - CX  activeTors= 1
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
CX wL: queue= [(<Atom instance> ligcovalent:A:CYS194:CX, <Atom instance> ligcovalent:A:CYS194:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 18
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 19
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS194:CX, <Atom instance> ligcovalent:A:CYS194:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS194:CX, <Atom instance> ligcovalent:A:CYS194:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS194:CX, <Atom instance> ligcovalent:A:CYS194:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS194:CX, <Atom instance> ligcovalent:A:CYS194:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS194:CX, <Atom instance> ligcovalent:A:CYS194:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS194:CX, <Atom instance> ligcovalent:A:CYS194:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS194:CX, <Atom instance> ligcovalent:A:CYS194:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS194:CX, <Atom instance> ligcovalent:A:CYS194:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS194:CX, <Atom instance> ligcovalent:A:CYS194:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS194:CX, <Atom instance> ligcovalent:A:CYS194:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS194:CX, <Atom instance> ligcovalent:A:CYS194:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS194:CX, <Atom instance> ligcovalent:A:CYS194:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 19
len( CX ).bonds= 3
skipping b= CX - CX
skipping b= CX - NX
skipping b= CX - CX
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS194:CX, <Atom instance> ligcovalent:A:CYS194:OX)]
newQ= [(<Atom instance> ligcovalent:A:CYS194:CX, <Atom instance> ligcovalent:A:CYS194:OX)]
@@@@len(newq)= 1
queue= [(<Atom instance> ligcovalent:A:CYS194:CX, <Atom instance> ligcovalent:A:CYS194:OX)]


writing and calling wL with nA= OX - 19
wBF2: wrote  OX
!!!2:calling wL


in writeLevel with  OX  outatom_counter= 20
len( OX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []
 currently queue= CX - OX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS194:CX, <Atom instance> ligcovalent:A:CYS194:OX)]
 processing queue entry:  CX - OX
in wBF with fromAtom= CX + startAtom= OX startAtom.used= 0
wBF: wrote  OX
self.outatom_counter= 21


writing and calling wL with nA= CX - 21
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 22
len( CX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []
 currently queue=
CX : OX : queue= []
wrote flex file ligcovalent_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: ligcovalent_flex.pdbqt
wrote rigid file: ligcovalent_rigid.pdbqt
4---done
setting PYTHONHOME environment
setting PYTHONHOME environment
!unable to use ligand.TORSDOF! torsdof always set to ligand.ndihe= 7
5---done
 concat 10 log files... done.
Job finished, good luck!
rm: 无法删除'chimera.com': 没有那个文件或目录
rm: 无法删除'tmp.mol2': 没有那个文件或目录
Done
Processing residue A:CYS947
[start] output filename is: ligcovalent_single.pdb
CHAIN A
Writing output filename: ligcovalent_single.pdb
1---ligcovalent.pdb prepared...
1.5--done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= fixed  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  fixed
merged  0  nonpolar hydrogens
end of base class init
using std outputfilename  fixed.pdbqt
wrote  fixed  to  fixed.pdbqt
2---done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= ligcovalent  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  ligcovalent
merged  21  nonpolar hydrogens
end of base class init
using std outputfilename  ligcovalent.pdbqt
wrote  ligcovalent  to  ligcovalent.pdbqt
3---done
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> fixed:A:CYS947 with 6 MolKit.molecule.Atom]
calling setAutoFlexFields with  fixed:A:CYS947
in setAutoFlexFields with  fixed:A:CYS947
len(rotatables)= 1
returning res.torscount= 1
res.root= CA
ntors= 1
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= fixed_flex.pdbqt
res_total= 1
in writeResidue with  fixed:A:CYS947
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS947:CA, <Atom instance> fixed:A:CYS947:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS947:CA, <Atom instance> fixed:A:CYS947:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS947:N, <Atom instance> fixed:A:CYS947:CA)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3


writing and calling wL with nA= SG - 3
wBF2: wrote  SG
!!!2:calling wL


in writeLevel with  SG  outatom_counter= 4
len( SG ).bonds= 1
skipping b= CB - SG
returning queue= []
newQ= []
 currently queue=
CA : CB : queue= []
wrote flex file fixed_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: fixed_flex.pdbqt
wrote rigid file: fixed_rigid.pdbqt
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> ligcovalent:A:CYS947 with 28 MolKit.molecule.Atom]
calling setAutoFlexFields with  ligcovalent:A:CYS947
in setAutoFlexFields with  ligcovalent:A:CYS947
len(rotatables)= 8
returning res.torscount= 7
res.root= CA
ntors= 7
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= ligcovalent_flex.pdbqt
res_total= 7
in writeResidue with  ligcovalent:A:CYS947
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS947:N, <Atom instance> ligcovalent:A:CYS947:CA)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS947:CA, <Atom instance> ligcovalent:A:CYS947:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS947:CA, <Atom instance> ligcovalent:A:CYS947:C)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3
 currently queue= CB - SG ,
CA : CB : queue= [(<Atom instance> ligcovalent:A:CYS947:CB, <Atom instance> ligcovalent:A:CYS947:SG)]
 processing queue entry:  CB - SG
in wBF with fromAtom= CB + startAtom= SG startAtom.used= 0
wBF: wrote  SG
self.outatom_counter= 4
 currently queue= SG - CX ,
CB : SG : queue= [(<Atom instance> ligcovalent:A:CYS947:SG, <Atom instance> ligcovalent:A:CYS947:CX)]
 processing queue entry:  SG - CX
in wBF with fromAtom= SG + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 5
 currently queue= CX - CX ,
SG : CX : queue= [(<Atom instance> ligcovalent:A:CYS947:CX, <Atom instance> ligcovalent:A:CYS947:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 6
 currently queue= CX - CX , CX - CX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS947:CX, <Atom instance> ligcovalent:A:CYS947:CX), (<Atom instance> ligcovalent:A:CYS947:CX, <Atom instance> ligcovalent:A:CYS947:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 7


writing and calling wL with nA= CX - 7
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 8
len( CX ).bonds= 1
skipping b= CX - CX
returning queue= []
newQ= []
 currently queue=
CX : CX : queue= []
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 9


writing and calling wL with nA= NX - 9
wBF2: wrote  NX
!!!2:calling wL


in writeLevel with  NX  outatom_counter= 10
len( NX ).bonds= 3
processing b= NX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= NX - CX
processing b= CX - NX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 12
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= NX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 13
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 14
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 15
len( CX ).bonds= 3
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 16
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 17
len( CX ).bonds= 3
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
processing b= OX - CX  activeTors= 1
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
CX wL: queue= [(<Atom instance> ligcovalent:A:CYS947:CX, <Atom instance> ligcovalent:A:CYS947:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 18
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 19
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS947:CX, <Atom instance> ligcovalent:A:CYS947:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS947:CX, <Atom instance> ligcovalent:A:CYS947:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS947:CX, <Atom instance> ligcovalent:A:CYS947:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS947:CX, <Atom instance> ligcovalent:A:CYS947:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS947:CX, <Atom instance> ligcovalent:A:CYS947:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS947:CX, <Atom instance> ligcovalent:A:CYS947:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS947:CX, <Atom instance> ligcovalent:A:CYS947:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS947:CX, <Atom instance> ligcovalent:A:CYS947:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS947:CX, <Atom instance> ligcovalent:A:CYS947:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS947:CX, <Atom instance> ligcovalent:A:CYS947:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS947:CX, <Atom instance> ligcovalent:A:CYS947:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS947:CX, <Atom instance> ligcovalent:A:CYS947:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 19
len( CX ).bonds= 3
skipping b= CX - NX
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS947:CX, <Atom instance> ligcovalent:A:CYS947:OX)]
newQ= [(<Atom instance> ligcovalent:A:CYS947:CX, <Atom instance> ligcovalent:A:CYS947:OX)]
@@@@len(newq)= 1
queue= [(<Atom instance> ligcovalent:A:CYS947:CX, <Atom instance> ligcovalent:A:CYS947:OX)]


writing and calling wL with nA= OX - 19
wBF2: wrote  OX
!!!2:calling wL


in writeLevel with  OX  outatom_counter= 20
len( OX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []
 currently queue= CX - OX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS947:CX, <Atom instance> ligcovalent:A:CYS947:OX)]
 processing queue entry:  CX - OX
in wBF with fromAtom= CX + startAtom= OX startAtom.used= 0
wBF: wrote  OX
self.outatom_counter= 21


writing and calling wL with nA= CX - 21
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 22
len( CX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []
 currently queue=
CX : OX : queue= []
wrote flex file ligcovalent_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: ligcovalent_flex.pdbqt
wrote rigid file: ligcovalent_rigid.pdbqt
4---done
setting PYTHONHOME environment
setting PYTHONHOME environment
!unable to use ligand.TORSDOF! torsdof always set to ligand.ndihe= 7
5---done
 concat 10 log files... done.
Job finished, good luck!
rm: 无法删除'chimera.com': 没有那个文件或目录
rm: 无法删除'tmp.mol2': 没有那个文件或目录
Done
Processing residue A:CYS1534
[start] output filename is: ligcovalent_single.pdb
CHAIN A
Writing output filename: ligcovalent_single.pdb
1---ligcovalent.pdb prepared...
1.5--done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= fixed  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  fixed
merged  0  nonpolar hydrogens
end of base class init
using std outputfilename  fixed.pdbqt
wrote  fixed  to  fixed.pdbqt
2---done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= ligcovalent  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  ligcovalent
merged  21  nonpolar hydrogens
end of base class init
using std outputfilename  ligcovalent.pdbqt
wrote  ligcovalent  to  ligcovalent.pdbqt
3---done
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> fixed:A:CYS1534 with 6 MolKit.molecule.Atom]
calling setAutoFlexFields with  fixed:A:CYS1534
in setAutoFlexFields with  fixed:A:CYS1534
len(rotatables)= 1
returning res.torscount= 1
res.root= CA
ntors= 1
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= fixed_flex.pdbqt
res_total= 1
in writeResidue with  fixed:A:CYS1534
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS1534:CA, <Atom instance> fixed:A:CYS1534:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS1534:CA, <Atom instance> fixed:A:CYS1534:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS1534:N, <Atom instance> fixed:A:CYS1534:CA)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3


writing and calling wL with nA= SG - 3
wBF2: wrote  SG
!!!2:calling wL


in writeLevel with  SG  outatom_counter= 4
len( SG ).bonds= 1
skipping b= CB - SG
returning queue= []
newQ= []
 currently queue=
CA : CB : queue= []
wrote flex file fixed_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: fixed_flex.pdbqt
wrote rigid file: fixed_rigid.pdbqt
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> ligcovalent:A:CYS1534 with 28 MolKit.molecule.Atom]
calling setAutoFlexFields with  ligcovalent:A:CYS1534
in setAutoFlexFields with  ligcovalent:A:CYS1534
len(rotatables)= 8
returning res.torscount= 7
res.root= CA
ntors= 7
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= ligcovalent_flex.pdbqt
res_total= 7
in writeResidue with  ligcovalent:A:CYS1534
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS1534:CA, <Atom instance> ligcovalent:A:CYS1534:CB)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS1534:CA, <Atom instance> ligcovalent:A:CYS1534:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS1534:N, <Atom instance> ligcovalent:A:CYS1534:CA)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3
 currently queue= CB - SG ,
CA : CB : queue= [(<Atom instance> ligcovalent:A:CYS1534:CB, <Atom instance> ligcovalent:A:CYS1534:SG)]
 processing queue entry:  CB - SG
in wBF with fromAtom= CB + startAtom= SG startAtom.used= 0
wBF: wrote  SG
self.outatom_counter= 4
 currently queue= SG - CX ,
CB : SG : queue= [(<Atom instance> ligcovalent:A:CYS1534:SG, <Atom instance> ligcovalent:A:CYS1534:CX)]
 processing queue entry:  SG - CX
in wBF with fromAtom= SG + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 5
 currently queue= CX - CX ,
SG : CX : queue= [(<Atom instance> ligcovalent:A:CYS1534:CX, <Atom instance> ligcovalent:A:CYS1534:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 6
 currently queue= CX - CX , CX - CX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS1534:CX, <Atom instance> ligcovalent:A:CYS1534:CX), (<Atom instance> ligcovalent:A:CYS1534:CX, <Atom instance> ligcovalent:A:CYS1534:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 7


writing and calling wL with nA= OX - 7
wBF2: wrote  OX
!!!2:calling wL


in writeLevel with  OX  outatom_counter= 8
len( OX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []


writing and calling wL with nA= NX - 8
wBF2: wrote  NX
!!!2:calling wL


in writeLevel with  NX  outatom_counter= 9
len( NX ).bonds= 3
processing b= CX - NX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= NX - CX
processing b= NX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 11
len( CX ).bonds= 3
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - NX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 13
len( CX ).bonds= 2
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - CX
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 14
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 15
len( CX ).bonds= 3
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
processing b= OX - CX  activeTors= 1
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
CX wL: queue= [(<Atom instance> ligcovalent:A:CYS1534:CX, <Atom instance> ligcovalent:A:CYS1534:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 16
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS1534:CX, <Atom instance> ligcovalent:A:CYS1534:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS1534:CX, <Atom instance> ligcovalent:A:CYS1534:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS1534:CX, <Atom instance> ligcovalent:A:CYS1534:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS1534:CX, <Atom instance> ligcovalent:A:CYS1534:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS1534:CX, <Atom instance> ligcovalent:A:CYS1534:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS1534:CX, <Atom instance> ligcovalent:A:CYS1534:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 16
len( CX ).bonds= 3
skipping b= CX - CX
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 17
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 18
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= []
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS1534:CX, <Atom instance> ligcovalent:A:CYS1534:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS1534:CX, <Atom instance> ligcovalent:A:CYS1534:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 18
len( CX ).bonds= 2
skipping b= NX - CX
skipping b= CX - CX
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS1534:CX, <Atom instance> ligcovalent:A:CYS1534:OX)]
newQ= [(<Atom instance> ligcovalent:A:CYS1534:CX, <Atom instance> ligcovalent:A:CYS1534:OX)]
@@@@len(newq)= 1
queue= [(<Atom instance> ligcovalent:A:CYS1534:CX, <Atom instance> ligcovalent:A:CYS1534:OX)]
 currently queue= CX - OX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS1534:CX, <Atom instance> ligcovalent:A:CYS1534:OX)]
 processing queue entry:  CX - OX
in wBF with fromAtom= CX + startAtom= OX startAtom.used= 0
wBF: wrote  OX
self.outatom_counter= 19


writing and calling wL with nA= CX - 19
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 20
len( CX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []
 currently queue=
CX : OX : queue= []
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 21


writing and calling wL with nA= CX - 21
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 22
len( CX ).bonds= 1
skipping b= CX - CX
returning queue= []
newQ= []
 currently queue=
CX : CX : queue= []
wrote flex file ligcovalent_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: ligcovalent_flex.pdbqt
wrote rigid file: ligcovalent_rigid.pdbqt
4---done
setting PYTHONHOME environment
setting PYTHONHOME environment
!unable to use ligand.TORSDOF! torsdof always set to ligand.ndihe= 7
5---done
 concat 10 log files... done.
Job finished, good luck!
rm: 无法删除'chimera.com': 没有那个文件或目录
rm: 无法删除'tmp.mol2': 没有那个文件或目录
Done
Processing residue A:CYS79
[start] output filename is: ligcovalent_single.pdb
CHAIN A
Writing output filename: ligcovalent_single.pdb
1---ligcovalent.pdb prepared...
1.5--done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= fixed  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  fixed
merged  0  nonpolar hydrogens
end of base class init
using std outputfilename  fixed.pdbqt
wrote  fixed  to  fixed.pdbqt
2---done
setting PYTHONHOME environment
merged  []  lonepairs
charges_to_add= gasteiger
in addCharges:mol.name= ligcovalent  and charges_to_add= gasteiger
adding gasteiger charges to peptide
self.chargeType= gasteiger
added gasteigercharges to  ligcovalent
merged  21  nonpolar hydrogens
end of base class init
using std outputfilename  ligcovalent.pdbqt
wrote  ligcovalent  to  ligcovalent.pdbqt
3---done
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> fixed:A:CYS79 with 6 MolKit.molecule.Atom]
calling setAutoFlexFields with  fixed:A:CYS79
in setAutoFlexFields with  fixed:A:CYS79
len(rotatables)= 1
returning res.torscount= 1
res.root= CA
ntors= 1
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= fixed_flex.pdbqt
res_total= 1
in writeResidue with  fixed:A:CYS79
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS79:N, <Atom instance> fixed:A:CYS79:CA)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS79:CA, <Atom instance> fixed:A:CYS79:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> fixed:A:CYS79:CA, <Atom instance> fixed:A:CYS79:CB)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3


writing and calling wL with nA= SG - 3
wBF2: wrote  SG
!!!2:calling wL


in writeLevel with  SG  outatom_counter= 4
len( SG ).bonds= 1
skipping b= CB - SG
returning queue= []
newQ= []
 currently queue=
CA : CB : queue= []
wrote flex file fixed_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: fixed_flex.pdbqt
wrote rigid file: fixed_rigid.pdbqt
setting PYTHONHOME environment
about to process_residues:  [<Residue instance> ligcovalent:A:CYS79 with 28 MolKit.molecule.Atom]
calling setAutoFlexFields with  ligcovalent:A:CYS79
in setAutoFlexFields with  ligcovalent:A:CYS79
len(rotatables)= 8
returning res.torscount= 7
res.root= CA
ntors= 7
>>>>> DEBUG:A
in write_flex: len(flex_residues)= 1 ffn= ligcovalent_flex.pdbqt
res_total= 7
in writeResidue with  ligcovalent:A:CYS79
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS79:N, <Atom instance> ligcovalent:A:CYS79:CA)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS79:CA, <Atom instance> ligcovalent:A:CYS79:C)
<type 'instance'>
['__doc__', '__init__', '__module__', '__repr__', '_numberOfDeletedBonds', 'activeTors', 'atom1', 'atom2', 'bondOrder', 'children', 'computeDispVectors', 'full_name', 'getSecondVector', 'getShortestBranch', 'leaf', 'name', 'neighborAtom', 'origin', 'possibleTors', 'setClass', 'shared']
(<Atom instance> ligcovalent:A:CYS79:CA, <Atom instance> ligcovalent:A:CYS79:CB)
in wBF with fromAtom= CA + startAtom= CB startAtom.used= 0
wBF: wrote  CB
self.outatom_counter= 3
 currently queue= CB - SG ,
CA : CB : queue= [(<Atom instance> ligcovalent:A:CYS79:CB, <Atom instance> ligcovalent:A:CYS79:SG)]
 processing queue entry:  CB - SG
in wBF with fromAtom= CB + startAtom= SG startAtom.used= 0
wBF: wrote  SG
self.outatom_counter= 4
 currently queue= SG - CX ,
CB : SG : queue= [(<Atom instance> ligcovalent:A:CYS79:SG, <Atom instance> ligcovalent:A:CYS79:CX)]
 processing queue entry:  SG - CX
in wBF with fromAtom= SG + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 5
 currently queue= CX - CX ,
SG : CX : queue= [(<Atom instance> ligcovalent:A:CYS79:CX, <Atom instance> ligcovalent:A:CYS79:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 6
 currently queue= CX - CX , CX - CX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS79:CX, <Atom instance> ligcovalent:A:CYS79:CX), (<Atom instance> ligcovalent:A:CYS79:CX, <Atom instance> ligcovalent:A:CYS79:CX)]
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 7


writing and calling wL with nA= CX - 7
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 8
len( CX ).bonds= 1
skipping b= CX - CX
returning queue= []
newQ= []
 currently queue=
CX : CX : queue= []
 processing queue entry:  CX - CX
in wBF with fromAtom= CX + startAtom= CX startAtom.used= 0
wBF: wrote  CX
self.outatom_counter= 9


writing and calling wL with nA= NX - 9
wBF2: wrote  NX
!!!2:calling wL


in writeLevel with  NX  outatom_counter= 10
len( NX ).bonds= 3
processing b= CX - NX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= NX - CX
processing b= NX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 12
len( CX ).bonds= 3
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
skipping b= CX - NX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 14
len( CX ).bonds= 3
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 16
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 17
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= []
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 17
len( CX ).bonds= 2
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
writeLevel: wrote bonded atom named= CX a2.used= 0
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 18
len( CX ).bonds= 3
skipping b= CX - CX
processing b= CX - CX  activeTors= 0
atom1 in writtenAtoms= True
atom2 in writtenAtoms= False
writeLevel: wrote bonded atom named= CX a2.used= 0
processing b= OX - CX  activeTors= 1
atom1 in writtenAtoms= False
atom2 in writtenAtoms= True
CX wL: queue= [(<Atom instance> ligcovalent:A:CYS79:CX, <Atom instance> ligcovalent:A:CYS79:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 19
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS79:CX, <Atom instance> ligcovalent:A:CYS79:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS79:CX, <Atom instance> ligcovalent:A:CYS79:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS79:CX, <Atom instance> ligcovalent:A:CYS79:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS79:CX, <Atom instance> ligcovalent:A:CYS79:OX)]
returning queue= [(<Atom instance> ligcovalent:A:CYS79:CX, <Atom instance> ligcovalent:A:CYS79:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS79:CX, <Atom instance> ligcovalent:A:CYS79:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 19
len( CX ).bonds= 2
skipping b= CX - CX
skipping b= CX - CX
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS79:CX, <Atom instance> ligcovalent:A:CYS79:OX)]
extending queue with [(<Atom instance> ligcovalent:A:CYS79:CX, <Atom instance> ligcovalent:A:CYS79:OX)]
in for nextAts loop with a2= CX
calling wL


in writeLevel with  CX  outatom_counter= 19
len( CX ).bonds= 2
skipping b= NX - CX
skipping b= CX - CX
returning queue= []
returning queue= [(<Atom instance> ligcovalent:A:CYS79:CX, <Atom instance> ligcovalent:A:CYS79:OX)]
newQ= [(<Atom instance> ligcovalent:A:CYS79:CX, <Atom instance> ligcovalent:A:CYS79:OX)]
@@@@len(newq)= 1
queue= [(<Atom instance> ligcovalent:A:CYS79:CX, <Atom instance> ligcovalent:A:CYS79:OX)]


writing and calling wL with nA= OX - 19
wBF2: wrote  OX
!!!2:calling wL


in writeLevel with  OX  outatom_counter= 20
len( OX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []
 currently queue= CX - OX ,
CX : CX : queue= [(<Atom instance> ligcovalent:A:CYS79:CX, <Atom instance> ligcovalent:A:CYS79:OX)]
 processing queue entry:  CX - OX
in wBF with fromAtom= CX + startAtom= OX startAtom.used= 0
wBF: wrote  OX
self.outatom_counter= 21


writing and calling wL with nA= CX - 21
wBF2: wrote  CX
!!!2:calling wL


in writeLevel with  CX  outatom_counter= 22
len( CX ).bonds= 1
skipping b= CX - OX
returning queue= []
newQ= []
 currently queue=
CX : OX : queue= []
wrote flex file ligcovalent_flex.pdbqt
>>>>> DEBUG:B
wrote flexible file: ligcovalent_flex.pdbqt
wrote rigid file: ligcovalent_rigid.pdbqt
4---done
setting PYTHONHOME environment
setting PYTHONHOME environment
!unable to use ligand.TORSDOF! torsdof always set to ligand.ndihe= 7
5---done
 concat 10 log files... done.
Job finished, good luck!
rm: 无法删除'chimera.com': 没有那个文件或目录
rm: 无法删除'tmp.mol2': 没有那个文件或目录
Done
34:C121
O00170
35:C208
O00170
36:C202
O00231
37:C255
O00232
39:C41
O00244
40:C78
O00273
41:C223
O00299
42:C178
O00299
43:C24
O00299
44:C59
O00299
45:C191
O00299
46:C256
O00303
47:C972
O00410
48:C229
O00410
49:C266
O00410
50:C915
O00410
51:C1078
O00410
52:C682
O00410
53:C560
O00410
54:C733
O00410
55:C110
O00410
56:C473
O00410
57:C367
O00429
58:C470
O00429
59:C361
O00429
60:C134
O00522
61:C272
O00541
64:C212
O14579
65:C260
O14733
66:C280
O14733
67:C131
O14733
68:C278
O14744
69:C1062
O14776
70:C449
O14777
71:C63
O14818
72:C63
O14893
73:C751
O14920
74:C27
O14929
75:C294
O14929
76:C120
O14929
77:C101
O14929
78:C98
O14933
80:C393
O14965
81:C723
O14980
82:C528
O14980
83:C34
O14980
84:C1070
O14980
85:C164
O14980
86:C119
O14980
87:C221
O15037
92:C406
O15111
93:C70
O15143
94:C162
O15143
95:C120
O15144
96:C162
O15145
97:C620
O15294
100:C19
O15371
101:C258
O15371
102:C195
O15371
103:C327
O15372
104:C342
O15382
105:C21
O15530
106:C15
O15541
107:C254
O43175
108:C281
O43175
109:C295
O43175
110:C48
O43175
111:C111
O43175
112:C369
O43175
113:C18
O43175
114:C483
O43242
115:C127
O43252
116:C207
O43252
117:C78
O43252
120:C99
O43390
121:C34
O43396
122:C285
O43414
123:C174
O43447
124:C214
O43488
125:C66
O43504
126:C446
O43516
129:C31
O43617
130:C184
O43683
132:C499
O43707
133:C153
O43765
134:C129
O43765
135:C511
O43776
136:C183
O43813
137:C300
O43813
138:C232
O43837
140:C272
O43865
141:C152
O60232
142:C87
O60234
143:C316
O60343
144:C266
O60343
145:C1277
O60343
146:C45
O60343
150:C140
O60493
151:C596
O60502
152:C96
O60506
153:C237
O60547
154:C336
O60547
155:C51
O60566
156:C578
O60566
161:C239
O60671
162:C148
O60671
163:C139
O60684
164:C276
O60701
165:C241
O60701
166:C678
O60763
167:C430
O60825
168:C158
O60825
169:C60
O60828
171:C96
O60888
172:C200
O60921
179:C42
O75223
180:C69
O75348
181:C286
O75362
182:C2501
O75369
183:C211
O75390
184:C191
O75391
186:C184
O75446
187:C314
O75449
188:C380
O75521
189:C85
O75531
193:C144
O75608
195:C87
O75663
196:C172
O75688
197:C874
O75694
198:C773
O75717
200:C139
O75821
201:C207
O75822
202:C379
O75874
203:C269
O75874
205:C424
O75914
206:C106
O75934
209:C214
O75940
212:C229
O76003
213:C146
O76003
215:C52
O76071
216:C72
O76071
217:C194
O76075
219:C947
O94804
221:C1534
O94913
224:C79
O94992
226:C730
O95071
Traceback (most recent call last):
  File "run_all.py", line 120, in <module>
    covdock.runcovdock(dirname)
  File "/home/fuqiuyu/work/covdock_server/module/covdock.py", line 107, in runcovdock
    for line in request.urlopen(f"https://alphafold.ebi.ac.uk/files/AF-{uniprot.upper()}-F1-model_v1.pdb"):
  File "/home/fuqiuyu/Software/miniconda3/envs/covdock/lib/python3.7/urllib/request.py", line 222, in urlopen
    return opener.open(url, data, timeout)
  File "/home/fuqiuyu/Software/miniconda3/envs/covdock/lib/python3.7/urllib/request.py", line 531, in open
    response = meth(req, response)
  File "/home/fuqiuyu/Software/miniconda3/envs/covdock/lib/python3.7/urllib/request.py", line 641, in http_response
    'http', request, response, code, msg, hdrs)
  File "/home/fuqiuyu/Software/miniconda3/envs/covdock/lib/python3.7/urllib/request.py", line 569, in error
    return self._call_chain(*args)
  File "/home/fuqiuyu/Software/miniconda3/envs/covdock/lib/python3.7/urllib/request.py", line 503, in _call_chain
    result = func(*args)
  File "/home/fuqiuyu/Software/miniconda3/envs/covdock/lib/python3.7/urllib/request.py", line 649, in http_error_default
    raise HTTPError(req.full_url, code, msg, hdrs, fp)
urllib.error.HTTPError: HTTP Error 404: Not Found
